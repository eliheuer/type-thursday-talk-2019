{
.appVersion = "1246";
DisplayStrings = (
"Rune bender"
);
copyright = "(c) 2015 Eli Heuer ";
customParameters = (
{
name = license;
value = "Licensed under the Open Font License, version 1.1 or later";
},
{
name = panose;
value = (
2,
0,
5,
6,
3,
0,
0,
2,
0,
4
);
},
{
name = unicodeRanges;
value = (
0
);
},
{
name = codePageRanges;
value = (
1252
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
space,
HT,
dollar,
hyphen,
C,
D,
E,
F,
G,
H,
I,
J,
K,
L,
M,
N,
O,
P,
Q,
R,
S,
T,
U,
V,
W,
X,
Y,
Z,
a,
b,
c,
d,
e,
f,
g,
h,
i,
j,
k,
l,
m,
n,
o,
p,
q,
r,
s,
t,
u,
v,
w,
x,
y,
z,
endash,
emdash,
Ydieresis,
working001
);
}
);
date = "2014-12-09 23:49:36 +0000";
designer = "Eli Heuer";
designerURL = elih.blog;
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
familyName = Quadralis;
fontMaster = (
{
ascender = 930;
capHeight = 672;
custom = Beta;
customParameters = (
{
name = typoAscender;
value = 930;
},
{
name = typoDescender;
value = -200;
},
{
name = typoLineGap;
value = 85;
},
{
name = winAscent;
value = 930;
},
{
name = winDescent;
value = 171;
},
{
name = hheaAscender;
value = 930;
},
{
name = hheaDescender;
value = -200;
},
{
name = strikeoutPosition;
value = 278;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "Prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01223 1 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01212 8 1 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01220 6 1 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 8 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 3 values pushed */\012832 1 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 9 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 3 values pushed */\01264 1 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 4 values pushed */\01214 6 1 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
116,
116,
145,
145,
726,
-192,
768,
560,
0,
-192,
768,
-192,
768,
560,
0,
-192
);
}
);
descender = -200;
id = "EAEBD88B-362D-401C-A399-B15130C77D90";
weightValue = 400;
widthValue = 5;
xHeight = 464;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"50 704 LINE",
"50 -192 LINE",
"450 -192 LINE",
"450 704 LINE"
);
},
{
closed = 1;
nodes = (
"400 -142 LINE",
"100 -142 LINE",
"100 654 LINE",
"400 654 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 39 values pushed */
4 1 1 0 2 3 1 2 103 0 3 0 0 3 87 0 3 3 0 95 0 0 3 0 79 0 0 7 6 5 4 0 3 0 3 17 5 6 23 
CALL[ ]\011/* CallFunction */";
};
width = 500;
}
);
note = .notdef;
},
{
glyphname = space;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
width = 0;
}
);
note = space;
unicode = 0020;
},
{
glyphname = HT;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"375 -192 OFFCURVE",
"383 -186 OFFCURVE",
"393 -173 OFFCURVE",
"398 -168 QCURVE SMOOTH",
"435 -132 LINE SMOOTH",
"499 -69 OFFCURVE",
"553 2 OFFCURVE",
"580 103 OFFCURVE",
"580 192 QCURVE SMOOTH",
"580 472 LINE SMOOTH",
"580 487 OFFCURVE",
"572 507 OFFCURVE",
"553 525 OFFCURVE",
"550 528 QCURVE SMOOTH",
"543 535 OFFCURVE",
"529 552 OFFCURVE",
"520 560 OFFCURVE",
"514 560 QCURVE SMOOTH",
"508 560 OFFCURVE",
"499 552 OFFCURVE",
"485 535 OFFCURVE",
"478 528 QCURVE SMOOTH",
"358 408 LINE SMOOTH",
"354 404 OFFCURVE",
"352 404 QCURVE SMOOTH",
"348 404 OFFCURVE",
"348 408 QCURVE SMOOTH",
"348 464 LINE SMOOTH",
"348 537 OFFCURVE",
"366 629 OFFCURVE",
"402 692 OFFCURVE",
"434 724 QCURVE SMOOTH",
"439 729 OFFCURVE",
"450 737 OFFCURVE",
"458 746 OFFCURVE",
"458 751 QCURVE SMOOTH",
"458 752 LINE SMOOTH",
"458 759 OFFCURVE",
"449 768 OFFCURVE",
"442 768 QCURVE SMOOTH",
"437 768 OFFCURVE",
"429 762 OFFCURVE",
"419 749 OFFCURVE",
"414 744 QCURVE SMOOTH",
"402 732 OFFCURVE",
"391 726 OFFCURVE",
"382 726 QCURVE SMOOTH",
"-384 726 LINE SMOOTH",
"-394 726 OFFCURVE",
"-412 712 OFFCURVE",
"-428 696 QCURVE SMOOTH",
"-504 620 LINE SMOOTH",
"-509 615 OFFCURVE",
"-520 607 OFFCURVE",
"-528 598 OFFCURVE",
"-528 592 QCURVE SMOOTH",
"-528 585 OFFCURVE",
"-519 576 OFFCURVE",
"-512 576 QCURVE SMOOTH",
"-507 576 OFFCURVE",
"-499 582 OFFCURVE",
"-489 595 OFFCURVE",
"-484 600 QCURVE SMOOTH",
"-472 612 OFFCURVE",
"-461 618 OFFCURVE",
"-452 618 QCURVE SMOOTH",
"283 618 LINE SMOOTH",
"287 618 OFFCURVE",
"287 614 QCURVE SMOOTH",
"287 613 OFFCURVE",
"284 608 QCURVE SMOOTH",
"255 565 OFFCURVE",
"232 469 OFFCURVE",
"232 384 QCURVE SMOOTH",
"232 196 LINE SMOOTH",
"232 187 OFFCURVE",
"243 176 OFFCURVE",
"252 176 QCURVE SMOOTH",
"258 176 OFFCURVE",
"267 184 OFFCURVE",
"281 201 OFFCURVE",
"288 208 QCURVE SMOOTH",
"316 236 LINE SMOOTH",
"323 243 OFFCURVE",
"340 257 OFFCURVE",
"348 266 OFFCURVE",
"348 272 QCURVE SMOOTH",
"348 348 LINE SMOOTH",
"348 354 OFFCURVE",
"352 362 OFFCURVE",
"358 368 QCURVE SMOOTH",
"427 437 LINE SMOOTH",
"430 440 OFFCURVE",
"434 440 QCURVE SMOOTH",
"438 440 OFFCURVE",
"441 437 QCURVE SMOOTH",
"453 425 OFFCURVE",
"464 407 OFFCURVE",
"464 392 QCURVE SMOOTH",
"464 112 LINE SMOOTH",
"464 39 OFFCURVE",
"446 -53 OFFCURVE",
"410 -116 OFFCURVE",
"378 -148 QCURVE SMOOTH",
"373 -153 OFFCURVE",
"360 -162 OFFCURVE",
"354 -170 OFFCURVE",
"354 -176 QCURVE SMOOTH",
"354 -183 OFFCURVE",
"363 -192 OFFCURVE",
"370 -192 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"900 236 LINE SMOOTH",
"907 243 OFFCURVE",
"924 257 OFFCURVE",
"932 266 OFFCURVE",
"932 272 QCURVE SMOOTH",
"932 610 LINE SMOOTH",
"932 618 OFFCURVE",
"940 618 QCURVE SMOOTH",
"1357 618 LINE SMOOTH",
"1375 618 OFFCURVE",
"1397 628 OFFCURVE",
"1409 640 QCURVE SMOOTH",
"1493 724 LINE SMOOTH",
"1498 729 OFFCURVE",
"1509 737 OFFCURVE",
"1517 746 OFFCURVE",
"1517 752 QCURVE SMOOTH",
"1517 759 OFFCURVE",
"1508 768 OFFCURVE",
"1501 768 QCURVE SMOOTH",
"1496 768 OFFCURVE",
"1488 762 OFFCURVE",
"1478 749 OFFCURVE",
"1473 744 QCURVE SMOOTH",
"1461 732 OFFCURVE",
"1450 726 OFFCURVE",
"1441 726 QCURVE SMOOTH",
"592 726 LINE SMOOTH",
"574 726 OFFCURVE",
"552 716 OFFCURVE",
"540 704 QCURVE SMOOTH",
"456 620 LINE SMOOTH",
"451 615 OFFCURVE",
"440 607 OFFCURVE",
"432 598 OFFCURVE",
"432 592 QCURVE SMOOTH",
"432 585 OFFCURVE",
"441 576 OFFCURVE",
"448 576 QCURVE SMOOTH",
"453 576 OFFCURVE",
"461 582 OFFCURVE",
"471 595 OFFCURVE",
"476 600 QCURVE SMOOTH",
"488 612 OFFCURVE",
"499 618 OFFCURVE",
"508 618 QCURVE SMOOTH",
"840 618 LINE SMOOTH",
"843 618 OFFCURVE",
"843 615 QCURVE SMOOTH",
"843 613 OFFCURVE",
"840 610 QCURVE SMOOTH",
"836 607 OFFCURVE",
"824 597 OFFCURVE",
"816 588 OFFCURVE",
"816 582 QCURVE SMOOTH",
"816 196 LINE SMOOTH",
"816 187 OFFCURVE",
"827 176 OFFCURVE",
"836 176 QCURVE SMOOTH",
"842 176 OFFCURVE",
"851 184 OFFCURVE",
"865 201 OFFCURVE",
"872 208 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-92 392 LINE SMOOTH",
"-87 387 OFFCURVE",
"-78 374 OFFCURVE",
"-70 368 OFFCURVE",
"-64 368 QCURVE SMOOTH",
"-58 368 OFFCURVE",
"-50 374 OFFCURVE",
"-41 387 OFFCURVE",
"-36 392 QCURVE SMOOTH",
"8 436 LINE SMOOTH",
"13 441 OFFCURVE",
"26 450 OFFCURVE",
"32 458 OFFCURVE",
"32 464 QCURVE SMOOTH",
"32 470 OFFCURVE",
"26 478 OFFCURVE",
"13 487 OFFCURVE",
"8 492 QCURVE SMOOTH",
"-36 536 LINE SMOOTH",
"-41 541 OFFCURVE",
"-50 554 OFFCURVE",
"-58 560 OFFCURVE",
"-64 560 QCURVE SMOOTH",
"-70 560 OFFCURVE",
"-78 554 OFFCURVE",
"-87 541 OFFCURVE",
"-92 536 QCURVE SMOOTH",
"-136 492 LINE SMOOTH",
"-141 487 OFFCURVE",
"-154 478 OFFCURVE",
"-160 470 OFFCURVE",
"-160 464 QCURVE SMOOTH",
"-160 458 OFFCURVE",
"-154 450 OFFCURVE",
"-141 441 OFFCURVE",
"-136 436 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"316 108 LINE SMOOTH",
"321 113 OFFCURVE",
"332 121 OFFCURVE",
"340 130 OFFCURVE",
"340 136 QCURVE SMOOTH",
"340 143 OFFCURVE",
"331 152 OFFCURVE",
"324 152 QCURVE SMOOTH",
"319 152 OFFCURVE",
"311 146 OFFCURVE",
"301 133 OFFCURVE",
"296 128 QCURVE SMOOTH",
"292 124 OFFCURVE",
"283 117 OFFCURVE",
"278 117 QCURVE SMOOTH",
"270 117 OFFCURVE",
"260 123 QCURVE SMOOTH",
"196 155 LINE SMOOTH",
"185 160 OFFCURVE",
"174 169 OFFCURVE",
"174 176 QCURVE SMOOTH",
"174 540 LINE SMOOTH",
"174 549 OFFCURVE",
"163 560 OFFCURVE",
"154 560 QCURVE SMOOTH",
"148 560 OFFCURVE",
"139 552 OFFCURVE",
"125 535 OFFCURVE",
"118 528 QCURVE SMOOTH",
"90 500 LINE SMOOTH",
"83 493 OFFCURVE",
"66 479 OFFCURVE",
"58 470 OFFCURVE",
"58 464 QCURVE SMOOTH",
"58 140 LINE SMOOTH",
"58 131 OFFCURVE",
"52 125 QCURVE SMOOTH",
"46 119 OFFCURVE",
"35 110 OFFCURVE",
"28 102 OFFCURVE",
"28 96 QCURVE SMOOTH",
"28 89 OFFCURVE",
"38 80 OFFCURVE",
"56 75 OFFCURVE",
"60 73 QCURVE SMOOTH",
"174 16 LINE SMOOTH",
"178 14 OFFCURVE",
"197 0 OFFCURVE",
"204 0 QCURVE SMOOTH",
"210 0 OFFCURVE",
"219 8 OFFCURVE",
"233 25 OFFCURVE",
"240 32 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"900 108 LINE SMOOTH",
"905 113 OFFCURVE",
"916 121 OFFCURVE",
"924 130 OFFCURVE",
"924 136 QCURVE SMOOTH",
"924 143 OFFCURVE",
"915 152 OFFCURVE",
"908 152 QCURVE SMOOTH",
"903 152 OFFCURVE",
"895 146 OFFCURVE",
"885 133 OFFCURVE",
"880 128 QCURVE SMOOTH",
"876 124 OFFCURVE",
"867 117 OFFCURVE",
"862 117 QCURVE SMOOTH",
"854 117 OFFCURVE",
"844 123 QCURVE SMOOTH",
"780 155 LINE SMOOTH",
"769 160 OFFCURVE",
"758 169 OFFCURVE",
"758 176 QCURVE SMOOTH",
"758 540 LINE SMOOTH",
"758 549 OFFCURVE",
"747 560 OFFCURVE",
"738 560 QCURVE SMOOTH",
"732 560 OFFCURVE",
"723 552 OFFCURVE",
"709 535 OFFCURVE",
"702 528 QCURVE SMOOTH",
"674 500 LINE SMOOTH",
"667 493 OFFCURVE",
"650 479 OFFCURVE",
"642 470 OFFCURVE",
"642 464 QCURVE SMOOTH",
"642 140 LINE SMOOTH",
"642 131 OFFCURVE",
"636 125 QCURVE SMOOTH",
"630 119 OFFCURVE",
"619 110 OFFCURVE",
"612 102 OFFCURVE",
"612 96 QCURVE SMOOTH",
"612 89 OFFCURVE",
"622 80 OFFCURVE",
"640 75 OFFCURVE",
"644 73 QCURVE SMOOTH",
"758 16 LINE SMOOTH",
"762 14 OFFCURVE",
"781 0 OFFCURVE",
"788 0 QCURVE SMOOTH",
"794 0 OFFCURVE",
"803 8 OFFCURVE",
"817 25 OFFCURVE",
"824 32 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"958 458 OFFCURVE",
"964 450 OFFCURVE",
"977 441 OFFCURVE",
"982 436 QCURVE SMOOTH",
"1026 392 LINE SMOOTH",
"1031 387 OFFCURVE",
"1040 374 OFFCURVE",
"1048 368 OFFCURVE",
"1054 368 QCURVE SMOOTH",
"1060 368 OFFCURVE",
"1068 374 OFFCURVE",
"1077 387 OFFCURVE",
"1082 392 QCURVE SMOOTH",
"1126 436 LINE SMOOTH",
"1131 441 OFFCURVE",
"1144 450 OFFCURVE",
"1150 458 OFFCURVE",
"1150 464 QCURVE SMOOTH",
"1150 470 OFFCURVE",
"1144 478 OFFCURVE",
"1131 487 OFFCURVE",
"1126 492 QCURVE SMOOTH",
"1082 536 LINE SMOOTH",
"1077 541 OFFCURVE",
"1068 554 OFFCURVE",
"1060 560 OFFCURVE",
"1054 560 QCURVE SMOOTH",
"1048 560 OFFCURVE",
"1040 554 OFFCURVE",
"1031 541 OFFCURVE",
"1026 536 QCURVE SMOOTH",
"982 492 LINE SMOOTH",
"977 487 OFFCURVE",
"964 478 OFFCURVE",
"958 470 OFFCURVE",
"958 464 QCURVE SMOOTH"
);
}
);
width = 638;
}
);
note = HT;
},
{
glyphname = dollar;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
width = 500;
}
);
note = dollar;
unicode = 0024;
},
{
glyphname = hyphen;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"236 366 LINE SMOOTH",
"228 366 OFFCURVE",
"212 368 OFFCURVE",
"202 368 QCURVE SMOOTH",
"195 368 OFFCURVE",
"183 357 OFFCURVE",
"170 340 OFFCURVE",
"166 336 QCURVE SMOOTH",
"90 260 LINE SMOOTH",
"85 255 OFFCURVE",
"69 242 OFFCURVE",
"58 230 OFFCURVE",
"58 224 QCURVE SMOOTH",
"58 218 OFFCURVE",
"67 208 OFFCURVE",
"74 208 QCURVE SMOOTH",
"83 208 OFFCURVE",
"96 226 OFFCURVE",
"98 228 QCURVE SMOOTH",
"112 242 LINE SMOOTH",
"121 251 OFFCURVE",
"137 258 OFFCURVE",
"152 258 QCURVE SMOOTH",
"438 258 LINE SMOOTH",
"446 258 OFFCURVE",
"462 256 OFFCURVE",
"472 256 QCURVE SMOOTH",
"479 256 OFFCURVE",
"491 267 OFFCURVE",
"504 284 OFFCURVE",
"508 288 QCURVE SMOOTH",
"584 364 LINE SMOOTH",
"589 369 OFFCURVE",
"605 382 OFFCURVE",
"616 394 OFFCURVE",
"616 400 QCURVE SMOOTH",
"616 406 OFFCURVE",
"607 416 OFFCURVE",
"600 416 QCURVE SMOOTH",
"591 416 OFFCURVE",
"578 398 OFFCURVE",
"576 396 QCURVE SMOOTH",
"562 382 LINE SMOOTH",
"553 373 OFFCURVE",
"537 366 OFFCURVE",
"522 366 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 45 values pushed */
0 0 4 0 133 0 3 1 3 134 6 5 2 4 1 1 4 89 6 5 2 4 4 1 97 2 1 1 4 1 81 0 0 0 45 0 43 43 21 49 43 21 7 7 27 
CALL[ ]\011/* CallFunction */";
};
width = 674;
}
);
note = hyphen;
unicode = 002D;
},
{
glyphname = C;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"560 106 LINE SMOOTH",
"564 110 OFFCURVE",
"575 119 OFFCURVE",
"584 130 OFFCURVE",
"584 136 QCURVE SMOOTH",
"584 143 OFFCURVE",
"575 150 OFFCURVE",
"568 150 QCURVE SMOOTH",
"563 150 OFFCURVE",
"555 144 OFFCURVE",
"545 131 OFFCURVE",
"540 126 QCURVE SMOOTH",
"528 114 OFFCURVE",
"517 108 OFFCURVE",
"508 108 QCURVE SMOOTH",
"356 108 LINE SMOOTH",
"337 108 OFFCURVE",
"313 115 OFFCURVE",
"301 127 QCURVE SMOOTH",
"225 203 OFFCURVE",
"225 205 QCURVE SMOOTH",
"225 207 OFFCURVE",
"228 210 QCURVE SMOOTH",
"326 308 LINE SMOOTH",
"338 320 OFFCURVE",
"348 342 OFFCURVE",
"348 360 QCURVE SMOOTH",
"348 617 LINE SMOOTH",
"348 621 OFFCURVE",
"352 621 QCURVE",
"455 586 LINE SMOOTH",
"483 576 OFFCURVE",
"488 576 QCURVE SMOOTH",
"494 576 OFFCURVE",
"502 582 OFFCURVE",
"511 595 OFFCURVE",
"516 600 QCURVE SMOOTH",
"560 644 LINE SMOOTH",
"565 649 OFFCURVE",
"578 658 OFFCURVE",
"584 666 OFFCURVE",
"584 672 QCURVE SMOOTH",
"584 679 OFFCURVE",
"573 687 OFFCURVE",
"556 692 OFFCURVE",
"552 693 QCURVE SMOOTH",
"360 757 LINE SMOOTH",
"355 759 OFFCURVE",
"340 766 OFFCURVE",
"334 767 QCURVE SMOOTH",
"328 768 LINE SMOOTH",
"322 768 OFFCURVE",
"314 762 OFFCURVE",
"305 749 OFFCURVE",
"300 744 QCURVE SMOOTH",
"80 524 LINE SMOOTH",
"68 512 OFFCURVE",
"58 490 OFFCURVE",
"58 472 QCURVE SMOOTH",
"58 200 LINE SMOOTH",
"58 182 OFFCURVE",
"68 160 OFFCURVE",
"80 148 QCURVE SMOOTH",
"207 21 LINE SMOOTH",
"219 9 OFFCURVE",
"242 0 OFFCURVE",
"260 0 QCURVE SMOOTH",
"424 0 LINE SMOOTH",
"442 0 OFFCURVE",
"464 10 OFFCURVE",
"476 22 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"201 227 OFFCURVE",
"199 229 QCURVE SMOOTH",
"186 242 OFFCURVE",
"174 264 OFFCURVE",
"174 280 QCURVE SMOOTH",
"174 552 LINE SMOOTH",
"174 569 OFFCURVE",
"186 590 OFFCURVE",
"200 604 QCURVE SMOOTH",
"222 626 LINE SMOOTH",
"226 630 OFFCURVE",
"228 630 QCURVE SMOOTH",
"232 630 OFFCURVE",
"232 626 QCURVE SMOOTH",
"232 280 LINE SMOOTH",
"232 264 OFFCURVE",
"220 242 OFFCURVE",
"207 229 QCURVE SMOOTH",
"205 227 OFFCURVE",
"203 227 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 42 values pushed */
88 1 3 1 1 76 76 40 2 1 74 0 1 3 1 133 0 3 2 3 133 0 2 2 0 95 0 0 0 18 0 78 63 61 56 53 38 36 49 4 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 580;
}
);
note = C;
unicode = 0043;
},
{
glyphname = D;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"-307 576 OFFCURVE",
"-299 582 OFFCURVE",
"-289 595 OFFCURVE",
"-284 600 QCURVE SMOOTH",
"-272 612 OFFCURVE",
"-261 618 OFFCURVE",
"-252 618 QCURVE SMOOTH",
"144 618 LINE SMOOTH",
"162 618 OFFCURVE",
"184 628 OFFCURVE",
"196 640 QCURVE SMOOTH",
"280 724 LINE SMOOTH",
"285 729 OFFCURVE",
"298 738 OFFCURVE",
"304 746 OFFCURVE",
"304 752 QCURVE SMOOTH",
"304 759 OFFCURVE",
"295 768 OFFCURVE",
"288 768 QCURVE SMOOTH",
"282 768 OFFCURVE",
"274 762 OFFCURVE",
"265 749 OFFCURVE",
"260 744 QCURVE SMOOTH",
"248 732 OFFCURVE",
"237 726 OFFCURVE",
"228 726 QCURVE SMOOTH",
"-168 726 LINE SMOOTH",
"-186 726 OFFCURVE",
"-208 716 OFFCURVE",
"-220 704 QCURVE SMOOTH",
"-304 620 LINE SMOOTH",
"-309 615 OFFCURVE",
"-320 607 OFFCURVE",
"-328 598 OFFCURVE",
"-328 592 QCURVE SMOOTH",
"-328 585 OFFCURVE",
"-319 576 OFFCURVE",
"-312 576 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"468 117 LINE",
"460 117 OFFCURVE",
"450 123 QCURVE SMOOTH",
"346 175 LINE SMOOTH",
"343 176 OFFCURVE",
"337 180 QCURVE",
"348 195 OFFCURVE",
"348 220 QCURVE SMOOTH",
"348 648 LINE",
"354 648 LINE SMOOTH",
"358 648 OFFCURVE",
"361 645 QCURVE SMOOTH",
"503 503 LINE SMOOTH",
"513 493 OFFCURVE",
"522 476 OFFCURVE",
"522 462 QCURVE SMOOTH",
"521 120 LINE",
"638 120 LINE",
"638 538 LINE SMOOTH",
"638 556 OFFCURVE",
"629 577 OFFCURVE",
"616 590 QCURVE SMOOTH",
"470 736 LINE SMOOTH",
"464 742 OFFCURVE",
"456 752 QCURVE SMOOTH",
"455 753 OFFCURVE",
"449 760 OFFCURVE",
"439 768 OFFCURVE",
"434 768 QCURVE SMOOTH",
"382 768 LINE SMOOTH",
"376 768 OFFCURVE",
"368 762 OFFCURVE",
"359 749 OFFCURVE",
"354 744 QCURVE SMOOTH",
"254 644 LINE SMOOTH",
"242 632 OFFCURVE",
"232 610 OFFCURVE",
"232 592 QCURVE SMOOTH",
"232 140 LINE SMOOTH",
"232 123 OFFCURVE",
"220 102 OFFCURVE",
"206 88 QCURVE SMOOTH",
"202 84 LINE SMOOTH",
"197 79 OFFCURVE",
"186 71 OFFCURVE",
"178 62 OFFCURVE",
"178 56 QCURVE SMOOTH",
"178 49 OFFCURVE",
"187 40 OFFCURVE",
"194 40 QCURVE SMOOTH",
"199 40 OFFCURVE",
"207 46 OFFCURVE",
"217 59 OFFCURVE",
"222 64 QCURVE SMOOTH",
"226 68 OFFCURVE",
"235 75 OFFCURVE",
"240 75 QCURVE SMOOTH",
"248 75 OFFCURVE",
"258 69 QCURVE SMOOTH",
"364 16 LINE SMOOTH",
"368 14 OFFCURVE",
"387 0 OFFCURVE",
"394 0 QCURVE"
);
},
{
closed = 1;
nodes = (
"30 0 OFFCURVE",
"38 6 OFFCURVE",
"47 19 OFFCURVE",
"52 24 QCURVE SMOOTH",
"152 124 LINE SMOOTH",
"164 136 OFFCURVE",
"174 158 OFFCURVE",
"174 176 QCURVE SMOOTH",
"174 498 LINE SMOOTH",
"174 515 OFFCURVE",
"186 536 OFFCURVE",
"200 550 QCURVE SMOOTH",
"205 555 OFFCURVE",
"218 564 OFFCURVE",
"224 572 OFFCURVE",
"224 578 QCURVE SMOOTH",
"224 585 OFFCURVE",
"215 594 OFFCURVE",
"208 594 QCURVE SMOOTH",
"202 594 OFFCURVE",
"194 588 OFFCURVE",
"185 575 OFFCURVE",
"180 570 QCURVE SMOOTH",
"80 470 LINE SMOOTH",
"68 458 OFFCURVE",
"58 436 OFFCURVE",
"58 418 QCURVE SMOOTH",
"58 96 LINE SMOOTH",
"58 79 OFFCURVE",
"46 58 OFFCURVE",
"32 44 QCURVE SMOOTH",
"27 39 OFFCURVE",
"14 30 OFFCURVE",
"8 22 OFFCURVE",
"8 16 QCURVE SMOOTH",
"8 9 OFFCURVE",
"17 0 OFFCURVE",
"24 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
90 1 2 0 94 1 7 3 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
0 8 2 3 2 8 3 128 10 1 3 7 2 3 7 126 0 7 4 2 7 4 126 0 4 5 2 4 5 126 0 5 9 2 5 9 126 6 1 1 1 20 77 0 2 2 0 95 0 0 0 14 77 11 1 9 9 18 9 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
0 8 2 3 2 8 3 128 10 1 3 7 2 3 7 126 0 7 4 2 7 4 126 0 4 5 2 4 5 126 0 5 9 2 5 9 126 0 0 0 2 8 0 2 103 6 1 1 1 16 77 11 1 9 9 18 9 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
101 101 0 0 101 138 101 137 120 118 83 82 71 69 51 49 44 42 0 37 0 36 57 37 57 12 7 25 
CALL[ ]\011/* CallFunction */";
};
width = 696;
}
);
note = D;
unicode = 0044;
},
{
glyphname = E;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"502 106 LINE SMOOTH",
"506 110 OFFCURVE",
"517 119 OFFCURVE",
"526 130 OFFCURVE",
"526 136 QCURVE SMOOTH",
"526 143 OFFCURVE",
"517 150 OFFCURVE",
"510 150 QCURVE SMOOTH",
"505 150 OFFCURVE",
"497 144 OFFCURVE",
"487 131 OFFCURVE",
"482 126 QCURVE SMOOTH",
"470 114 OFFCURVE",
"459 108 OFFCURVE",
"450 108 QCURVE SMOOTH",
"298 108 LINE SMOOTH",
"279 108 OFFCURVE",
"255 115 OFFCURVE",
"243 127 QCURVE SMOOTH",
"167 203 OFFCURVE",
"167 205 QCURVE SMOOTH",
"167 207 OFFCURVE",
"170 210 QCURVE SMOOTH",
"248 288 LINE SMOOTH",
"260 300 OFFCURVE",
"271 306 OFFCURVE",
"280 306 QCURVE SMOOTH",
"410 306 LINE SMOOTH",
"428 306 OFFCURVE",
"450 316 OFFCURVE",
"462 328 QCURVE SMOOTH",
"514 380 LINE SMOOTH",
"521 387 OFFCURVE",
"526 395 OFFCURVE",
"526 400 QCURVE SMOOTH",
"526 407 OFFCURVE",
"517 414 OFFCURVE",
"510 414 QCURVE SMOOTH",
"364 414 LINE SMOOTH",
"346 414 OFFCURVE",
"324 404 OFFCURVE",
"312 392 QCURVE SMOOTH",
"300 380 LINE SMOOTH",
"296 376 OFFCURVE",
"294 376 QCURVE SMOOTH",
"290 376 OFFCURVE",
"290 380 QCURVE SMOOTH",
"290 617 LINE SMOOTH",
"290 621 OFFCURVE",
"294 621 QCURVE",
"397 586 LINE SMOOTH",
"425 576 OFFCURVE",
"430 576 QCURVE SMOOTH",
"436 576 OFFCURVE",
"444 582 OFFCURVE",
"453 595 OFFCURVE",
"458 600 QCURVE SMOOTH",
"502 644 LINE SMOOTH",
"507 649 OFFCURVE",
"520 658 OFFCURVE",
"526 666 OFFCURVE",
"526 672 QCURVE SMOOTH",
"526 679 OFFCURVE",
"515 687 OFFCURVE",
"498 692 OFFCURVE",
"494 693 QCURVE SMOOTH",
"302 757 LINE SMOOTH",
"297 759 OFFCURVE",
"282 766 OFFCURVE",
"276 767 QCURVE SMOOTH",
"270 768 LINE SMOOTH",
"264 768 OFFCURVE",
"256 762 OFFCURVE",
"247 749 OFFCURVE",
"242 744 QCURVE SMOOTH",
"22 524 LINE SMOOTH",
"10 512 OFFCURVE",
"0 490 OFFCURVE",
"0 472 QCURVE SMOOTH",
"0 200 LINE SMOOTH",
"0 182 OFFCURVE",
"10 160 OFFCURVE",
"22 148 QCURVE SMOOTH",
"149 21 LINE SMOOTH",
"161 9 OFFCURVE",
"184 0 OFFCURVE",
"202 0 QCURVE SMOOTH",
"366 0 LINE SMOOTH",
"384 0 OFFCURVE",
"406 10 OFFCURVE",
"418 22 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"143 227 OFFCURVE",
"141 229 QCURVE SMOOTH",
"128 242 OFFCURVE",
"116 264 OFFCURVE",
"116 280 QCURVE SMOOTH",
"116 552 LINE SMOOTH",
"116 569 OFFCURVE",
"128 590 OFFCURVE",
"142 604 QCURVE SMOOTH",
"164 626 LINE SMOOTH",
"168 630 OFFCURVE",
"170 630 QCURVE SMOOTH",
"174 630 OFFCURVE",
"174 626 QCURVE SMOOTH",
"174 280 LINE SMOOTH",
"174 264 OFFCURVE",
"162 242 OFFCURVE",
"149 229 QCURVE SMOOTH",
"147 227 OFFCURVE",
"145 227 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 61 values pushed */
43 1 3 2 108 1 5 3 2 76 96 40 2 1 74 0 1 2 1 133 0 5 3 4 3 5 4 128 0 2 0 3 5 2 3 103 0 4 4 0 95 0 0 0 18 0 78 83 81 76 73 64 61 52 50 38 36 49 6 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 542;
}
);
note = E;
unicode = 0045;
},
{
glyphname = F;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"392 -72 LINE SMOOTH",
"392 -89 OFFCURVE",
"380 -110 OFFCURVE",
"366 -124 QCURVE SMOOTH",
"342 -148 LINE SMOOTH",
"337 -153 OFFCURVE",
"324 -162 OFFCURVE",
"318 -170 OFFCURVE",
"318 -176 QCURVE SMOOTH",
"318 -183 OFFCURVE",
"327 -192 OFFCURVE",
"334 -192 QCURVE SMOOTH",
"340 -192 OFFCURVE",
"348 -186 OFFCURVE",
"357 -173 OFFCURVE",
"362 -168 QCURVE SMOOTH",
"486 -44 LINE SMOOTH",
"498 -32 OFFCURVE",
"508 -10 OFFCURVE",
"508 8 QCURVE SMOOTH",
"508 298 LINE SMOOTH",
"508 306 OFFCURVE",
"516 306 QCURVE SMOOTH",
"532 306 LINE SMOOTH",
"550 306 OFFCURVE",
"572 316 OFFCURVE",
"584 328 QCURVE SMOOTH",
"636 380 LINE SMOOTH",
"643 387 OFFCURVE",
"648 395 OFFCURVE",
"648 400 QCURVE SMOOTH",
"648 407 OFFCURVE",
"639 414 OFFCURVE",
"632 414 QCURVE SMOOTH",
"516 414 LINE SMOOTH",
"508 414 OFFCURVE",
"508 422 QCURVE SMOOTH",
"508 617 LINE SMOOTH",
"508 621 OFFCURVE",
"512 621 QCURVE",
"615 586 LINE SMOOTH",
"643 576 OFFCURVE",
"648 576 QCURVE SMOOTH",
"654 576 OFFCURVE",
"662 582 OFFCURVE",
"671 595 OFFCURVE",
"676 600 QCURVE SMOOTH",
"720 644 LINE SMOOTH",
"725 649 OFFCURVE",
"738 658 OFFCURVE",
"744 666 OFFCURVE",
"744 672 QCURVE SMOOTH",
"744 679 OFFCURVE",
"733 687 OFFCURVE",
"716 692 OFFCURVE",
"712 693 QCURVE SMOOTH",
"520 757 LINE SMOOTH",
"515 759 OFFCURVE",
"500 766 OFFCURVE",
"494 767 QCURVE SMOOTH",
"488 768 LINE SMOOTH",
"482 768 OFFCURVE",
"474 762 OFFCURVE",
"465 749 OFFCURVE",
"460 744 QCURVE SMOOTH",
"240 524 LINE SMOOTH",
"228 512 OFFCURVE",
"218 490 OFFCURVE",
"218 472 QCURVE SMOOTH",
"218 422 LINE SMOOTH",
"218 414 OFFCURVE",
"210 414 QCURVE SMOOTH",
"160 414 LINE SMOOTH",
"142 414 OFFCURVE",
"120 404 OFFCURVE",
"108 392 QCURVE SMOOTH",
"24 308 LINE SMOOTH",
"19 303 OFFCURVE",
"8 295 OFFCURVE",
"0 286 OFFCURVE",
"0 280 QCURVE SMOOTH",
"0 273 OFFCURVE",
"9 264 OFFCURVE",
"16 264 QCURVE SMOOTH",
"21 264 OFFCURVE",
"29 270 OFFCURVE",
"39 283 OFFCURVE",
"44 288 QCURVE SMOOTH",
"56 300 OFFCURVE",
"67 306 OFFCURVE",
"76 306 QCURVE SMOOTH",
"210 306 LINE SMOOTH",
"218 306 OFFCURVE",
"218 298 QCURVE SMOOTH",
"218 -172 LINE SMOOTH",
"218 -181 OFFCURVE",
"229 -192 OFFCURVE",
"238 -192 QCURVE SMOOTH",
"244 -192 OFFCURVE",
"253 -184 OFFCURVE",
"267 -167 OFFCURVE",
"274 -160 QCURVE SMOOTH",
"302 -132 LINE SMOOTH",
"309 -125 OFFCURVE",
"326 -111 OFFCURVE",
"334 -102 OFFCURVE",
"334 -96 QCURVE SMOOTH",
"334 552 LINE SMOOTH",
"334 569 OFFCURVE",
"346 590 OFFCURVE",
"360 604 QCURVE SMOOTH",
"382 626 LINE SMOOTH",
"386 630 OFFCURVE",
"388 630 QCURVE SMOOTH",
"392 630 OFFCURVE",
"392 626 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 70 values pushed */
78 45 2 3 4 94 21 2 2 1 8 1 0 2 3 76 115 75 2 4 74 0 4 3 4 133 0 2 1 0 1 2 0 128 5 1 3 6 1 1 2 3 1 105 7 1 0 0 15 0 78 104 102 92 90 81 80 73 71 43 41 32 30 25 23 18 16 8 7 22 
CALL[ ]\011/* CallFunction */";
};
width = 648;
}
);
note = F;
unicode = 0046;
},
{
glyphname = G;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"620 222 LINE SMOOTH",
"638 240 OFFCURVE",
"638 271 QCURVE SMOOTH",
"638 307 OFFCURVE",
"636 342 OFFCURVE",
"630 348 QCURVE SMOOTH",
"506 472 LINE SMOOTH",
"501 477 OFFCURVE",
"492 490 OFFCURVE",
"484 496 OFFCURVE",
"478 496 QCURVE SMOOTH",
"472 496 OFFCURVE",
"464 490 OFFCURVE",
"455 477 OFFCURVE",
"450 472 QCURVE SMOOTH",
"348 370 LINE",
"348 617 LINE SMOOTH",
"348 621 OFFCURVE",
"352 621 QCURVE",
"455 586 LINE SMOOTH",
"483 576 OFFCURVE",
"488 576 QCURVE SMOOTH",
"494 576 OFFCURVE",
"502 582 OFFCURVE",
"511 595 OFFCURVE",
"516 600 QCURVE SMOOTH",
"560 644 LINE SMOOTH",
"565 649 OFFCURVE",
"578 658 OFFCURVE",
"584 666 OFFCURVE",
"584 672 QCURVE SMOOTH",
"584 679 OFFCURVE",
"573 687 OFFCURVE",
"556 692 OFFCURVE",
"552 693 QCURVE SMOOTH",
"360 757 LINE SMOOTH",
"355 759 OFFCURVE",
"340 766 OFFCURVE",
"334 767 QCURVE SMOOTH",
"328 768 LINE SMOOTH",
"322 768 OFFCURVE",
"314 762 OFFCURVE",
"305 749 OFFCURVE",
"300 744 QCURVE SMOOTH",
"80 524 LINE SMOOTH",
"68 512 OFFCURVE",
"58 490 OFFCURVE",
"58 472 QCURVE SMOOTH",
"58 200 LINE SMOOTH",
"58 182 OFFCURVE",
"68 160 OFFCURVE",
"80 148 QCURVE SMOOTH",
"207 21 LINE SMOOTH",
"219 9 OFFCURVE",
"242 0 OFFCURVE",
"260 0 QCURVE SMOOTH",
"368 0 LINE SMOOTH",
"386 0 OFFCURVE",
"408 10 OFFCURVE",
"420 22 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"201 227 OFFCURVE",
"199 229 QCURVE SMOOTH",
"186 242 OFFCURVE",
"174 264 OFFCURVE",
"174 280 QCURVE SMOOTH",
"174 552 LINE SMOOTH",
"174 569 OFFCURVE",
"186 590 OFFCURVE",
"200 604 QCURVE SMOOTH",
"222 626 LINE SMOOTH",
"226 630 OFFCURVE",
"228 630 QCURVE SMOOTH",
"232 630 OFFCURVE",
"232 626 QCURVE SMOOTH",
"232 280 LINE SMOOTH",
"232 264 OFFCURVE",
"220 242 OFFCURVE",
"207 229 QCURVE SMOOTH",
"205 227 OFFCURVE",
"203 227 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"356 108 LINE SMOOTH",
"337 108 OFFCURVE",
"313 115 OFFCURVE",
"301 127 QCURVE SMOOTH",
"225 203 OFFCURVE",
"225 205 QCURVE SMOOTH",
"225 207 OFFCURVE",
"228 210 QCURVE SMOOTH",
"386 368 LINE SMOOTH",
"391 373 OFFCURVE",
"398 373 QCURVE SMOOTH",
"405 373 OFFCURVE",
"410 368 QCURVE SMOOTH",
"514 264 LINE SMOOTH",
"520 258 OFFCURVE",
"522 224 OFFCURVE",
"522 192 QCURVE SMOOTH",
"522 178 OFFCURVE",
"497 139 OFFCURVE",
"484 126 QCURVE SMOOTH",
"466 108 OFFCURVE",
"452 108 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 55 values pushed */
77 43 2 4 3 1 76 65 40 2 1 74 0 1 2 1 133 0 2 3 2 133 0 3 4 3 133 5 1 4 4 0 95 0 0 0 18 0 78 80 80 80 101 80 99 91 89 49 47 38 36 49 6 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 633;
}
);
note = G;
unicode = 0047;
},
{
glyphname = H;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"375 -192 OFFCURVE",
"383 -186 OFFCURVE",
"393 -173 OFFCURVE",
"398 -168 QCURVE SMOOTH",
"435 -132 LINE SMOOTH",
"499 -69 OFFCURVE",
"553 2 OFFCURVE",
"580 103 OFFCURVE",
"580 192 QCURVE SMOOTH",
"580 472 LINE SMOOTH",
"580 487 OFFCURVE",
"572 507 OFFCURVE",
"553 525 OFFCURVE",
"550 528 QCURVE SMOOTH",
"543 535 OFFCURVE",
"529 552 OFFCURVE",
"520 560 OFFCURVE",
"514 560 QCURVE SMOOTH",
"508 560 OFFCURVE",
"499 552 OFFCURVE",
"485 535 OFFCURVE",
"478 528 QCURVE SMOOTH",
"358 408 LINE SMOOTH",
"354 404 OFFCURVE",
"352 404 QCURVE SMOOTH",
"348 404 OFFCURVE",
"348 408 QCURVE SMOOTH",
"348 464 LINE SMOOTH",
"348 537 OFFCURVE",
"366 629 OFFCURVE",
"402 692 OFFCURVE",
"434 724 QCURVE SMOOTH",
"439 729 OFFCURVE",
"450 737 OFFCURVE",
"458 746 OFFCURVE",
"458 751 QCURVE SMOOTH",
"458 752 LINE SMOOTH",
"458 759 OFFCURVE",
"449 768 OFFCURVE",
"442 768 QCURVE SMOOTH",
"437 768 OFFCURVE",
"429 762 OFFCURVE",
"419 749 OFFCURVE",
"414 744 QCURVE SMOOTH",
"402 732 OFFCURVE",
"391 726 OFFCURVE",
"382 726 QCURVE SMOOTH",
"-66 726 LINE SMOOTH",
"-76 726 OFFCURVE",
"-94 712 OFFCURVE",
"-110 696 QCURVE SMOOTH",
"-186 620 LINE SMOOTH",
"-191 615 OFFCURVE",
"-202 607 OFFCURVE",
"-210 598 OFFCURVE",
"-210 592 QCURVE SMOOTH",
"-210 585 OFFCURVE",
"-201 576 OFFCURVE",
"-194 576 QCURVE SMOOTH",
"-189 576 OFFCURVE",
"-181 582 OFFCURVE",
"-171 595 OFFCURVE",
"-166 600 QCURVE SMOOTH",
"-154 612 OFFCURVE",
"-143 618 OFFCURVE",
"-134 618 QCURVE SMOOTH",
"283 618 LINE SMOOTH",
"287 618 OFFCURVE",
"287 614 QCURVE SMOOTH",
"287 613 OFFCURVE",
"284 608 QCURVE SMOOTH",
"255 565 OFFCURVE",
"232 469 OFFCURVE",
"232 384 QCURVE SMOOTH",
"232 196 LINE SMOOTH",
"232 187 OFFCURVE",
"243 176 OFFCURVE",
"252 176 QCURVE SMOOTH",
"258 176 OFFCURVE",
"267 184 OFFCURVE",
"281 201 OFFCURVE",
"288 208 QCURVE SMOOTH",
"316 236 LINE SMOOTH",
"323 243 OFFCURVE",
"340 257 OFFCURVE",
"348 266 OFFCURVE",
"348 272 QCURVE SMOOTH",
"348 348 LINE SMOOTH",
"348 354 OFFCURVE",
"352 362 OFFCURVE",
"358 368 QCURVE SMOOTH",
"427 437 LINE SMOOTH",
"430 440 OFFCURVE",
"434 440 QCURVE SMOOTH",
"438 440 OFFCURVE",
"441 437 QCURVE SMOOTH",
"453 425 OFFCURVE",
"464 407 OFFCURVE",
"464 392 QCURVE SMOOTH",
"464 112 LINE SMOOTH",
"464 39 OFFCURVE",
"446 -53 OFFCURVE",
"410 -116 OFFCURVE",
"378 -148 QCURVE SMOOTH",
"373 -153 OFFCURVE",
"360 -162 OFFCURVE",
"354 -170 OFFCURVE",
"354 -176 QCURVE SMOOTH",
"354 -183 OFFCURVE",
"363 -192 OFFCURVE",
"370 -192 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"316 108 LINE SMOOTH",
"321 113 OFFCURVE",
"332 121 OFFCURVE",
"340 130 OFFCURVE",
"340 136 QCURVE SMOOTH",
"340 143 OFFCURVE",
"331 152 OFFCURVE",
"324 152 QCURVE SMOOTH",
"319 152 OFFCURVE",
"311 146 OFFCURVE",
"301 133 OFFCURVE",
"296 128 QCURVE SMOOTH",
"292 124 OFFCURVE",
"283 117 OFFCURVE",
"278 117 QCURVE SMOOTH",
"270 117 OFFCURVE",
"260 123 QCURVE SMOOTH",
"196 155 LINE SMOOTH",
"185 160 OFFCURVE",
"174 169 OFFCURVE",
"174 176 QCURVE SMOOTH",
"174 540 LINE SMOOTH",
"174 549 OFFCURVE",
"163 560 OFFCURVE",
"154 560 QCURVE SMOOTH",
"148 560 OFFCURVE",
"139 552 OFFCURVE",
"125 535 OFFCURVE",
"118 528 QCURVE SMOOTH",
"90 500 LINE SMOOTH",
"83 493 OFFCURVE",
"66 479 OFFCURVE",
"58 470 OFFCURVE",
"58 464 QCURVE SMOOTH",
"58 140 LINE SMOOTH",
"58 131 OFFCURVE",
"52 125 QCURVE SMOOTH",
"46 119 OFFCURVE",
"35 110 OFFCURVE",
"28 102 OFFCURVE",
"28 96 QCURVE SMOOTH",
"28 89 OFFCURVE",
"38 80 OFFCURVE",
"56 75 OFFCURVE",
"60 73 QCURVE SMOOTH",
"174 16 LINE SMOOTH",
"178 14 OFFCURVE",
"197 0 OFFCURVE",
"204 0 QCURVE SMOOTH",
"210 0 OFFCURVE",
"219 8 OFFCURVE",
"233 25 OFFCURVE",
"240 32 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
129 83 23 16 4 0 5 1 76 142 1 0 1 75 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
0 2 1 5 1 2 5 128 0 0 5 10 5 0 10 128 0 10 9 5 10 9 126 0 9 7 5 9 7 126 0 4 4 20 77 0 1 1 3 95 0 3 3 14 77 8 1 5 5 17 77 0 7 7 18 77 11 1 6 6 15 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 61 values pushed */
0 2 1 5 1 2 5 128 0 0 5 10 5 0 10 128 0 10 9 5 10 9 126 0 9 7 5 9 7 126 0 3 0 1 2 3 1 103 0 4 4 16 77 8 1 5 5 17 77 0 7 7 18 77 11 1 6 6 15 6 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 29 values pushed */
0 0 156 154 149 147 139 137 115 113 0 110 0 109 93 91 71 69 64 61 52 50 45 41 33 31 12 7 22 
CALL[ ]\011/* CallFunction */";
};
width = 638;
}
);
note = H;
unicode = 0048;
},
{
glyphname = I;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"402 -192 OFFCURVE",
"422 -182 OFFCURVE",
"426 -180 QCURVE SMOOTH",
"481 -153 OFFCURVE",
"574 -38 OFFCURVE",
"574 44 QCURVE SMOOTH",
"574 432 LINE SMOOTH",
"574 459 OFFCURVE",
"572 493 OFFCURVE",
"567 505 OFFCURVE",
"560 512 QCURVE SMOOTH",
"544 528 LINE SMOOTH",
"537 535 OFFCURVE",
"523 552 OFFCURVE",
"514 560 OFFCURVE",
"508 560 QCURVE SMOOTH",
"502 560 OFFCURVE",
"493 552 OFFCURVE",
"479 535 OFFCURVE",
"472 528 QCURVE SMOOTH",
"358 414 LINE SMOOTH",
"353 409 OFFCURVE",
"350 409 QCURVE SMOOTH",
"347 409 OFFCURVE",
"342 414 OFFCURVE",
"342 417 QCURVE SMOOTH",
"342 616 LINE SMOOTH",
"342 634 OFFCURVE",
"347 649 OFFCURVE",
"358 660 QCURVE SMOOTH",
"414 716 LINE SMOOTH",
"419 721 OFFCURVE",
"435 734 OFFCURVE",
"446 746 OFFCURVE",
"446 752 QCURVE SMOOTH",
"446 758 OFFCURVE",
"437 768 OFFCURVE",
"430 768 QCURVE SMOOTH",
"425 768 OFFCURVE",
"413 758 OFFCURVE",
"399 741 OFFCURVE",
"394 736 QCURVE SMOOTH",
"388 730 OFFCURVE",
"374 726 OFFCURVE",
"358 726 QCURVE SMOOTH",
"-62 726 LINE SMOOTH",
"-87 726 OFFCURVE",
"-114 712 OFFCURVE",
"-130 696 QCURVE SMOOTH",
"-198 628 LINE SMOOTH",
"-203 623 OFFCURVE",
"-219 610 OFFCURVE",
"-230 598 OFFCURVE",
"-230 592 QCURVE SMOOTH",
"-230 586 OFFCURVE",
"-221 576 OFFCURVE",
"-214 576 QCURVE SMOOTH",
"-209 576 OFFCURVE",
"-197 586 OFFCURVE",
"-183 603 OFFCURVE",
"-178 608 QCURVE SMOOTH",
"-172 614 OFFCURVE",
"-158 618 OFFCURVE",
"-142 618 QCURVE SMOOTH",
"262 618 LINE SMOOTH",
"272 618 OFFCURVE",
"277 619 QCURVE",
"250 592 LINE SMOOTH",
"236 578 OFFCURVE",
"226 554 OFFCURVE",
"226 540 QCURVE SMOOTH",
"226 240 LINE SMOOTH",
"226 219 OFFCURVE",
"224 196 OFFCURVE",
"224 192 QCURVE SMOOTH",
"224 186 OFFCURVE",
"233 176 OFFCURVE",
"240 176 QCURVE SMOOTH",
"247 176 OFFCURVE",
"268 194 OFFCURVE",
"272 196 QCURVE SMOOTH",
"296 208 LINE SMOOTH",
"303 212 OFFCURVE",
"314 215 OFFCURVE",
"318 217 QCURVE",
"331 221 OFFCURVE",
"344 229 OFFCURVE",
"344 236 QCURVE SMOOTH",
"344 240 OFFCURVE",
"342 263 OFFCURVE",
"342 284 QCURVE SMOOTH",
"342 345 LINE SMOOTH",
"342 354 OFFCURVE",
"347 363 OFFCURVE",
"356 372 QCURVE SMOOTH",
"428 444 LINE",
"428 444 OFFCURVE",
"444 428 QCURVE SMOOTH",
"450 422 LINE SMOOTH",
"458 414 OFFCURVE",
"458 400 QCURVE SMOOTH",
"458 32 LINE SMOOTH",
"458 -36 OFFCURVE",
"451 -104 OFFCURVE",
"425 -129 OFFCURVE",
"422 -132 QCURVE SMOOTH",
"410 -144 LINE SMOOTH",
"406 -148 OFFCURVE",
"387 -161 OFFCURVE",
"378 -170 OFFCURVE",
"378 -176 QCURVE SMOOTH",
"378 -182 OFFCURVE",
"387 -192 OFFCURVE",
"394 -192 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"58 144 LINE SMOOTH",
"58 131 OFFCURVE",
"48 121 QCURVE SMOOTH",
"46 119 OFFCURVE",
"28 106 OFFCURVE",
"28 96 QCURVE SMOOTH",
"28 88 OFFCURVE",
"43 79 OFFCURVE",
"59 73 QCURVE SMOOTH",
"80 64 LINE",
"148 30 LINE SMOOTH",
"159 24 OFFCURVE",
"171 16 QCURVE SMOOTH",
"175 14 OFFCURVE",
"198 0 OFFCURVE",
"204 0 QCURVE SMOOTH",
"210 0 OFFCURVE",
"221 10 OFFCURVE",
"235 27 OFFCURVE",
"240 32 QCURVE SMOOTH",
"308 100 LINE SMOOTH",
"313 105 OFFCURVE",
"329 118 OFFCURVE",
"340 130 OFFCURVE",
"340 136 QCURVE SMOOTH",
"340 142 OFFCURVE",
"331 152 OFFCURVE",
"324 152 QCURVE SMOOTH",
"315 152 OFFCURVE",
"302 134 OFFCURVE",
"300 132 QCURVE SMOOTH",
"296 128 LINE SMOOTH",
"291 123 OFFCURVE",
"282 116 OFFCURVE",
"276 116 QCURVE SMOOTH",
"272 116 OFFCURVE",
"260 121 OFFCURVE",
"248 128 QCURVE SMOOTH",
"188 158 LINE SMOOTH",
"179 162 OFFCURVE",
"174 168 OFFCURVE",
"174 176 QCURVE SMOOTH",
"174 496 LINE SMOOTH",
"174 517 OFFCURVE",
"176 540 OFFCURVE",
"176 544 QCURVE SMOOTH",
"176 550 OFFCURVE",
"167 560 OFFCURVE",
"160 560 QCURVE SMOOTH",
"153 560 OFFCURVE",
"132 542 OFFCURVE",
"128 540 QCURVE SMOOTH",
"104 528 LINE SMOOTH",
"95 524 OFFCURVE",
"71 517 OFFCURVE",
"56 508 OFFCURVE",
"56 500 QCURVE SMOOTH",
"56 496 OFFCURVE",
"58 473 OFFCURVE",
"58 452 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
87 1 0 5 1 76 131 1 0 1 75 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
0 2 1 5 1 2 5 128 0 0 5 9 5 0 9 128 0 9 8 5 9 8 126 0 8 10 5 8 10 126 0 4 4 20 77 0 1 1 3 95 0 3 3 14 77 7 1 5 5 17 77 0 10 10 18 77 11 1 6 6 15 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 61 values pushed */
0 2 1 5 1 2 5 128 0 0 5 9 5 0 9 128 0 9 8 5 9 8 126 0 8 10 5 8 10 126 0 3 0 1 2 3 1 103 0 4 4 16 77 7 1 5 5 17 77 0 10 10 18 77 11 1 6 6 15 6 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 29 values pushed */
0 0 158 156 145 144 139 137 125 123 0 113 0 112 98 96 76 74 69 66 57 55 50 46 36 34 12 7 22 
CALL[ ]\011/* CallFunction */";
};
width = 632;
}
);
note = I;
unicode = 0049;
},
{
glyphname = J;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"402 -192 OFFCURVE",
"422 -182 OFFCURVE",
"426 -180 QCURVE SMOOTH",
"481 -153 OFFCURVE",
"574 -38 OFFCURVE",
"574 44 QCURVE SMOOTH",
"574 432 LINE SMOOTH",
"574 459 OFFCURVE",
"572 493 OFFCURVE",
"567 505 OFFCURVE",
"560 512 QCURVE SMOOTH",
"544 528 LINE SMOOTH",
"537 535 OFFCURVE",
"523 552 OFFCURVE",
"514 560 OFFCURVE",
"508 560 QCURVE SMOOTH",
"502 560 OFFCURVE",
"493 552 OFFCURVE",
"479 535 OFFCURVE",
"472 528 QCURVE SMOOTH",
"358 414 LINE SMOOTH",
"353 409 OFFCURVE",
"350 409 QCURVE SMOOTH",
"347 409 OFFCURVE",
"342 414 OFFCURVE",
"342 417 QCURVE SMOOTH",
"342 480 LINE SMOOTH",
"342 555 OFFCURVE",
"373 675 OFFCURVE",
"414 716 QCURVE SMOOTH",
"419 721 OFFCURVE",
"435 734 OFFCURVE",
"446 746 OFFCURVE",
"446 752 QCURVE SMOOTH",
"446 758 OFFCURVE",
"437 768 OFFCURVE",
"430 768 QCURVE SMOOTH",
"424 768 OFFCURVE",
"413 758 OFFCURVE",
"399 741 OFFCURVE",
"394 736 QCURVE SMOOTH",
"388 730 OFFCURVE",
"374 726 OFFCURVE",
"358 726 QCURVE SMOOTH",
"-62 726 LINE SMOOTH",
"-87 726 OFFCURVE",
"-114 712 OFFCURVE",
"-130 696 QCURVE SMOOTH",
"-198 628 LINE SMOOTH",
"-203 623 OFFCURVE",
"-219 610 OFFCURVE",
"-230 598 OFFCURVE",
"-230 592 QCURVE SMOOTH",
"-230 586 OFFCURVE",
"-221 576 OFFCURVE",
"-214 576 QCURVE SMOOTH",
"-209 576 OFFCURVE",
"-197 586 OFFCURVE",
"-183 603 OFFCURVE",
"-178 608 QCURVE SMOOTH",
"-172 614 OFFCURVE",
"-158 618 OFFCURVE",
"-142 618 QCURVE SMOOTH",
"262 618 LINE SMOOTH",
"275 618 OFFCURVE",
"287 622 QCURVE",
"252 574 OFFCURVE",
"226 470 OFFCURVE",
"226 400 QCURVE SMOOTH",
"226 240 LINE SMOOTH",
"226 219 OFFCURVE",
"224 196 OFFCURVE",
"224 192 QCURVE SMOOTH",
"224 186 OFFCURVE",
"233 176 OFFCURVE",
"240 176 QCURVE SMOOTH",
"247 176 OFFCURVE",
"268 194 OFFCURVE",
"272 196 QCURVE SMOOTH",
"296 208 LINE SMOOTH",
"303 212 OFFCURVE",
"314 215 OFFCURVE",
"318 217 QCURVE",
"331 221 OFFCURVE",
"344 229 OFFCURVE",
"344 236 QCURVE SMOOTH",
"344 240 OFFCURVE",
"342 263 OFFCURVE",
"342 284 QCURVE SMOOTH",
"342 345 LINE SMOOTH",
"342 354 OFFCURVE",
"347 363 OFFCURVE",
"356 372 QCURVE SMOOTH",
"428 444 LINE",
"428 444 OFFCURVE",
"444 428 QCURVE SMOOTH",
"450 422 LINE SMOOTH",
"458 414 OFFCURVE",
"458 400 QCURVE SMOOTH",
"458 32 LINE SMOOTH",
"458 -36 OFFCURVE",
"451 -104 OFFCURVE",
"425 -129 OFFCURVE",
"422 -132 QCURVE SMOOTH",
"410 -144 LINE SMOOTH",
"406 -148 OFFCURVE",
"387 -161 OFFCURVE",
"378 -170 OFFCURVE",
"378 -176 QCURVE SMOOTH",
"378 -182 OFFCURVE",
"387 -192 OFFCURVE",
"394 -192 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"58 144 LINE SMOOTH",
"58 131 OFFCURVE",
"48 121 QCURVE SMOOTH",
"46 119 OFFCURVE",
"28 106 OFFCURVE",
"28 96 QCURVE SMOOTH",
"28 88 OFFCURVE",
"43 79 OFFCURVE",
"59 73 QCURVE SMOOTH",
"80 64 LINE",
"148 30 LINE SMOOTH",
"159 24 OFFCURVE",
"171 16 QCURVE SMOOTH",
"175 14 OFFCURVE",
"198 0 OFFCURVE",
"204 0 QCURVE SMOOTH",
"210 0 OFFCURVE",
"221 10 OFFCURVE",
"235 27 OFFCURVE",
"240 32 QCURVE SMOOTH",
"308 100 LINE SMOOTH",
"313 105 OFFCURVE",
"329 118 OFFCURVE",
"340 130 OFFCURVE",
"340 136 QCURVE SMOOTH",
"340 142 OFFCURVE",
"331 152 OFFCURVE",
"324 152 QCURVE SMOOTH",
"315 152 OFFCURVE",
"302 134 OFFCURVE",
"300 132 QCURVE SMOOTH",
"296 128 LINE SMOOTH",
"291 123 OFFCURVE",
"282 116 OFFCURVE",
"276 116 QCURVE SMOOTH",
"272 116 OFFCURVE",
"260 121 OFFCURVE",
"248 128 QCURVE SMOOTH",
"188 158 LINE SMOOTH",
"179 162 OFFCURVE",
"174 168 OFFCURVE",
"174 176 QCURVE SMOOTH",
"174 496 LINE SMOOTH",
"174 517 OFFCURVE",
"176 540 OFFCURVE",
"176 544 QCURVE SMOOTH",
"176 550 OFFCURVE",
"167 560 OFFCURVE",
"160 560 QCURVE SMOOTH",
"153 560 OFFCURVE",
"132 542 OFFCURVE",
"128 540 QCURVE SMOOTH",
"104 528 LINE SMOOTH",
"95 524 OFFCURVE",
"71 517 OFFCURVE",
"56 508 OFFCURVE",
"56 500 QCURVE SMOOTH",
"56 496 OFFCURVE",
"58 473 OFFCURVE",
"58 452 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
45 1 1 3 85 1 0 5 2 76 129 1 0 1 75 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
0 2 1 5 1 2 5 128 0 0 5 9 5 0 9 128 0 9 8 5 9 8 126 0 8 10 5 8 10 126 0 4 4 20 77 0 1 1 3 95 0 3 3 14 77 7 1 5 5 17 77 0 10 10 18 77 11 1 6 6 15 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 61 values pushed */
0 2 1 5 1 2 5 128 0 0 5 9 5 0 9 128 0 9 8 5 9 8 126 0 8 10 5 8 10 126 0 3 0 1 2 3 1 103 0 4 4 16 77 7 1 5 5 17 77 0 10 10 18 77 11 1 6 6 15 6 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 29 values pushed */
0 0 156 154 143 142 137 135 123 121 0 111 0 110 96 94 75 73 68 65 56 54 49 46 36 34 12 7 22 
CALL[ ]\011/* CallFunction */";
};
width = 632;
}
);
note = J;
unicode = 004A;
},
{
glyphname = K;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"-99 576 OFFCURVE",
"-91 582 OFFCURVE",
"-81 595 OFFCURVE",
"-76 600 QCURVE SMOOTH",
"-64 612 OFFCURVE",
"-53 618 OFFCURVE",
"-44 618 QCURVE SMOOTH",
"160 618 LINE SMOOTH",
"178 618 OFFCURVE",
"200 628 OFFCURVE",
"212 640 QCURVE SMOOTH",
"296 724 LINE SMOOTH",
"301 729 OFFCURVE",
"314 738 OFFCURVE",
"320 746 OFFCURVE",
"320 752 QCURVE SMOOTH",
"320 759 OFFCURVE",
"311 768 OFFCURVE",
"304 768 QCURVE SMOOTH",
"298 768 OFFCURVE",
"290 762 OFFCURVE",
"281 749 OFFCURVE",
"276 744 QCURVE SMOOTH",
"264 732 OFFCURVE",
"253 726 OFFCURVE",
"244 726 QCURVE SMOOTH",
"40 726 LINE SMOOTH",
"22 726 OFFCURVE",
"0 716 OFFCURVE",
"-12 704 QCURVE SMOOTH",
"-96 620 LINE SMOOTH",
"-101 615 OFFCURVE",
"-112 607 OFFCURVE",
"-120 598 OFFCURVE",
"-120 592 QCURVE SMOOTH",
"-120 585 OFFCURVE",
"-111 576 OFFCURVE",
"-104 576 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"582 0 OFFCURVE",
"590 6 OFFCURVE",
"599 19 OFFCURVE",
"604 24 QCURVE SMOOTH",
"688 108 LINE SMOOTH",
"693 113 OFFCURVE",
"706 122 OFFCURVE",
"712 130 OFFCURVE",
"712 136 QCURVE SMOOTH",
"712 143 OFFCURVE",
"703 152 OFFCURVE",
"696 152 QCURVE SMOOTH",
"690 152 OFFCURVE",
"682 146 OFFCURVE",
"673 133 OFFCURVE",
"668 128 QCURVE SMOOTH",
"663 123 OFFCURVE",
"656 123 QCURVE SMOOTH",
"652 123 OFFCURVE",
"645 126 OFFCURVE",
"644 128 QCURVE SMOOTH",
"476 476 LINE",
"470 487 LINE",
"704 721 LINE SMOOTH",
"709 726 OFFCURVE",
"720 734 OFFCURVE",
"728 743 OFFCURVE",
"728 748 QCURVE SMOOTH",
"728 749 LINE SMOOTH",
"728 756 OFFCURVE",
"719 765 OFFCURVE",
"712 765 QCURVE SMOOTH",
"706 765 OFFCURVE",
"698 759 OFFCURVE",
"689 746 OFFCURVE",
"685 742 QCURVE SMOOTH",
"684 741 LINE SMOOTH",
"672 729 OFFCURVE",
"661 723 OFFCURVE",
"652 723 QCURVE SMOOTH",
"496 723 LINE SMOOTH",
"478 723 OFFCURVE",
"456 713 OFFCURVE",
"444 701 QCURVE SMOOTH",
"360 617 LINE SMOOTH",
"356 613 OFFCURVE",
"348 607 QCURVE",
"348 672 LINE SMOOTH",
"348 689 OFFCURVE",
"360 710 OFFCURVE",
"374 724 QCURVE SMOOTH",
"379 729 OFFCURVE",
"392 738 OFFCURVE",
"398 746 OFFCURVE",
"398 752 QCURVE SMOOTH",
"398 759 OFFCURVE",
"389 768 OFFCURVE",
"382 768 QCURVE SMOOTH",
"376 768 OFFCURVE",
"368 762 OFFCURVE",
"359 749 OFFCURVE",
"354 744 QCURVE SMOOTH",
"80 470 LINE SMOOTH",
"68 458 OFFCURVE",
"58 436 OFFCURVE",
"58 418 QCURVE SMOOTH",
"58 96 LINE SMOOTH",
"58 79 OFFCURVE",
"46 58 OFFCURVE",
"32 44 QCURVE SMOOTH",
"27 39 OFFCURVE",
"14 30 OFFCURVE",
"8 22 OFFCURVE",
"8 16 QCURVE SMOOTH",
"8 9 OFFCURVE",
"17 0 OFFCURVE",
"24 0 QCURVE SMOOTH",
"30 0 OFFCURVE",
"38 6 OFFCURVE",
"47 19 OFFCURVE",
"52 24 QCURVE SMOOTH",
"152 124 LINE SMOOTH",
"164 136 OFFCURVE",
"174 158 OFFCURVE",
"174 176 QCURVE SMOOTH",
"174 498 LINE SMOOTH",
"174 515 OFFCURVE",
"186 536 OFFCURVE",
"200 550 QCURVE SMOOTH",
"232 582 LINE",
"232 140 LINE SMOOTH",
"232 123 OFFCURVE",
"220 102 OFFCURVE",
"206 88 QCURVE SMOOTH",
"162 44 LINE SMOOTH",
"157 39 OFFCURVE",
"144 30 OFFCURVE",
"138 22 OFFCURVE",
"138 16 QCURVE SMOOTH",
"138 9 OFFCURVE",
"147 0 OFFCURVE",
"154 0 QCURVE SMOOTH",
"160 0 OFFCURVE",
"168 6 OFFCURVE",
"177 19 OFFCURVE",
"182 24 QCURVE SMOOTH",
"326 168 LINE SMOOTH",
"338 180 OFFCURVE",
"348 202 OFFCURVE",
"348 220 QCURVE SMOOTH",
"348 573 LINE",
"352 573 LINE SMOOTH",
"357 573 OFFCURVE",
"365 579 OFFCURVE",
"375 592 OFFCURVE",
"380 597 QCURVE SMOOTH",
"392 609 OFFCURVE",
"403 615 OFFCURVE",
"412 615 QCURVE SMOOTH",
"558 615 LINE",
"442 499 LINE",
"437 497 OFFCURVE",
"428 486 OFFCURVE",
"426 483 QCURVE",
"369 426 LINE SMOOTH",
"368 425 OFFCURVE",
"359 418 OFFCURVE",
"352 410 OFFCURVE",
"352 404 QCURVE SMOOTH",
"352 397 OFFCURVE",
"373 382 OFFCURVE",
"376 376 QCURVE SMOOTH",
"548 24 LINE SMOOTH",
"559 0 OFFCURVE",
"576 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
125 82 2 3 2 149 1 12 3 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
5 14 2 3 2 12 2 3 12 128 0 12 11 2 12 11 126 0 11 6 2 11 6 126 10 8 2 1 1 20 77 4 1 2 2 0 95 9 1 0 0 14 77 15 13 7 3 6 6 18 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
5 14 2 3 2 12 2 3 12 128 0 12 11 2 12 11 126 0 11 6 2 11 6 126 9 1 0 4 1 2 3 0 2 103 10 8 2 1 1 16 77 15 13 7 3 6 6 18 6 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 36 values pushed */
38 38 0 0 38 172 38 171 161 159 155 153 141 139 133 130 115 113 96 94 71 69 61 59 54 52 0 37 0 36 57 37 57 16 7 25 
CALL[ ]\011/* CallFunction */";
};
width = 522;
}
);
note = K;
unicode = 004B;
},
{
glyphname = L;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"488 0 LINE SMOOTH",
"506 0 OFFCURVE",
"528 10 OFFCURVE",
"540 22 QCURVE SMOOTH",
"624 106 LINE SMOOTH",
"629 111 OFFCURVE",
"640 119 OFFCURVE",
"648 128 OFFCURVE",
"648 134 QCURVE SMOOTH",
"648 141 OFFCURVE",
"639 150 OFFCURVE",
"632 150 QCURVE SMOOTH",
"627 150 OFFCURVE",
"619 144 OFFCURVE",
"609 131 OFFCURVE",
"604 126 QCURVE SMOOTH",
"592 114 OFFCURVE",
"581 108 OFFCURVE",
"572 108 QCURVE SMOOTH",
"224 108 LINE",
"326 210 LINE SMOOTH",
"338 222 OFFCURVE",
"348 244 OFFCURVE",
"348 262 QCURVE SMOOTH",
"348 748 LINE SMOOTH",
"348 757 OFFCURVE",
"337 768 OFFCURVE",
"328 768 QCURVE SMOOTH",
"323 768 OFFCURVE",
"315 762 OFFCURVE",
"305 749 OFFCURVE",
"300 744 QCURVE SMOOTH",
"80 524 LINE SMOOTH",
"68 512 OFFCURVE",
"58 490 OFFCURVE",
"58 472 QCURVE SMOOTH",
"58 120 LINE SMOOTH",
"58 103 OFFCURVE",
"46 82 OFFCURVE",
"32 68 QCURVE SMOOTH",
"8 44 LINE SMOOTH",
"3 39 OFFCURVE",
"-10 30 OFFCURVE",
"-16 22 OFFCURVE",
"-16 16 QCURVE SMOOTH",
"-16 9 OFFCURVE",
"-7 0 OFFCURVE",
"0 0 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"112 108 LINE",
"152 148 LINE SMOOTH",
"164 160 OFFCURVE",
"174 182 OFFCURVE",
"174 200 QCURVE SMOOTH",
"174 552 LINE SMOOTH",
"174 569 OFFCURVE",
"186 590 OFFCURVE",
"200 604 QCURVE SMOOTH",
"222 626 LINE SMOOTH",
"226 630 OFFCURVE",
"228 630 QCURVE SMOOTH",
"232 630 OFFCURVE",
"232 626 QCURVE SMOOTH",
"232 182 LINE SMOOTH",
"232 165 OFFCURVE",
"220 144 OFFCURVE",
"206 130 QCURVE SMOOTH",
"184 108 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
53 1 2 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 0 1 0 2 1 128 0 0 0 20 77 5 4 2 1 1 3 96 0 3 3 18 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 26 values pushed */
0 2 0 1 0 2 1 128 0 0 0 16 77 5 4 2 1 1 3 96 0 3 3 18 3 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 17 values pushed */
48 48 48 66 48 66 47 45 36 34 29 27 20 18 6 7 22 
CALL[ ]\011/* CallFunction */";
};
width = 696;
}
);
note = L;
unicode = 004C;
},
{
glyphname = M;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
width = 1694;
}
);
note = M;
unicode = 004D;
},
{
glyphname = N;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
width = 696;
}
);
note = N;
unicode = 004E;
},
{
glyphname = O;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"348 748 LINE SMOOTH",
"348 757 OFFCURVE",
"337 768 OFFCURVE",
"328 768 QCURVE SMOOTH",
"323 768 OFFCURVE",
"315 762 OFFCURVE",
"305 749 OFFCURVE",
"300 744 QCURVE SMOOTH",
"80 524 LINE SMOOTH",
"68 512 OFFCURVE",
"58 490 OFFCURVE",
"58 472 QCURVE SMOOTH",
"58 200 LINE SMOOTH",
"58 182 OFFCURVE",
"68 160 OFFCURVE",
"80 148 QCURVE SMOOTH",
"207 21 LINE SMOOTH",
"219 9 OFFCURVE",
"242 0 OFFCURVE",
"260 0 QCURVE SMOOTH",
"368 0 LINE SMOOTH",
"386 0 OFFCURVE",
"408 10 OFFCURVE",
"420 22 QCURVE SMOOTH",
"616 218 LINE SMOOTH",
"628 230 OFFCURVE",
"638 252 OFFCURVE",
"638 270 QCURVE SMOOTH",
"638 618 LINE SMOOTH",
"638 636 OFFCURVE",
"628 658 OFFCURVE",
"616 670 QCURVE SMOOTH",
"550 736 LINE SMOOTH",
"543 743 OFFCURVE",
"529 760 OFFCURVE",
"520 768 OFFCURVE",
"514 768 QCURVE SMOOTH",
"508 768 OFFCURVE",
"499 760 OFFCURVE",
"485 743 OFFCURVE",
"478 736 QCURVE SMOOTH",
"358 616 LINE SMOOTH",
"354 612 OFFCURVE",
"352 612 QCURVE SMOOTH",
"348 612 OFFCURVE",
"348 616 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"348 556 LINE SMOOTH",
"348 562 OFFCURVE",
"352 570 OFFCURVE",
"358 576 QCURVE SMOOTH",
"427 645 LINE SMOOTH",
"430 648 OFFCURVE",
"434 648 QCURVE SMOOTH",
"438 648 OFFCURVE",
"441 645 QCURVE SMOOTH",
"503 583 LINE SMOOTH",
"512 574 OFFCURVE",
"522 556 OFFCURVE",
"522 542 QCURVE SMOOTH",
"522 190 LINE SMOOTH",
"522 173 OFFCURVE",
"510 152 OFFCURVE",
"496 138 QCURVE SMOOTH",
"484 126 LINE SMOOTH",
"472 114 OFFCURVE",
"461 108 OFFCURVE",
"452 108 QCURVE SMOOTH",
"356 108 LINE SMOOTH",
"337 108 OFFCURVE",
"313 115 OFFCURVE",
"301 127 QCURVE SMOOTH",
"223 205 LINE",
"326 308 LINE SMOOTH",
"338 320 OFFCURVE",
"348 342 OFFCURVE",
"348 360 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"203 225 LINE",
"200 228 LINE SMOOTH",
"186 242 OFFCURVE",
"174 263 OFFCURVE",
"174 280 QCURVE SMOOTH",
"174 552 LINE SMOOTH",
"174 569 OFFCURVE",
"186 590 OFFCURVE",
"200 604 QCURVE SMOOTH",
"222 626 LINE SMOOTH",
"226 630 OFFCURVE",
"228 630 QCURVE SMOOTH",
"232 630 OFFCURVE",
"232 626 QCURVE SMOOTH",
"232 280 LINE SMOOTH",
"232 263 OFFCURVE",
"220 242 OFFCURVE",
"206 228 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
92 80 68 49 45 5 3 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
2 1 0 0 20 77 0 3 3 1 96 0 1 1 18 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 17 values pushed */
2 1 0 0 16 77 0 3 3 1 96 0 1 1 18 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
58 46 62 39 4 7 26 
CALL[ ]\011/* CallFunction */";
};
width = 696;
}
);
note = O;
unicode = 004F;
},
{
glyphname = P;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"384 196 LINE SMOOTH",
"384 187 OFFCURVE",
"395 176 OFFCURVE",
"404 176 QCURVE SMOOTH",
"410 176 OFFCURVE",
"419 184 OFFCURVE",
"433 201 OFFCURVE",
"440 208 QCURVE SMOOTH",
"468 236 LINE SMOOTH",
"475 243 OFFCURVE",
"492 257 OFFCURVE",
"500 266 OFFCURVE",
"500 272 QCURVE SMOOTH",
"500 304 LINE SMOOTH",
"500 309 OFFCURVE",
"502 316 OFFCURVE",
"506 320 QCURVE SMOOTH",
"710 524 LINE SMOOTH",
"722 536 OFFCURVE",
"732 558 OFFCURVE",
"732 576 QCURVE SMOOTH",
"732 594 OFFCURVE",
"722 616 OFFCURVE",
"710 628 QCURVE SMOOTH",
"644 694 LINE SMOOTH",
"637 701 OFFCURVE",
"623 718 OFFCURVE",
"614 726 OFFCURVE",
"608 726 QCURVE SMOOTH",
"160 726 LINE SMOOTH",
"142 726 OFFCURVE",
"120 716 OFFCURVE",
"108 704 QCURVE SMOOTH",
"24 620 LINE SMOOTH",
"19 615 OFFCURVE",
"8 607 OFFCURVE",
"0 598 OFFCURVE",
"0 592 QCURVE SMOOTH",
"0 585 OFFCURVE",
"9 576 OFFCURVE",
"16 576 QCURVE SMOOTH",
"21 576 OFFCURVE",
"29 582 OFFCURVE",
"39 595 OFFCURVE",
"44 600 QCURVE SMOOTH",
"56 612 OFFCURVE",
"67 618 OFFCURVE",
"76 618 QCURVE SMOOTH",
"408 618 LINE SMOOTH",
"411 618 OFFCURVE",
"411 615 QCURVE SMOOTH",
"411 613 OFFCURVE",
"408 610 QCURVE SMOOTH",
"403 605 OFFCURVE",
"392 596 OFFCURVE",
"384 587 OFFCURVE",
"384 582 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"508 414 LINE SMOOTH",
"500 414 OFFCURVE",
"500 422 QCURVE SMOOTH",
"500 610 LINE SMOOTH",
"500 618 OFFCURVE",
"508 618 QCURVE SMOOTH",
"516 618 LINE SMOOTH",
"520 618 OFFCURVE",
"523 615 QCURVE SMOOTH",
"597 541 LINE SMOOTH",
"606 532 OFFCURVE",
"616 514 OFFCURVE",
"616 500 QCURVE SMOOTH",
"616 496 LINE SMOOTH",
"616 479 OFFCURVE",
"604 458 OFFCURVE",
"590 444 QCURVE SMOOTH",
"578 432 LINE SMOOTH",
"566 420 OFFCURVE",
"555 414 OFFCURVE",
"546 414 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"468 108 LINE SMOOTH",
"473 113 OFFCURVE",
"484 121 OFFCURVE",
"492 130 OFFCURVE",
"492 136 QCURVE SMOOTH",
"492 143 OFFCURVE",
"483 152 OFFCURVE",
"476 152 QCURVE SMOOTH",
"471 152 OFFCURVE",
"463 146 OFFCURVE",
"453 133 OFFCURVE",
"448 128 QCURVE SMOOTH",
"444 124 OFFCURVE",
"435 117 OFFCURVE",
"430 117 QCURVE SMOOTH",
"422 117 OFFCURVE",
"412 123 QCURVE SMOOTH",
"348 155 LINE SMOOTH",
"337 160 OFFCURVE",
"326 169 OFFCURVE",
"326 176 QCURVE SMOOTH",
"326 540 LINE SMOOTH",
"326 549 OFFCURVE",
"315 560 OFFCURVE",
"306 560 QCURVE SMOOTH",
"300 560 OFFCURVE",
"291 552 OFFCURVE",
"277 535 OFFCURVE",
"270 528 QCURVE SMOOTH",
"242 500 LINE SMOOTH",
"235 493 OFFCURVE",
"218 479 OFFCURVE",
"210 470 OFFCURVE",
"210 464 QCURVE SMOOTH",
"210 140 LINE SMOOTH",
"210 131 OFFCURVE",
"204 125 QCURVE SMOOTH",
"198 119 OFFCURVE",
"187 110 OFFCURVE",
"180 102 OFFCURVE",
"180 96 QCURVE SMOOTH",
"180 89 OFFCURVE",
"190 80 OFFCURVE",
"208 75 OFFCURVE",
"212 73 QCURVE SMOOTH",
"326 16 LINE SMOOTH",
"330 14 OFFCURVE",
"349 0 OFFCURVE",
"356 0 QCURVE SMOOTH",
"362 0 OFFCURVE",
"371 8 OFFCURVE",
"385 25 OFFCURVE",
"392 32 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
56 1 1 0 96 74 2 5 7 43 1 3 5 3 76 109 1 3 1 75 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
0 1 0 7 0 1 7 128 10 1 5 7 3 7 5 3 128 0 3 9 7 3 9 126 0 9 8 7 9 8 126 0 8 6 7 8 6 126 4 1 0 0 2 95 0 2 2 14 77 0 7 7 17 77 0 6 6 18 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
0 1 0 7 0 1 7 128 10 1 5 7 3 7 5 3 128 0 3 9 7 3 9 126 0 9 8 7 9 8 126 0 8 6 7 8 6 126 0 2 4 1 0 1 2 0 105 0 7 7 17 77 0 6 6 18 6 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 24 values pushed */
57 57 123 121 116 114 106 104 82 80 57 77 57 76 72 70 53 51 41 37 54 11 7 25 
CALL[ ]\011/* CallFunction */";
};
width = 814;
}
);
note = P;
unicode = 0050;
},
{
glyphname = Q;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"348 748 LINE SMOOTH",
"348 757 OFFCURVE",
"337 768 OFFCURVE",
"328 768 QCURVE SMOOTH",
"323 768 OFFCURVE",
"315 762 OFFCURVE",
"305 749 OFFCURVE",
"300 744 QCURVE SMOOTH",
"80 524 LINE SMOOTH",
"68 512 OFFCURVE",
"58 490 OFFCURVE",
"58 472 QCURVE SMOOTH",
"58 200 LINE SMOOTH",
"58 182 OFFCURVE",
"68 160 OFFCURVE",
"80 148 QCURVE SMOOTH",
"207 21 LINE SMOOTH",
"219 9 OFFCURVE",
"242 0 OFFCURVE",
"260 0 QCURVE SMOOTH",
"368 0 LINE SMOOTH",
"386 0 OFFCURVE",
"408 10 OFFCURVE",
"420 22 QCURVE SMOOTH",
"616 218 LINE SMOOTH",
"628 230 OFFCURVE",
"638 252 OFFCURVE",
"638 270 QCURVE SMOOTH",
"638 618 LINE SMOOTH",
"638 636 OFFCURVE",
"628 658 OFFCURVE",
"616 670 QCURVE SMOOTH",
"550 736 LINE SMOOTH",
"543 743 OFFCURVE",
"529 760 OFFCURVE",
"520 768 OFFCURVE",
"514 768 QCURVE SMOOTH",
"508 768 OFFCURVE",
"499 760 OFFCURVE",
"485 743 OFFCURVE",
"478 736 QCURVE SMOOTH",
"358 616 LINE SMOOTH",
"354 612 OFFCURVE",
"352 612 QCURVE SMOOTH",
"348 612 OFFCURVE",
"348 616 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"348 556 LINE SMOOTH",
"348 562 OFFCURVE",
"352 570 OFFCURVE",
"358 576 QCURVE SMOOTH",
"427 645 LINE SMOOTH",
"430 648 OFFCURVE",
"434 648 QCURVE SMOOTH",
"438 648 OFFCURVE",
"441 645 QCURVE SMOOTH",
"503 583 LINE SMOOTH",
"512 574 OFFCURVE",
"522 556 OFFCURVE",
"522 542 QCURVE SMOOTH",
"522 190 LINE SMOOTH",
"522 173 OFFCURVE",
"510 152 OFFCURVE",
"496 138 QCURVE SMOOTH",
"484 126 LINE SMOOTH",
"472 114 OFFCURVE",
"461 108 OFFCURVE",
"452 108 QCURVE SMOOTH",
"356 108 LINE SMOOTH",
"337 108 OFFCURVE",
"313 115 OFFCURVE",
"301 127 QCURVE SMOOTH",
"223 205 LINE",
"326 308 LINE SMOOTH",
"338 320 OFFCURVE",
"348 342 OFFCURVE",
"348 360 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"203 225 LINE",
"200 228 LINE SMOOTH",
"186 242 OFFCURVE",
"174 263 OFFCURVE",
"174 280 QCURVE SMOOTH",
"174 552 LINE SMOOTH",
"174 569 OFFCURVE",
"186 590 OFFCURVE",
"200 604 QCURVE SMOOTH",
"222 626 LINE SMOOTH",
"226 630 OFFCURVE",
"228 630 QCURVE SMOOTH",
"232 630 OFFCURVE",
"232 626 QCURVE SMOOTH",
"232 280 LINE SMOOTH",
"232 263 OFFCURVE",
"220 242 OFFCURVE",
"206 228 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
92 80 68 49 45 5 3 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
2 1 0 0 20 77 0 3 3 1 96 0 1 1 18 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 17 values pushed */
2 1 0 0 16 77 0 3 3 1 96 0 1 1 18 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
58 46 62 39 4 7 26 
CALL[ ]\011/* CallFunction */";
};
width = 696;
}
);
note = Q;
unicode = 0051;
},
{
glyphname = R;
lastChange = "2019-07-10 02:29:37 +0000";
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"605 -208 OFFCURVE",
"613 -202 OFFCURVE",
"622 -189 OFFCURVE",
"627 -184 QCURVE SMOOTH",
"711 -100 LINE SMOOTH",
"716 -95 OFFCURVE",
"729 -86 OFFCURVE",
"735 -78 OFFCURVE",
"735 -72 QCURVE SMOOTH",
"735 -65 OFFCURVE",
"726 -56 OFFCURVE",
"719 -56 QCURVE SMOOTH",
"713 -56 OFFCURVE",
"705 -62 OFFCURVE",
"696 -75 OFFCURVE",
"691 -80 QCURVE SMOOTH",
"686 -85 OFFCURVE",
"679 -85 QCURVE SMOOTH",
"669 -85 OFFCURVE",
"663 -72 QCURVE SMOOTH",
"461 381 LINE",
"558 478 LINE SMOOTH",
"570 490 OFFCURVE",
"580 512 OFFCURVE",
"580 530 QCURVE SMOOTH",
"580 576 LINE SMOOTH",
"580 594 OFFCURVE",
"570 616 OFFCURVE",
"558 628 QCURVE SMOOTH",
"492 694 LINE SMOOTH",
"485 701 OFFCURVE",
"471 718 OFFCURVE",
"462 726 OFFCURVE",
"456 726 QCURVE SMOOTH",
"-402 726 LINE SMOOTH",
"-420 726 OFFCURVE",
"-442 716 OFFCURVE",
"-454 704 QCURVE SMOOTH",
"-538 620 LINE SMOOTH",
"-543 615 OFFCURVE",
"-554 607 OFFCURVE",
"-562 598 OFFCURVE",
"-562 592 QCURVE SMOOTH",
"-562 585 OFFCURVE",
"-553 576 OFFCURVE",
"-546 576 QCURVE SMOOTH",
"-541 576 OFFCURVE",
"-533 582 OFFCURVE",
"-523 595 OFFCURVE",
"-518 600 QCURVE SMOOTH",
"-506 612 OFFCURVE",
"-495 618 OFFCURVE",
"-486 618 QCURVE SMOOTH",
"45 618 LINE SMOOTH",
"127 617 OFFCURVE",
"209 574 OFFCURVE",
"232 510 OFFCURVE",
"232 464 QCURVE SMOOTH",
"232 196 LINE SMOOTH",
"232 187 OFFCURVE",
"243 176 OFFCURVE",
"252 176 QCURVE SMOOTH",
"258 176 OFFCURVE",
"267 184 OFFCURVE",
"281 201 OFFCURVE",
"288 208 QCURVE SMOOTH",
"346 266 LINE SMOOTH",
"351 271 OFFCURVE",
"358 271 QCURVE SMOOTH",
"369 271 OFFCURVE",
"374 258 QCURVE SMOOTH",
"571 -184 LINE SMOOTH",
"575 -194 OFFCURVE",
"590 -208 OFFCURVE",
"599 -208 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"348 618 LINE",
"364 618 LINE SMOOTH",
"368 618 OFFCURVE",
"371 615 QCURVE SMOOTH",
"445 541 LINE SMOOTH",
"454 532 OFFCURVE",
"464 514 OFFCURVE",
"464 500 QCURVE SMOOTH",
"464 450 LINE SMOOTH",
"464 433 OFFCURVE",
"452 412 OFFCURVE",
"438 398 QCURVE SMOOTH",
"348 308 LINE"
);
},
{
closed = 1;
nodes = (
"-412 500 OFFCURVE",
"-379 467 OFFCURVE",
"-355 467 QCURVE SMOOTH",
"-341 467 OFFCURVE",
"-317 475 OFFCURVE",
"-300 484 QCURVE SMOOTH",
"-272 499 OFFCURVE",
"-215 516 OFFCURVE",
"-170 516 QCURVE SMOOTH",
"-101 516 OFFCURVE",
"-25 496 OFFCURVE",
"5 480 QCURVE SMOOTH",
"7 479 OFFCURVE",
"33 467 OFFCURVE",
"45 467 QCURVE SMOOTH",
"70 467 OFFCURVE",
"103 500 OFFCURVE",
"103 525 QCURVE SMOOTH",
"103 548 OFFCURVE",
"71 581 OFFCURVE",
"47 581 QCURVE SMOOTH",
"34 581 OFFCURVE",
"8 569 OFFCURVE",
"6 568 QCURVE SMOOTH",
"-24 552 OFFCURVE",
"-97 533 OFFCURVE",
"-164 533 QCURVE SMOOTH",
"-211 533 OFFCURVE",
"-267 549 OFFCURVE",
"-299 564 QCURVE SMOOTH",
"-319 573 OFFCURVE",
"-340 581 OFFCURVE",
"-353 581 QCURVE SMOOTH",
"-378 581 OFFCURVE",
"-412 549 OFFCURVE",
"-412 525 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"316 -12 LINE SMOOTH",
"321 -7 OFFCURVE",
"332 1 OFFCURVE",
"340 10 OFFCURVE",
"340 16 QCURVE SMOOTH",
"340 23 OFFCURVE",
"331 32 OFFCURVE",
"324 32 QCURVE SMOOTH",
"319 32 OFFCURVE",
"311 26 OFFCURVE",
"301 13 OFFCURVE",
"296 8 QCURVE SMOOTH",
"292 4 OFFCURVE",
"283 -3 OFFCURVE",
"278 -3 QCURVE SMOOTH",
"270 -3 OFFCURVE",
"260 3 QCURVE SMOOTH",
"196 35 LINE SMOOTH",
"185 40 OFFCURVE",
"174 49 OFFCURVE",
"174 56 QCURVE SMOOTH",
"174 480 LINE SMOOTH",
"174 489 OFFCURVE",
"163 500 OFFCURVE",
"154 500 QCURVE SMOOTH",
"148 500 OFFCURVE",
"139 492 OFFCURVE",
"125 475 OFFCURVE",
"118 468 QCURVE SMOOTH",
"90 440 LINE SMOOTH",
"83 433 OFFCURVE",
"66 419 OFFCURVE",
"58 410 OFFCURVE",
"58 404 QCURVE SMOOTH",
"58 20 LINE SMOOTH",
"58 11 OFFCURVE",
"52 5 QCURVE SMOOTH",
"46 -1 OFFCURVE",
"35 -10 OFFCURVE",
"28 -18 OFFCURVE",
"28 -24 QCURVE SMOOTH",
"28 -31 OFFCURVE",
"38 -40 OFFCURVE",
"56 -45 OFFCURVE",
"60 -47 QCURVE SMOOTH",
"174 -104 LINE SMOOTH",
"178 -106 OFFCURVE",
"197 -120 OFFCURVE",
"204 -120 QCURVE SMOOTH",
"210 -120 OFFCURVE",
"219 -112 OFFCURVE",
"233 -95 OFFCURVE",
"240 -88 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
142 75 53 3 0 12 155 1 18 1 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 104 values pushed */
0 3 9 10 9 3 10 128 0 16 13 12 13 16 12 128 0 0 12 1 12 0 1 128 0 1 18 12 1 18 126 0 18 17 12 18 17 126 0 17 6 12 17 6 126 0 6 5 12 6 5 126 0 5 15 12 5 15 126 0 15 7 12 15 7 126 0 10 0 13 16 10 13 105 8 1 2 2 4 95 0 4 4 14 77 14 1 12 12 9 97 11 1 9 9 17 77 19 1 7 7 15 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
24 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 102 values pushed */
0 3 9 10 9 3 10 128 0 16 13 12 13 16 12 128 0 0 12 1 12 0 1 128 0 1 18 12 1 18 126 0 18 17 12 18 17 126 0 17 6 12 17 6 126 0 6 5 12 6 5 126 0 5 15 12 5 15 126 0 15 7 12 15 7 126 0 4 8 1 2 9 4 2 103 0 10 0 13 16 10 13 105 14 1 12 12 9 97 11 1 9 9 17 77 19 1 7 7 15 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
32 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 100 values pushed */
0 3 9 10 9 3 10 128 0 16 13 12 13 16 12 128 0 0 12 1 12 0 1 128 0 1 18 12 1 18 126 0 18 17 12 18 17 126 0 17 6 12 17 6 126 0 6 5 12 6 5 126 0 5 15 12 5 15 126 0 15 7 12 15 7 126 0 4 8 1 2 9 4 2 103 0 10 0 13 16 10 13 105 11 1 9 14 1 12 0 9 12 105 19 1 7 7 15 7 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 107 values pushed */
0 3 9 10 9 3 10 128 0 16 13 12 13 16 12 128 0 0 12 1 12 0 1 128 0 1 18 12 1 18 126 0 18 17 12 18 17 126 0 17 6 12 17 6 126 0 6 5 12 6 5 126 0 5 15 12 5 15 126 0 15 7 12 15 7 126 19 1 7 7 132 0 4 8 1 2 9 4 2 103 11 1 9 3 12 9 89 0 10 0 13 16 10 13 105 11 1 9 9 12 97 14 1 12 9 12 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 38 values pushed */
0 0 169 167 162 160 152 150 128 126 121 119 115 113 109 107 103 101 97 95 91 89 87 86 0 74 0 73 37 31 41 37 54 38 20 20 7 29 
CALL[ ]\011/* CallFunction */";
};
width = 586;
}
);
note = R;
unicode = 0052;
},
{
glyphname = S;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"620 100 LINE SMOOTH",
"625 105 OFFCURVE",
"641 118 OFFCURVE",
"652 130 OFFCURVE",
"652 136 QCURVE SMOOTH",
"652 142 OFFCURVE",
"643 152 OFFCURVE",
"636 152 QCURVE SMOOTH",
"627 152 OFFCURVE",
"614 134 OFFCURVE",
"612 132 QCURVE SMOOTH",
"604 124 LINE SMOOTH",
"590 110 OFFCURVE",
"564 110 QCURVE SMOOTH",
"146 110 LINE",
"152 116 LINE",
"171 134 LINE SMOOTH",
"217 175 OFFCURVE",
"276 259 OFFCURVE",
"276 320 QCURVE SMOOTH",
"276 406 LINE SMOOTH",
"276 474 OFFCURVE",
"283 542 OFFCURVE",
"309 567 OFFCURVE",
"312 570 QCURVE SMOOTH",
"323 581 OFFCURVE",
"327 581 QCURVE SMOOTH",
"334 581 OFFCURVE",
"334 571 QCURVE SMOOTH",
"334 344 LINE SMOOTH",
"334 285 OFFCURVE",
"333 213 OFFCURVE",
"327 193 OFFCURVE",
"318 184 QCURVE SMOOTH",
"314 180 LINE SMOOTH",
"310 176 OFFCURVE",
"293 165 OFFCURVE",
"286 158 OFFCURVE",
"286 152 QCURVE SMOOTH",
"286 146 OFFCURVE",
"295 136 OFFCURVE",
"302 136 QCURVE SMOOTH",
"310 136 OFFCURVE",
"330 146 OFFCURVE",
"334 148 QCURVE SMOOTH",
"356 159 OFFCURVE",
"409 213 OFFCURVE",
"450 300 OFFCURVE",
"450 356 QCURVE SMOOTH",
"450 613 LINE SMOOTH",
"450 616 OFFCURVE",
"455 621 OFFCURVE",
"458 621 QCURVE SMOOTH",
"460 621 OFFCURVE",
"470 617 OFFCURVE",
"474 615 QCURVE SMOOTH",
"538 587 LINE SMOOTH",
"544 585 OFFCURVE",
"562 576 OFFCURVE",
"568 576 QCURVE SMOOTH",
"573 576 OFFCURVE",
"583 584 OFFCURVE",
"597 601 OFFCURVE",
"604 608 QCURVE SMOOTH",
"632 636 LINE SMOOTH",
"639 643 OFFCURVE",
"656 657 OFFCURVE",
"664 666 OFFCURVE",
"664 672 QCURVE SMOOTH",
"664 681 OFFCURVE",
"648 691 OFFCURVE",
"631 696 QCURVE SMOOTH",
"612 703 LINE",
"514 745 LINE SMOOTH",
"495 753 OFFCURVE",
"482 760 QCURVE SMOOTH",
"465 768 OFFCURVE",
"456 768 QCURVE SMOOTH",
"450 768 OFFCURVE",
"441 760 OFFCURVE",
"427 743 OFFCURVE",
"420 736 QCURVE SMOOTH",
"352 668 LINE SMOOTH",
"349 665 OFFCURVE",
"292 611 QCURVE SMOOTH",
"245 569 OFFCURVE",
"193 512 OFFCURVE",
"160 440 OFFCURVE",
"160 394 QCURVE SMOOTH",
"160 256 LINE SMOOTH",
"160 217 OFFCURVE",
"138 142 OFFCURVE",
"132 136 QCURVE SMOOTH",
"48 52 LINE SMOOTH",
"43 47 OFFCURVE",
"27 34 OFFCURVE",
"16 22 OFFCURVE",
"16 16 QCURVE SMOOTH",
"16 10 OFFCURVE",
"25 0 OFFCURVE",
"32 0 QCURVE SMOOTH",
"39 0 OFFCURVE",
"55 2 OFFCURVE",
"64 2 QCURVE SMOOTH",
"482 2 LINE SMOOTH",
"490 2 OFFCURVE",
"506 0 OFFCURVE",
"516 0 QCURVE SMOOTH",
"523 0 OFFCURVE",
"535 11 OFFCURVE",
"548 28 OFFCURVE",
"552 32 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"504 378 OFFCURVE",
"512 369 OFFCURVE",
"529 355 OFFCURVE",
"536 348 QCURVE SMOOTH",
"564 320 LINE SMOOTH",
"571 313 OFFCURVE",
"585 296 OFFCURVE",
"594 288 OFFCURVE",
"600 288 QCURVE SMOOTH",
"606 288 OFFCURVE",
"615 296 OFFCURVE",
"629 313 OFFCURVE",
"636 320 QCURVE SMOOTH",
"664 348 LINE SMOOTH",
"671 355 OFFCURVE",
"688 369 OFFCURVE",
"696 378 OFFCURVE",
"696 384 QCURVE SMOOTH",
"696 390 OFFCURVE",
"688 399 OFFCURVE",
"671 413 OFFCURVE",
"664 420 QCURVE SMOOTH",
"636 448 LINE SMOOTH",
"629 455 OFFCURVE",
"615 472 OFFCURVE",
"606 480 OFFCURVE",
"600 480 QCURVE SMOOTH",
"594 480 OFFCURVE",
"585 472 OFFCURVE",
"571 455 OFFCURVE",
"564 448 QCURVE SMOOTH",
"536 420 LINE SMOOTH",
"529 413 OFFCURVE",
"512 399 OFFCURVE",
"504 390 OFFCURVE",
"504 384 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"640 48 LINE",
"660 28 LINE",
"744 112 LINE",
"724 132 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
46 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
42 1 4 3 149 1 7 5 151 150 2 0 7 3 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 15 values pushed */
42 1 6 3 149 1 7 5 151 150 2 0 7 3 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
6 1 4 3 9 3 4 9 128 0 8 10 5 10 8 5 128 0 5 7 10 5 7 126 0 9 0 10 8 9 10 105 0 3 3 20 77 0 7 7 0 98 2 1 2 0 0 18 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
46 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
6 1 4 3 9 3 4 9 128 0 8 10 5 10 8 5 128 0 5 7 10 5 7 126 0 9 0 10 8 9 10 105 0 3 3 16 77 0 7 7 0 98 2 1 2 0 0 18 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 56 values pushed */
0 6 3 4 3 6 4 128 0 4 9 3 4 9 126 0 8 10 5 10 8 5 128 0 5 7 10 5 7 126 0 9 0 10 8 9 10 105 0 3 3 16 77 0 7 7 0 98 2 1 2 0 0 18 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 22 values pushed */
139 137 121 119 103 102 98 96 85 83 70 68 52 50 34 32 33 49 34 11 7 25 
CALL[ ]\011/* CallFunction */";
};
width = 656;
}
);
note = S;
unicode = 0053;
},
{
glyphname = T;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"468 236 LINE SMOOTH",
"475 243 OFFCURVE",
"492 257 OFFCURVE",
"500 266 OFFCURVE",
"500 272 QCURVE SMOOTH",
"500 610 LINE SMOOTH",
"500 618 OFFCURVE",
"508 618 QCURVE SMOOTH",
"594 618 LINE SMOOTH",
"612 618 OFFCURVE",
"634 628 OFFCURVE",
"646 640 QCURVE SMOOTH",
"730 724 LINE SMOOTH",
"735 729 OFFCURVE",
"746 737 OFFCURVE",
"754 746 OFFCURVE",
"754 752 QCURVE SMOOTH",
"754 759 OFFCURVE",
"745 768 OFFCURVE",
"738 768 QCURVE SMOOTH",
"733 768 OFFCURVE",
"725 762 OFFCURVE",
"715 749 OFFCURVE",
"710 744 QCURVE SMOOTH",
"698 732 OFFCURVE",
"687 726 OFFCURVE",
"678 726 QCURVE SMOOTH",
"160 726 LINE SMOOTH",
"142 726 OFFCURVE",
"120 716 OFFCURVE",
"108 704 QCURVE SMOOTH",
"24 620 LINE SMOOTH",
"19 615 OFFCURVE",
"8 607 OFFCURVE",
"0 598 OFFCURVE",
"0 592 QCURVE SMOOTH",
"0 585 OFFCURVE",
"9 576 OFFCURVE",
"16 576 QCURVE SMOOTH",
"21 576 OFFCURVE",
"29 582 OFFCURVE",
"39 595 OFFCURVE",
"44 600 QCURVE SMOOTH",
"56 612 OFFCURVE",
"67 618 OFFCURVE",
"76 618 QCURVE SMOOTH",
"408 618 LINE SMOOTH",
"411 618 OFFCURVE",
"411 615 QCURVE SMOOTH",
"411 613 OFFCURVE",
"408 610 QCURVE SMOOTH",
"404 607 OFFCURVE",
"392 597 OFFCURVE",
"384 588 OFFCURVE",
"384 582 QCURVE SMOOTH",
"384 196 LINE SMOOTH",
"384 187 OFFCURVE",
"395 176 OFFCURVE",
"404 176 QCURVE SMOOTH",
"410 176 OFFCURVE",
"419 184 OFFCURVE",
"433 201 OFFCURVE",
"440 208 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"468 108 LINE SMOOTH",
"473 113 OFFCURVE",
"484 121 OFFCURVE",
"492 130 OFFCURVE",
"492 136 QCURVE SMOOTH",
"492 143 OFFCURVE",
"483 152 OFFCURVE",
"476 152 QCURVE SMOOTH",
"471 152 OFFCURVE",
"463 146 OFFCURVE",
"453 133 OFFCURVE",
"448 128 QCURVE SMOOTH",
"444 124 OFFCURVE",
"435 117 OFFCURVE",
"430 117 QCURVE SMOOTH",
"422 117 OFFCURVE",
"412 123 QCURVE SMOOTH",
"348 155 LINE SMOOTH",
"337 160 OFFCURVE",
"326 169 OFFCURVE",
"326 176 QCURVE SMOOTH",
"326 540 LINE SMOOTH",
"326 549 OFFCURVE",
"315 560 OFFCURVE",
"306 560 QCURVE SMOOTH",
"300 560 OFFCURVE",
"291 552 OFFCURVE",
"277 535 OFFCURVE",
"270 528 QCURVE SMOOTH",
"242 500 LINE SMOOTH",
"235 493 OFFCURVE",
"218 479 OFFCURVE",
"210 470 OFFCURVE",
"210 464 QCURVE SMOOTH",
"210 140 LINE SMOOTH",
"210 131 OFFCURVE",
"204 125 QCURVE SMOOTH",
"198 119 OFFCURVE",
"187 110 OFFCURVE",
"180 102 OFFCURVE",
"180 96 QCURVE SMOOTH",
"180 89 OFFCURVE",
"190 80 OFFCURVE",
"208 75 OFFCURVE",
"212 73 QCURVE SMOOTH",
"326 16 LINE SMOOTH",
"330 14 OFFCURVE",
"349 0 OFFCURVE",
"356 0 QCURVE SMOOTH",
"362 0 OFFCURVE",
"371 8 OFFCURVE",
"385 25 OFFCURVE",
"392 32 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
56 7 2 2 1 81 57 2 0 7 2 76 94 1 0 1 75 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
0 2 1 7 1 2 7 128 0 0 7 9 7 0 9 128 0 9 8 7 9 8 126 0 8 6 7 8 6 126 0 4 4 20 77 5 1 1 1 3 95 0 3 3 14 77 0 7 7 17 77 0 6 6 18 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 55 values pushed */
0 2 1 7 1 2 7 128 0 0 7 9 7 0 9 128 0 9 8 7 9 8 126 0 8 6 7 8 6 126 0 3 5 1 1 2 3 1 103 0 4 4 16 77 0 7 7 17 77 0 6 6 18 6 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 16 values pushed */
108 106 101 99 91 89 43 41 37 57 37 88 34 10 7 29 
CALL[ ]\011/* CallFunction */";
};
width = 558;
}
);
note = T;
unicode = 0054;
},
{
glyphname = U;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"523 125 LINE",
"523 96 LINE SMOOTH",
"523 78 OFFCURVE",
"533 56 OFFCURVE",
"545 44 QCURVE SMOOTH",
"565 24 LINE SMOOTH",
"570 19 OFFCURVE",
"579 6 OFFCURVE",
"587 0 OFFCURVE",
"593 0 QCURVE SMOOTH",
"599 0 OFFCURVE",
"607 6 OFFCURVE",
"616 19 OFFCURVE",
"621 24 QCURVE SMOOTH",
"665 68 LINE SMOOTH",
"670 73 OFFCURVE",
"683 82 OFFCURVE",
"689 90 OFFCURVE",
"689 96 QCURVE SMOOTH",
"689 102 OFFCURVE",
"683 110 OFFCURVE",
"670 119 OFFCURVE",
"665 124 QCURVE SMOOTH",
"651 138 OFFCURVE",
"639 159 OFFCURVE",
"639 176 QCURVE SMOOTH",
"639 748 LINE SMOOTH",
"639 757 OFFCURVE",
"628 768 OFFCURVE",
"619 768 QCURVE SMOOTH",
"613 768 OFFCURVE",
"604 760 OFFCURVE",
"590 743 OFFCURVE",
"583 736 QCURVE SMOOTH",
"555 708 LINE SMOOTH",
"548 701 OFFCURVE",
"531 687 OFFCURVE",
"523 678 OFFCURVE",
"523 672 QCURVE SMOOTH",
"523 165 LINE",
"484 126 LINE SMOOTH",
"472 114 OFFCURVE",
"461 108 OFFCURVE",
"452 108 QCURVE SMOOTH",
"356 108 LINE SMOOTH",
"337 108 OFFCURVE",
"313 115 OFFCURVE",
"301 127 QCURVE SMOOTH",
"223 205 LINE",
"326 308 LINE SMOOTH",
"338 320 OFFCURVE",
"348 342 OFFCURVE",
"348 360 QCURVE SMOOTH",
"348 748 LINE SMOOTH",
"348 757 OFFCURVE",
"337 768 OFFCURVE",
"328 768 QCURVE SMOOTH",
"323 768 OFFCURVE",
"315 762 OFFCURVE",
"305 749 OFFCURVE",
"300 744 QCURVE SMOOTH",
"80 524 LINE SMOOTH",
"68 512 OFFCURVE",
"58 490 OFFCURVE",
"58 472 QCURVE SMOOTH",
"58 200 LINE SMOOTH",
"58 182 OFFCURVE",
"68 160 OFFCURVE",
"80 148 QCURVE SMOOTH",
"207 21 LINE SMOOTH",
"219 9 OFFCURVE",
"242 0 OFFCURVE",
"260 0 QCURVE SMOOTH",
"368 0 LINE SMOOTH",
"386 0 OFFCURVE",
"408 10 OFFCURVE",
"420 22 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"203 225 LINE",
"200 228 LINE SMOOTH",
"186 242 OFFCURVE",
"174 263 OFFCURVE",
"174 280 QCURVE SMOOTH",
"174 552 LINE SMOOTH",
"174 569 OFFCURVE",
"186 590 OFFCURVE",
"200 604 QCURVE SMOOTH",
"222 626 LINE SMOOTH",
"226 630 OFFCURVE",
"228 630 QCURVE SMOOTH",
"232 630 OFFCURVE",
"232 626 QCURVE SMOOTH",
"232 280 LINE SMOOTH",
"232 263 OFFCURVE",
"220 242 OFFCURVE",
"206 228 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
93 81 75 37 36 27 6 2 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
3 1 1 1 20 77 0 2 2 0 98 4 1 0 0 18 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 18 values pushed */
3 1 1 1 16 77 0 2 2 0 98 4 1 0 0 18 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
67 65 44 58 46 49 5 7 26 
CALL[ ]\011/* CallFunction */";
};
width = 697;
}
);
note = U;
unicode = 0055;
},
{
glyphname = V;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"158 -24 LINE",
"26 108 LINE SMOOTH",
"12 122 OFFCURVE",
"0 143 OFFCURVE",
"0 160 QCURVE SMOOTH",
"0 552 LINE SMOOTH",
"0 569 OFFCURVE",
"12 590 OFFCURVE",
"26 604 QCURVE SMOOTH",
"48 626 LINE SMOOTH",
"52 630 OFFCURVE",
"54 630 QCURVE SMOOTH",
"58 630 OFFCURVE",
"58 626 QCURVE SMOOTH",
"58 200 LINE SMOOTH",
"58 182 OFFCURVE",
"68 160 OFFCURVE",
"80 148 QCURVE SMOOTH",
"204 24 LINE SMOOTH",
"209 19 OFFCURVE",
"218 6 OFFCURVE",
"226 0 OFFCURVE",
"232 0 QCURVE SMOOTH",
"238 0 OFFCURVE",
"246 6 OFFCURVE",
"255 19 OFFCURVE",
"260 24 QCURVE SMOOTH",
"442 206 LINE SMOOTH",
"454 218 OFFCURVE",
"464 240 OFFCURVE",
"464 258 QCURVE SMOOTH",
"464 748 LINE SMOOTH",
"464 757 OFFCURVE",
"453 768 OFFCURVE",
"444 768 QCURVE SMOOTH",
"438 768 OFFCURVE",
"429 760 OFFCURVE",
"415 743 OFFCURVE",
"408 736 QCURVE SMOOTH",
"380 708 LINE SMOOTH",
"373 701 OFFCURVE",
"356 687 OFFCURVE",
"348 678 OFFCURVE",
"348 672 QCURVE SMOOTH",
"348 178 LINE SMOOTH",
"348 161 OFFCURVE",
"336 140 OFFCURVE",
"322 126 QCURVE SMOOTH",
"312 116 LINE",
"200 228 LINE SMOOTH",
"186 242 OFFCURVE",
"174 263 OFFCURVE",
"174 280 QCURVE SMOOTH",
"174 748 LINE SMOOTH",
"174 757 OFFCURVE",
"163 768 OFFCURVE",
"154 768 QCURVE SMOOTH",
"148 768 OFFCURVE",
"139 760 OFFCURVE",
"125 743 OFFCURVE",
"118 736 QCURVE SMOOTH",
"90 708 LINE SMOOTH",
"82 701 OFFCURVE",
"61 683 OFFCURVE",
"59 677 QCURVE",
"-94 524 LINE SMOOTH",
"-106 512 OFFCURVE",
"-116 490 OFFCURVE",
"-116 472 QCURVE SMOOTH",
"-116 80 LINE SMOOTH",
"-116 62 OFFCURVE",
"-106 40 OFFCURVE",
"-94 28 QCURVE SMOOTH",
"30 -96 LINE SMOOTH",
"35 -101 OFFCURVE",
"44 -114 OFFCURVE",
"52 -120 OFFCURVE",
"58 -120 QCURVE SMOOTH",
"64 -120 OFFCURVE",
"72 -114 OFFCURVE",
"81 -101 OFFCURVE",
"86 -96 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
67 37 32 3 3 1 80 1 0 3 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
0 0 3 0 134 2 1 1 1 20 77 0 3 3 18 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 17 values pushed */
0 0 3 0 134 2 1 1 1 16 77 0 3 3 18 3 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
59 57 47 45 25 23 34 4 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 522;
}
);
note = V;
unicode = 0056;
},
{
glyphname = W;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"898 -24 LINE",
"766 108 LINE SMOOTH",
"752 122 OFFCURVE",
"740 143 OFFCURVE",
"740 160 QCURVE SMOOTH",
"740 552 LINE SMOOTH",
"740 569 OFFCURVE",
"752 590 OFFCURVE",
"766 604 QCURVE SMOOTH",
"788 626 LINE SMOOTH",
"792 630 OFFCURVE",
"794 630 QCURVE SMOOTH",
"798 630 OFFCURVE",
"798 626 QCURVE SMOOTH",
"798 200 LINE SMOOTH",
"798 182 OFFCURVE",
"808 160 OFFCURVE",
"820 148 QCURVE SMOOTH",
"944 24 LINE SMOOTH",
"949 19 OFFCURVE",
"958 6 OFFCURVE",
"966 0 OFFCURVE",
"972 0 QCURVE SMOOTH",
"978 0 OFFCURVE",
"986 6 OFFCURVE",
"995 19 OFFCURVE",
"1000 24 QCURVE SMOOTH",
"1117 141 LINE",
"1234 24 LINE SMOOTH",
"1239 19 OFFCURVE",
"1248 6 OFFCURVE",
"1256 0 OFFCURVE",
"1262 0 QCURVE SMOOTH",
"1268 0 OFFCURVE",
"1276 6 OFFCURVE",
"1285 19 OFFCURVE",
"1290 24 QCURVE SMOOTH",
"1472 206 LINE SMOOTH",
"1484 218 OFFCURVE",
"1494 240 OFFCURVE",
"1494 258 QCURVE SMOOTH",
"1494 748 LINE SMOOTH",
"1494 757 OFFCURVE",
"1483 768 OFFCURVE",
"1474 768 QCURVE SMOOTH",
"1468 768 OFFCURVE",
"1459 760 OFFCURVE",
"1445 743 OFFCURVE",
"1438 736 QCURVE SMOOTH",
"1410 708 LINE SMOOTH",
"1403 701 OFFCURVE",
"1386 687 OFFCURVE",
"1378 678 OFFCURVE",
"1378 672 QCURVE SMOOTH",
"1378 178 LINE SMOOTH",
"1378 161 OFFCURVE",
"1366 140 OFFCURVE",
"1352 126 QCURVE SMOOTH",
"1342 116 LINE",
"1230 228 LINE SMOOTH",
"1216 242 OFFCURVE",
"1204 263 OFFCURVE",
"1204 280 QCURVE SMOOTH",
"1204 748 LINE SMOOTH",
"1204 757 OFFCURVE",
"1193 768 OFFCURVE",
"1184 768 QCURVE SMOOTH",
"1178 768 OFFCURVE",
"1169 760 OFFCURVE",
"1155 743 OFFCURVE",
"1148 736 QCURVE SMOOTH",
"1120 708 LINE SMOOTH",
"1113 701 OFFCURVE",
"1096 687 OFFCURVE",
"1088 678 OFFCURVE",
"1088 672 QCURVE SMOOTH",
"1088 200 LINE SMOOTH",
"1088 176 OFFCURVE",
"1098 162 QCURVE",
"1052 116 LINE",
"940 228 LINE SMOOTH",
"926 242 OFFCURVE",
"914 263 OFFCURVE",
"914 280 QCURVE SMOOTH",
"914 748 LINE SMOOTH",
"914 757 OFFCURVE",
"903 768 OFFCURVE",
"894 768 QCURVE SMOOTH",
"888 768 OFFCURVE",
"879 760 OFFCURVE",
"865 743 OFFCURVE",
"858 736 QCURVE SMOOTH",
"646 524 LINE SMOOTH",
"634 512 OFFCURVE",
"624 490 OFFCURVE",
"624 472 QCURVE SMOOTH",
"624 80 LINE SMOOTH",
"624 62 OFFCURVE",
"634 40 OFFCURVE",
"646 28 QCURVE SMOOTH",
"770 -96 LINE SMOOTH",
"775 -101 OFFCURVE",
"784 -114 OFFCURVE",
"792 -120 OFFCURVE",
"798 -120 QCURVE SMOOTH",
"804 -120 OFFCURVE",
"812 -114 OFFCURVE",
"821 -101 OFFCURVE",
"826 -96 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
94 80 54 49 32 29 28 7 4 1 107 1 0 4 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 0 4 0 134 3 2 2 1 1 20 77 5 1 4 4 18 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 19 values pushed */
0 0 4 0 134 3 2 2 1 1 16 77 5 1 4 4 18 4 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 13 values pushed */
86 84 76 74 64 62 42 40 47 34 6 7 24 
CALL[ ]\011/* CallFunction */";
};
width = 1694;
}
);
note = W;
unicode = 0057;
},
{
glyphname = X;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"375 -192 OFFCURVE",
"383 -186 OFFCURVE",
"393 -173 OFFCURVE",
"398 -168 QCURVE SMOOTH",
"435 -132 LINE SMOOTH",
"499 -69 OFFCURVE",
"553 2 OFFCURVE",
"580 103 OFFCURVE",
"580 192 QCURVE SMOOTH",
"580 472 LINE SMOOTH",
"580 487 OFFCURVE",
"572 507 OFFCURVE",
"553 525 OFFCURVE",
"550 528 QCURVE SMOOTH",
"543 535 OFFCURVE",
"529 552 OFFCURVE",
"520 560 OFFCURVE",
"514 560 QCURVE SMOOTH",
"508 560 OFFCURVE",
"499 552 OFFCURVE",
"485 535 OFFCURVE",
"478 528 QCURVE SMOOTH",
"358 408 LINE SMOOTH",
"354 404 OFFCURVE",
"352 404 QCURVE SMOOTH",
"348 404 OFFCURVE",
"348 408 QCURVE SMOOTH",
"348 464 LINE SMOOTH",
"348 537 OFFCURVE",
"366 629 OFFCURVE",
"402 692 OFFCURVE",
"434 724 QCURVE SMOOTH",
"439 729 OFFCURVE",
"450 737 OFFCURVE",
"458 746 OFFCURVE",
"458 751 QCURVE SMOOTH",
"458 752 LINE SMOOTH",
"458 759 OFFCURVE",
"449 768 OFFCURVE",
"442 768 QCURVE SMOOTH",
"437 768 OFFCURVE",
"429 762 OFFCURVE",
"419 749 OFFCURVE",
"414 744 QCURVE SMOOTH",
"402 732 OFFCURVE",
"391 726 OFFCURVE",
"382 726 QCURVE SMOOTH",
"-384 726 LINE SMOOTH",
"-394 726 OFFCURVE",
"-412 712 OFFCURVE",
"-428 696 QCURVE SMOOTH",
"-504 620 LINE SMOOTH",
"-509 615 OFFCURVE",
"-520 607 OFFCURVE",
"-528 598 OFFCURVE",
"-528 592 QCURVE SMOOTH",
"-528 585 OFFCURVE",
"-519 576 OFFCURVE",
"-512 576 QCURVE SMOOTH",
"-507 576 OFFCURVE",
"-499 582 OFFCURVE",
"-489 595 OFFCURVE",
"-484 600 QCURVE SMOOTH",
"-472 612 OFFCURVE",
"-461 618 OFFCURVE",
"-452 618 QCURVE SMOOTH",
"283 618 LINE SMOOTH",
"287 618 OFFCURVE",
"287 614 QCURVE SMOOTH",
"287 613 OFFCURVE",
"284 608 QCURVE SMOOTH",
"255 565 OFFCURVE",
"232 469 OFFCURVE",
"232 384 QCURVE SMOOTH",
"232 196 LINE SMOOTH",
"232 187 OFFCURVE",
"243 176 OFFCURVE",
"252 176 QCURVE SMOOTH",
"258 176 OFFCURVE",
"267 184 OFFCURVE",
"281 201 OFFCURVE",
"288 208 QCURVE SMOOTH",
"316 236 LINE SMOOTH",
"323 243 OFFCURVE",
"340 257 OFFCURVE",
"348 266 OFFCURVE",
"348 272 QCURVE SMOOTH",
"348 348 LINE SMOOTH",
"348 354 OFFCURVE",
"352 362 OFFCURVE",
"358 368 QCURVE SMOOTH",
"427 437 LINE SMOOTH",
"430 440 OFFCURVE",
"434 440 QCURVE SMOOTH",
"438 440 OFFCURVE",
"441 437 QCURVE SMOOTH",
"453 425 OFFCURVE",
"464 407 OFFCURVE",
"464 392 QCURVE SMOOTH",
"464 112 LINE SMOOTH",
"464 39 OFFCURVE",
"446 -53 OFFCURVE",
"410 -116 OFFCURVE",
"378 -148 QCURVE SMOOTH",
"373 -153 OFFCURVE",
"360 -162 OFFCURVE",
"354 -170 OFFCURVE",
"354 -176 QCURVE SMOOTH",
"354 -183 OFFCURVE",
"363 -192 OFFCURVE",
"370 -192 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"900 236 LINE SMOOTH",
"907 243 OFFCURVE",
"924 257 OFFCURVE",
"932 266 OFFCURVE",
"932 272 QCURVE SMOOTH",
"932 610 LINE SMOOTH",
"932 618 OFFCURVE",
"940 618 QCURVE SMOOTH",
"1357 618 LINE SMOOTH",
"1375 618 OFFCURVE",
"1397 628 OFFCURVE",
"1409 640 QCURVE SMOOTH",
"1493 724 LINE SMOOTH",
"1498 729 OFFCURVE",
"1509 737 OFFCURVE",
"1517 746 OFFCURVE",
"1517 752 QCURVE SMOOTH",
"1517 759 OFFCURVE",
"1508 768 OFFCURVE",
"1501 768 QCURVE SMOOTH",
"1496 768 OFFCURVE",
"1488 762 OFFCURVE",
"1478 749 OFFCURVE",
"1473 744 QCURVE SMOOTH",
"1461 732 OFFCURVE",
"1450 726 OFFCURVE",
"1441 726 QCURVE SMOOTH",
"592 726 LINE SMOOTH",
"574 726 OFFCURVE",
"552 716 OFFCURVE",
"540 704 QCURVE SMOOTH",
"456 620 LINE SMOOTH",
"451 615 OFFCURVE",
"440 607 OFFCURVE",
"432 598 OFFCURVE",
"432 592 QCURVE SMOOTH",
"432 585 OFFCURVE",
"441 576 OFFCURVE",
"448 576 QCURVE SMOOTH",
"453 576 OFFCURVE",
"461 582 OFFCURVE",
"471 595 OFFCURVE",
"476 600 QCURVE SMOOTH",
"488 612 OFFCURVE",
"499 618 OFFCURVE",
"508 618 QCURVE SMOOTH",
"840 618 LINE SMOOTH",
"843 618 OFFCURVE",
"843 615 QCURVE SMOOTH",
"843 613 OFFCURVE",
"840 610 QCURVE SMOOTH",
"836 607 OFFCURVE",
"824 597 OFFCURVE",
"816 588 OFFCURVE",
"816 582 QCURVE SMOOTH",
"816 196 LINE SMOOTH",
"816 187 OFFCURVE",
"827 176 OFFCURVE",
"836 176 QCURVE SMOOTH",
"842 176 OFFCURVE",
"851 184 OFFCURVE",
"865 201 OFFCURVE",
"872 208 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-92 392 LINE SMOOTH",
"-87 387 OFFCURVE",
"-78 374 OFFCURVE",
"-70 368 OFFCURVE",
"-64 368 QCURVE SMOOTH",
"-58 368 OFFCURVE",
"-50 374 OFFCURVE",
"-41 387 OFFCURVE",
"-36 392 QCURVE SMOOTH",
"8 436 LINE SMOOTH",
"13 441 OFFCURVE",
"26 450 OFFCURVE",
"32 458 OFFCURVE",
"32 464 QCURVE SMOOTH",
"32 470 OFFCURVE",
"26 478 OFFCURVE",
"13 487 OFFCURVE",
"8 492 QCURVE SMOOTH",
"-36 536 LINE SMOOTH",
"-41 541 OFFCURVE",
"-50 554 OFFCURVE",
"-58 560 OFFCURVE",
"-64 560 QCURVE SMOOTH",
"-70 560 OFFCURVE",
"-78 554 OFFCURVE",
"-87 541 OFFCURVE",
"-92 536 QCURVE SMOOTH",
"-136 492 LINE SMOOTH",
"-141 487 OFFCURVE",
"-154 478 OFFCURVE",
"-160 470 OFFCURVE",
"-160 464 QCURVE SMOOTH",
"-160 458 OFFCURVE",
"-154 450 OFFCURVE",
"-141 441 OFFCURVE",
"-136 436 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"316 108 LINE SMOOTH",
"321 113 OFFCURVE",
"332 121 OFFCURVE",
"340 130 OFFCURVE",
"340 136 QCURVE SMOOTH",
"340 143 OFFCURVE",
"331 152 OFFCURVE",
"324 152 QCURVE SMOOTH",
"319 152 OFFCURVE",
"311 146 OFFCURVE",
"301 133 OFFCURVE",
"296 128 QCURVE SMOOTH",
"292 124 OFFCURVE",
"283 117 OFFCURVE",
"278 117 QCURVE SMOOTH",
"270 117 OFFCURVE",
"260 123 QCURVE SMOOTH",
"196 155 LINE SMOOTH",
"185 160 OFFCURVE",
"174 169 OFFCURVE",
"174 176 QCURVE SMOOTH",
"174 540 LINE SMOOTH",
"174 549 OFFCURVE",
"163 560 OFFCURVE",
"154 560 QCURVE SMOOTH",
"148 560 OFFCURVE",
"139 552 OFFCURVE",
"125 535 OFFCURVE",
"118 528 QCURVE SMOOTH",
"90 500 LINE SMOOTH",
"83 493 OFFCURVE",
"66 479 OFFCURVE",
"58 470 OFFCURVE",
"58 464 QCURVE SMOOTH",
"58 140 LINE SMOOTH",
"58 131 OFFCURVE",
"52 125 QCURVE SMOOTH",
"46 119 OFFCURVE",
"35 110 OFFCURVE",
"28 102 OFFCURVE",
"28 96 QCURVE SMOOTH",
"28 89 OFFCURVE",
"38 80 OFFCURVE",
"56 75 OFFCURVE",
"60 73 QCURVE SMOOTH",
"174 16 LINE SMOOTH",
"178 14 OFFCURVE",
"197 0 OFFCURVE",
"204 0 QCURVE SMOOTH",
"210 0 OFFCURVE",
"219 8 OFFCURVE",
"233 25 OFFCURVE",
"240 32 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"900 108 LINE SMOOTH",
"905 113 OFFCURVE",
"916 121 OFFCURVE",
"924 130 OFFCURVE",
"924 136 QCURVE SMOOTH",
"924 143 OFFCURVE",
"915 152 OFFCURVE",
"908 152 QCURVE SMOOTH",
"903 152 OFFCURVE",
"895 146 OFFCURVE",
"885 133 OFFCURVE",
"880 128 QCURVE SMOOTH",
"876 124 OFFCURVE",
"867 117 OFFCURVE",
"862 117 QCURVE SMOOTH",
"854 117 OFFCURVE",
"844 123 QCURVE SMOOTH",
"780 155 LINE SMOOTH",
"769 160 OFFCURVE",
"758 169 OFFCURVE",
"758 176 QCURVE SMOOTH",
"758 540 LINE SMOOTH",
"758 549 OFFCURVE",
"747 560 OFFCURVE",
"738 560 QCURVE SMOOTH",
"732 560 OFFCURVE",
"723 552 OFFCURVE",
"709 535 OFFCURVE",
"702 528 QCURVE SMOOTH",
"674 500 LINE SMOOTH",
"667 493 OFFCURVE",
"650 479 OFFCURVE",
"642 470 OFFCURVE",
"642 464 QCURVE SMOOTH",
"642 140 LINE SMOOTH",
"642 131 OFFCURVE",
"636 125 QCURVE SMOOTH",
"630 119 OFFCURVE",
"619 110 OFFCURVE",
"612 102 OFFCURVE",
"612 96 QCURVE SMOOTH",
"612 89 OFFCURVE",
"622 80 OFFCURVE",
"640 75 OFFCURVE",
"644 73 QCURVE SMOOTH",
"758 16 LINE SMOOTH",
"762 14 OFFCURVE",
"781 0 OFFCURVE",
"788 0 QCURVE SMOOTH",
"794 0 OFFCURVE",
"803 8 OFFCURVE",
"817 25 OFFCURVE",
"824 32 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"958 458 OFFCURVE",
"964 450 OFFCURVE",
"977 441 OFFCURVE",
"982 436 QCURVE SMOOTH",
"1026 392 LINE SMOOTH",
"1031 387 OFFCURVE",
"1040 374 OFFCURVE",
"1048 368 OFFCURVE",
"1054 368 QCURVE SMOOTH",
"1060 368 OFFCURVE",
"1068 374 OFFCURVE",
"1077 387 OFFCURVE",
"1082 392 QCURVE SMOOTH",
"1126 436 LINE SMOOTH",
"1131 441 OFFCURVE",
"1144 450 OFFCURVE",
"1150 458 OFFCURVE",
"1150 464 QCURVE SMOOTH",
"1150 470 OFFCURVE",
"1144 478 OFFCURVE",
"1131 487 OFFCURVE",
"1126 492 QCURVE SMOOTH",
"1082 536 LINE SMOOTH",
"1077 541 OFFCURVE",
"1068 554 OFFCURVE",
"1060 560 OFFCURVE",
"1054 560 QCURVE SMOOTH",
"1048 560 OFFCURVE",
"1040 554 OFFCURVE",
"1031 541 OFFCURVE",
"1026 536 QCURVE SMOOTH",
"982 492 LINE SMOOTH",
"977 487 OFFCURVE",
"964 478 OFFCURVE",
"958 470 OFFCURVE",
"958 464 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHW[ ]\011/* 25 values pushed */
167 118 2 2 1 281 228 83 16 4 14 5 168 23 2 0 14 3 76 294 241 2 0 1 75 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 78 values pushed */
7 1 0 14 18 14 0 18 128 22 1 18 17 14 18 17 126 21 1 17 15 14 17 15 126 12 8 2 1 1 3 95 10 1 3 3 14 77 9 1 2 2 4 97 11 1 4 4 20 77 24 1 14 14 5 97 23 20 16 13 4 5 5 17 77 19 1 15 15 18 77 25 1 6 6 15 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 76 values pushed */
7 1 0 14 18 14 0 18 128 22 1 18 17 14 18 17 126 21 1 17 15 14 17 15 126 10 1 3 12 8 2 1 2 3 1 103 9 1 2 2 4 97 11 1 4 4 16 77 24 1 14 14 5 97 23 20 16 13 4 5 5 17 77 19 1 15 15 18 77 25 1 6 6 15 6 78 
EIF[ ]\011/* EndIf */
NPUSHW[ ]\011/* 57 values pushed */
0 0 343 341 325 323 308 306 301 299 291 289 267 265 255 253 248 246 238 236 214 212 205 203 187 185 165 163 154 152 147 144 135 133 128 123 115 113 0 110 0 109 93 91 71 69 64 61 52 50 45 41 33 31 26 7 22 
CALL[ ]\011/* CallFunction */";
};
width = 638;
}
);
note = X;
unicode = 0058;
},
{
glyphname = Y;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"616 26 LINE SMOOTH",
"628 38 OFFCURVE",
"638 60 OFFCURVE",
"638 78 QCURVE SMOOTH",
"638 748 LINE SMOOTH",
"638 757 OFFCURVE",
"627 768 OFFCURVE",
"618 768 QCURVE SMOOTH",
"612 768 OFFCURVE",
"603 760 OFFCURVE",
"589 743 OFFCURVE",
"582 736 QCURVE SMOOTH",
"554 708 LINE SMOOTH",
"547 701 OFFCURVE",
"530 687 OFFCURVE",
"522 678 OFFCURVE",
"522 672 QCURVE SMOOTH",
"522 164 LINE",
"484 126 LINE SMOOTH",
"472 114 OFFCURVE",
"461 108 OFFCURVE",
"452 108 QCURVE SMOOTH",
"356 108 LINE SMOOTH",
"337 108 OFFCURVE",
"313 115 OFFCURVE",
"301 127 QCURVE SMOOTH",
"223 205 LINE",
"326 308 LINE SMOOTH",
"338 320 OFFCURVE",
"348 342 OFFCURVE",
"348 360 QCURVE SMOOTH",
"348 748 LINE SMOOTH",
"348 757 OFFCURVE",
"337 768 OFFCURVE",
"328 768 QCURVE SMOOTH",
"322 768 OFFCURVE",
"314 762 OFFCURVE",
"305 749 OFFCURVE",
"300 744 QCURVE SMOOTH",
"80 524 LINE SMOOTH",
"68 512 OFFCURVE",
"58 490 OFFCURVE",
"58 472 QCURVE SMOOTH",
"58 200 LINE SMOOTH",
"58 182 OFFCURVE",
"68 160 OFFCURVE",
"80 148 QCURVE SMOOTH",
"207 21 LINE SMOOTH",
"219 9 OFFCURVE",
"242 0 OFFCURVE",
"260 0 QCURVE SMOOTH",
"368 0 LINE SMOOTH",
"386 0 OFFCURVE",
"408 10 OFFCURVE",
"420 22 QCURVE SMOOTH",
"522 124 LINE",
"522 -2 LINE SMOOTH",
"522 -19 OFFCURVE",
"510 -40 OFFCURVE",
"496 -54 QCURVE SMOOTH",
"466 -84 LINE",
"174 -84 LINE SMOOTH",
"156 -84 OFFCURVE",
"134 -94 OFFCURVE",
"122 -106 QCURVE SMOOTH",
"70 -158 LINE SMOOTH",
"63 -165 OFFCURVE",
"58 -173 OFFCURVE",
"58 -178 QCURVE SMOOTH",
"58 -185 OFFCURVE",
"67 -192 OFFCURVE",
"74 -192 QCURVE SMOOTH",
"368 -192 LINE SMOOTH",
"386 -192 OFFCURVE",
"408 -182 OFFCURVE",
"420 -170 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"203 225 LINE",
"200 228 LINE SMOOTH",
"186 242 OFFCURVE",
"174 263 OFFCURVE",
"174 280 QCURVE SMOOTH",
"174 552 LINE SMOOTH",
"174 569 OFFCURVE",
"186 590 OFFCURVE",
"200 604 QCURVE SMOOTH",
"232 636 LINE",
"232 280 LINE SMOOTH",
"232 263 OFFCURVE",
"220 242 OFFCURVE",
"206 228 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
88 80 58 57 48 19 6 4 3 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
5 1 3 3 20 77 0 4 4 2 96 0 2 2 18 77 0 1 1 0 95 0 0 0 15 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 27 values pushed */
5 1 3 3 16 77 0 4 4 2 96 0 2 2 18 77 0 1 1 0 95 0 0 0 15 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
44 58 46 56 41 33 6 7 28 
CALL[ ]\011/* CallFunction */";
};
width = 696;
}
);
note = Y;
unicode = 0059;
},
{
glyphname = Z;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"558 692 LINE SMOOTH",
"565 699 OFFCURVE",
"570 707 OFFCURVE",
"570 712 QCURVE SMOOTH",
"570 719 OFFCURVE",
"561 726 OFFCURVE",
"554 726 QCURVE SMOOTH",
"228 726 LINE SMOOTH",
"210 726 OFFCURVE",
"188 716 OFFCURVE",
"176 704 QCURVE SMOOTH",
"92 620 LINE SMOOTH",
"87 615 OFFCURVE",
"76 607 OFFCURVE",
"68 598 OFFCURVE",
"68 592 QCURVE SMOOTH",
"68 585 OFFCURVE",
"77 576 OFFCURVE",
"84 576 QCURVE SMOOTH",
"89 576 OFFCURVE",
"97 582 OFFCURVE",
"107 595 OFFCURVE",
"112 600 QCURVE SMOOTH",
"124 612 OFFCURVE",
"135 618 OFFCURVE",
"144 618 QCURVE SMOOTH",
"444 618 LINE",
"308 482 LINE SMOOTH",
"301 475 OFFCURVE",
"294 475 QCURVE SMOOTH",
"286 475 OFFCURVE",
"276 481 QCURVE SMOOTH",
"236 501 LINE SMOOTH",
"231 504 OFFCURVE",
"211 518 OFFCURVE",
"204 518 QCURVE SMOOTH",
"198 518 OFFCURVE",
"189 510 OFFCURVE",
"175 493 OFFCURVE",
"168 486 QCURVE SMOOTH",
"92 410 LINE SMOOTH",
"87 405 OFFCURVE",
"76 397 OFFCURVE",
"68 388 OFFCURVE",
"68 382 QCURVE SMOOTH",
"68 375 OFFCURVE",
"77 366 OFFCURVE",
"84 366 QCURVE SMOOTH",
"89 366 OFFCURVE",
"97 372 OFFCURVE",
"107 385 OFFCURVE",
"112 390 QCURVE SMOOTH",
"116 394 OFFCURVE",
"125 401 OFFCURVE",
"130 401 QCURVE SMOOTH",
"138 401 OFFCURVE",
"148 395 QCURVE SMOOTH",
"190 374 LINE SMOOTH",
"194 372 OFFCURVE",
"213 358 OFFCURVE",
"220 358 QCURVE SMOOTH",
"226 358 OFFCURVE",
"235 366 OFFCURVE",
"249 383 OFFCURVE",
"256 390 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"557 106 LINE SMOOTH",
"562 111 OFFCURVE",
"573 119 OFFCURVE",
"581 128 OFFCURVE",
"581 134 QCURVE SMOOTH",
"581 141 OFFCURVE",
"572 150 OFFCURVE",
"565 150 QCURVE SMOOTH",
"560 150 OFFCURVE",
"552 144 OFFCURVE",
"542 131 OFFCURVE",
"537 126 QCURVE SMOOTH",
"525 114 OFFCURVE",
"514 108 OFFCURVE",
"505 108 QCURVE SMOOTH",
"86 108 LINE",
"278 300 LINE SMOOTH",
"285 307 OFFCURVE",
"292 307 QCURVE SMOOTH",
"300 307 OFFCURVE",
"310 301 QCURVE SMOOTH",
"352 280 LINE SMOOTH",
"356 278 OFFCURVE",
"375 264 OFFCURVE",
"382 264 QCURVE SMOOTH",
"388 264 OFFCURVE",
"397 272 OFFCURVE",
"411 289 OFFCURVE",
"418 296 QCURVE SMOOTH",
"494 372 LINE SMOOTH",
"499 377 OFFCURVE",
"510 385 OFFCURVE",
"518 394 OFFCURVE",
"518 400 QCURVE SMOOTH",
"518 407 OFFCURVE",
"509 416 OFFCURVE",
"502 416 QCURVE SMOOTH",
"497 416 OFFCURVE",
"489 410 OFFCURVE",
"479 397 OFFCURVE",
"474 392 QCURVE SMOOTH",
"470 388 OFFCURVE",
"461 381 OFFCURVE",
"456 381 QCURVE SMOOTH",
"448 381 OFFCURVE",
"438 387 QCURVE SMOOTH",
"398 407 LINE SMOOTH",
"393 410 OFFCURVE",
"373 424 OFFCURVE",
"366 424 QCURVE SMOOTH",
"360 424 OFFCURVE",
"351 416 OFFCURVE",
"337 399 OFFCURVE",
"330 392 QCURVE SMOOTH",
"-28 34 LINE SMOOTH",
"-35 27 OFFCURVE",
"-40 19 OFFCURVE",
"-40 14 QCURVE SMOOTH",
"-40 7 OFFCURVE",
"-31 0 OFFCURVE",
"-24 0 QCURVE SMOOTH",
"421 0 LINE SMOOTH",
"439 0 OFFCURVE",
"461 10 OFFCURVE",
"473 22 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 90 values pushed */
0 6 5 3 5 6 3 128 0 3 4 5 3 4 126 11 1 9 4 1 4 9 1 128 0 1 10 4 1 10 126 0 10 0 4 10 0 126 2 1 0 13 4 0 13 126 0 12 13 15 13 12 15 128 0 15 14 13 15 14 126 0 4 0 13 12 4 13 105 0 5 5 7 95 0 7 7 14 77 0 14 14 8 96 0 8 8 18 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 88 values pushed */
0 6 5 3 5 6 3 128 0 3 4 5 3 4 126 11 1 9 4 1 4 9 1 128 0 1 10 4 1 10 126 0 10 0 4 10 0 126 2 1 0 13 4 0 13 126 0 12 13 15 13 12 15 128 0 15 14 13 15 14 126 0 7 0 5 6 7 5 103 0 4 0 13 12 4 13 105 0 14 14 8 96 0 8 8 18 8 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 100 values pushed */
0 6 5 3 5 6 3 128 0 3 4 5 3 4 126 0 9 4 11 4 9 11 128 0 11 1 4 11 1 126 0 1 10 4 1 10 126 0 10 2 4 10 2 126 0 2 0 4 2 0 126 0 0 13 4 0 13 126 0 12 13 15 13 12 15 128 0 15 14 13 15 14 126 0 7 0 5 6 7 5 103 0 4 0 13 12 4 13 105 0 14 14 8 96 0 8 8 18 8 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 26 values pushed */
122 120 115 113 111 109 105 103 93 91 86 84 80 78 41 41 37 34 36 42 37 36 34 16 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 500;
}
);
note = Z;
unicode = 005A;
},
{
glyphname = a;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"206 560 OFFCURVE",
"195 550 OFFCURVE",
"181 533 OFFCURVE",
"176 528 QCURVE SMOOTH",
"108 460 LINE SMOOTH",
"103 455 OFFCURVE",
"87 442 OFFCURVE",
"76 430 OFFCURVE",
"76 424 QCURVE SMOOTH",
"76 418 OFFCURVE",
"85 408 OFFCURVE",
"92 408 QCURVE SMOOTH",
"101 408 OFFCURVE",
"114 426 OFFCURVE",
"116 428 QCURVE SMOOTH",
"120 432 LINE SMOOTH",
"125 437 OFFCURVE",
"134 444 OFFCURVE",
"140 444 QCURVE SMOOTH",
"144 444 OFFCURVE",
"156 439 OFFCURVE",
"168 432 QCURVE SMOOTH",
"240 396 LINE SMOOTH",
"250 391 OFFCURVE",
"258 381 OFFCURVE",
"258 373 QCURVE SMOOTH",
"258 360 LINE SMOOTH",
"258 352 OFFCURVE",
"250 342 OFFCURVE",
"240 337 QCURVE SMOOTH",
"72 253 LINE SMOOTH",
"65 249 OFFCURVE",
"51 245 QCURVE SMOOTH",
"38 240 OFFCURVE",
"26 232 OFFCURVE",
"26 225 QCURVE SMOOTH",
"26 136 LINE SMOOTH",
"26 127 OFFCURVE",
"12 101 OFFCURVE",
"12 96 QCURVE SMOOTH",
"12 88 OFFCURVE",
"27 79 OFFCURVE",
"43 73 QCURVE SMOOTH",
"64 64 LINE",
"128 32 LINE SMOOTH",
"149 22 OFFCURVE",
"182 0 OFFCURVE",
"188 0 QCURVE SMOOTH",
"194 0 OFFCURVE",
"203 8 OFFCURVE",
"217 25 OFFCURVE",
"224 32 QCURVE SMOOTH",
"240 48 LINE SMOOTH",
"248 56 OFFCURVE",
"256 56 QCURVE SMOOTH",
"264 56 OFFCURVE",
"272 48 QCURVE SMOOTH",
"288 32 LINE SMOOTH",
"295 25 OFFCURVE",
"309 8 OFFCURVE",
"318 0 OFFCURVE",
"324 0 QCURVE SMOOTH",
"330 0 OFFCURVE",
"339 8 OFFCURVE",
"353 25 OFFCURVE",
"360 32 QCURVE SMOOTH",
"388 60 LINE SMOOTH",
"395 67 OFFCURVE",
"412 81 OFFCURVE",
"420 90 OFFCURVE",
"420 96 QCURVE SMOOTH",
"420 102 OFFCURVE",
"412 111 OFFCURVE",
"395 125 OFFCURVE",
"388 132 QCURVE SMOOTH",
"382 138 LINE SMOOTH",
"374 146 OFFCURVE",
"374 160 QCURVE SMOOTH",
"374 416 LINE SMOOTH",
"374 429 OFFCURVE",
"382 443 QCURVE SMOOTH",
"388 457 OFFCURVE",
"388 464 QCURVE SMOOTH",
"388 471 OFFCURVE",
"377 479 OFFCURVE",
"356 486 OFFCURVE",
"352 488 QCURVE SMOOTH",
"268 530 LINE SMOOTH",
"257 536 OFFCURVE",
"245 544 QCURVE SMOOTH",
"241 546 OFFCURVE",
"218 560 OFFCURVE",
"212 560 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"158 165 LINE SMOOTH",
"142 172 OFFCURVE",
"142 184 QCURVE SMOOTH",
"142 238 LINE SMOOTH",
"142 255 OFFCURVE",
"160 262 QCURVE",
"216 290 LINE SMOOTH",
"232 298 OFFCURVE",
"242 298 QCURVE SMOOTH",
"249 298 OFFCURVE",
"258 290 OFFCURVE",
"258 282 QCURVE SMOOTH",
"258 144 LINE SMOOTH",
"258 136 OFFCURVE",
"249 128 OFFCURVE",
"242 128 QCURVE SMOOTH",
"234 128 OFFCURVE",
"216 136 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 83 values pushed */
66 1 7 4 98 56 2 6 7 2 76 0 3 5 4 5 3 4 128 0 4 7 5 4 7 126 0 7 6 5 7 6 126 0 6 1 5 6 1 126 0 1 0 5 1 0 126 8 1 5 5 17 77 2 1 0 0 18 0 78 0 0 102 100 95 93 0 92 0 91 80 79 74 72 45 43 38 36 31 29 9 7 22 
CALL[ ]\011/* CallFunction */";
};
width = 432;
}
);
note = a;
unicode = 0061;
},
{
glyphname = b;
lastChange = "2019-07-10 02:35:17 +0000";
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"390 424 LINE SMOOTH",
"390 433 OFFCURVE",
"404 459 OFFCURVE",
"404 464 QCURVE SMOOTH",
"404 472 OFFCURVE",
"389 481 OFFCURVE",
"373 487 QCURVE SMOOTH",
"352 496 LINE",
"288 528 LINE SMOOTH",
"267 538 OFFCURVE",
"234 560 OFFCURVE",
"228 560 QCURVE SMOOTH",
"222 560 OFFCURVE",
"213 552 OFFCURVE",
"199 535 OFFCURVE",
"192 528 QCURVE SMOOTH",
"176 512 LINE SMOOTH",
"175 511 OFFCURVE",
"169 505 OFFCURVE",
"166 505 QCURVE SMOOTH",
"158 505 OFFCURVE",
"158 514 QCURVE SMOOTH",
"158 640 LINE SMOOTH",
"158 666 OFFCURVE",
"177 715 QCURVE SMOOTH",
"188 743 OFFCURVE",
"188 752 QCURVE SMOOTH",
"188 759 OFFCURVE",
"179 768 OFFCURVE",
"172 768 QCURVE SMOOTH",
"166 768 OFFCURVE",
"150 758 OFFCURVE",
"127 738 OFFCURVE",
"123 735 QCURVE SMOOTH",
"98 712 OFFCURVE",
"92 712 QCURVE SMOOTH",
"81 712 OFFCURVE",
"58 721 QCURVE SMOOTH",
"51 723 OFFCURVE",
"31 728 OFFCURVE",
"28 728 QCURVE SMOOTH",
"20 728 OFFCURVE",
"12 718 OFFCURVE",
"12 712 QCURVE SMOOTH",
"12 703 OFFCURVE",
"23 679 QCURVE SMOOTH",
"42 639 OFFCURVE",
"42 612 QCURVE SMOOTH",
"42 136 LINE SMOOTH",
"42 127 OFFCURVE",
"28 101 OFFCURVE",
"28 96 QCURVE SMOOTH",
"28 87 OFFCURVE",
"43 79 OFFCURVE",
"60 75 QCURVE SMOOTH",
"69 74 OFFCURVE",
"80 70 QCURVE SMOOTH",
"224 19 LINE SMOOTH",
"235 15 OFFCURVE",
"246 8 QCURVE SMOOTH",
"248 7 OFFCURVE",
"261 0 OFFCURVE",
"268 0 QCURVE SMOOTH",
"274 0 OFFCURVE",
"283 8 OFFCURVE",
"297 25 OFFCURVE",
"304 32 QCURVE SMOOTH",
"372 100 LINE SMOOTH",
"379 107 OFFCURVE",
"396 121 OFFCURVE",
"404 130 OFFCURVE",
"404 136 QCURVE SMOOTH",
"404 141 OFFCURVE",
"390 164 OFFCURVE",
"390 176 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"274 154 LINE SMOOTH",
"274 150 OFFCURVE",
"269 145 OFFCURVE",
"266 145 QCURVE SMOOTH",
"260 145 OFFCURVE",
"244 150 QCURVE SMOOTH",
"172 174 LINE SMOOTH",
"163 177 OFFCURVE",
"158 182 OFFCURVE",
"158 188 QCURVE SMOOTH",
"158 416 LINE SMOOTH",
"158 424 OFFCURVE",
"167 432 OFFCURVE",
"174 432 QCURVE SMOOTH",
"182 432 OFFCURVE",
"200 424 QCURVE SMOOTH",
"258 395 LINE SMOOTH",
"274 388 OFFCURVE",
"274 376 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
15 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
30 1 5 1 83 1 7 6 22 1 0 7 3 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 15 values pushed */
83 1 7 6 22 1 0 7 2 76 30 1 2 1 75 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
15 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
0 4 5 6 5 4 6 128 2 1 1 1 14 77 0 5 5 17 77 0 6 6 3 97 0 3 3 20 77 0 7 7 0 97 0 0 0 18 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 4 5 6 5 4 6 128 0 1 1 14 77 0 2 2 14 77 0 5 5 17 77 0 6 6 3 97 0 3 3 20 77 0 7 7 0 97 0 0 0 18 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
0 1 3 2 3 1 2 128 0 2 5 3 2 5 126 0 4 5 6 5 4 6 128 0 5 5 17 77 0 6 6 3 97 0 3 3 16 77 0 7 7 0 97 0 0 0 18 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
90 88 80 78 63 61 55 53 45 43 38 37 34 32 42 8 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 436;
}
);
note = b;
unicode = 0062;
},
{
glyphname = c;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"174 398 LINE SMOOTH",
"174 401 OFFCURVE",
"179 406 OFFCURVE",
"182 406 QCURVE SMOOTH",
"186 406 OFFCURVE",
"198 400 QCURVE SMOOTH",
"230 384 LINE SMOOTH",
"235 382 OFFCURVE",
"255 368 OFFCURVE",
"260 368 QCURVE SMOOTH",
"265 368 OFFCURVE",
"275 376 OFFCURVE",
"289 393 OFFCURVE",
"296 400 QCURVE SMOOTH",
"324 428 LINE SMOOTH",
"331 435 OFFCURVE",
"348 449 OFFCURVE",
"356 458 OFFCURVE",
"356 464 QCURVE SMOOTH",
"356 472 OFFCURVE",
"340 483 OFFCURVE",
"325 488 QCURVE SMOOTH",
"304 497 LINE",
"242 528 LINE",
"200 551 LINE SMOOTH",
"194 555 OFFCURVE",
"185 560 OFFCURVE",
"180 560 QCURVE SMOOTH",
"174 560 OFFCURVE",
"165 552 OFFCURVE",
"151 535 OFFCURVE",
"144 528 QCURVE SMOOTH",
"76 460 LINE SMOOTH",
"69 453 OFFCURVE",
"52 439 OFFCURVE",
"44 430 OFFCURVE",
"44 424 QCURVE SMOOTH",
"44 418 OFFCURVE",
"58 396 OFFCURVE",
"58 384 QCURVE SMOOTH",
"58 144 LINE SMOOTH",
"58 131 OFFCURVE",
"48 121 QCURVE SMOOTH",
"46 119 OFFCURVE",
"28 106 OFFCURVE",
"28 96 QCURVE SMOOTH",
"28 88 OFFCURVE",
"43 79 OFFCURVE",
"59 73 QCURVE SMOOTH",
"80 64 LINE",
"148 30 LINE SMOOTH",
"159 24 OFFCURVE",
"171 16 QCURVE SMOOTH",
"175 14 OFFCURVE",
"198 0 OFFCURVE",
"204 0 QCURVE SMOOTH",
"210 0 OFFCURVE",
"221 10 OFFCURVE",
"235 27 OFFCURVE",
"240 32 QCURVE SMOOTH",
"308 100 LINE SMOOTH",
"313 105 OFFCURVE",
"329 118 OFFCURVE",
"340 130 OFFCURVE",
"340 136 QCURVE SMOOTH",
"340 142 OFFCURVE",
"331 152 OFFCURVE",
"324 152 QCURVE SMOOTH",
"315 152 OFFCURVE",
"302 134 OFFCURVE",
"300 132 QCURVE SMOOTH",
"296 128 LINE SMOOTH",
"291 123 OFFCURVE",
"282 116 OFFCURVE",
"276 116 QCURVE SMOOTH",
"272 116 OFFCURVE",
"260 121 OFFCURVE",
"248 128 QCURVE SMOOTH",
"188 158 LINE SMOOTH",
"179 162 OFFCURVE",
"174 168 OFFCURVE",
"174 176 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 49 values pushed */
81 1 1 4 1 76 0 4 3 1 3 4 1 128 0 1 0 3 1 0 126 0 0 2 3 0 2 126 0 3 3 17 77 0 2 2 18 2 78 72 70 54 52 43 21 37 5 7 25 
CALL[ ]\011/* CallFunction */";
};
width = 356;
}
);
note = c;
unicode = 0063;
},
{
glyphname = d;
lastChange = "2019-07-10 02:36:58 +0000";
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"400 640 LINE SMOOTH",
"400 666 OFFCURVE",
"419 715 QCURVE SMOOTH",
"430 743 OFFCURVE",
"430 752 QCURVE SMOOTH",
"430 759 OFFCURVE",
"421 768 OFFCURVE",
"414 768 QCURVE SMOOTH",
"408 768 OFFCURVE",
"392 758 OFFCURVE",
"369 738 OFFCURVE",
"365 735 QCURVE SMOOTH",
"340 712 OFFCURVE",
"334 712 QCURVE SMOOTH",
"323 712 OFFCURVE",
"300 721 QCURVE SMOOTH",
"293 723 OFFCURVE",
"273 728 OFFCURVE",
"270 728 QCURVE SMOOTH",
"262 728 OFFCURVE",
"254 718 OFFCURVE",
"254 712 QCURVE SMOOTH",
"254 703 OFFCURVE",
"265 679 QCURVE SMOOTH",
"284 639 OFFCURVE",
"284 612 QCURVE SMOOTH",
"284 514 LINE SMOOTH",
"284 505 OFFCURVE",
"276 505 QCURVE SMOOTH",
"273 505 OFFCURVE",
"267 511 OFFCURVE",
"266 512 QCURVE SMOOTH",
"250 528 LINE SMOOTH",
"243 535 OFFCURVE",
"229 552 OFFCURVE",
"220 560 OFFCURVE",
"214 560 QCURVE SMOOTH",
"208 560 OFFCURVE",
"175 538 OFFCURVE",
"154 528 QCURVE SMOOTH",
"90 496 LINE",
"69 487 LINE SMOOTH",
"53 481 OFFCURVE",
"38 472 OFFCURVE",
"38 464 QCURVE SMOOTH",
"38 459 OFFCURVE",
"52 433 OFFCURVE",
"52 424 QCURVE SMOOTH",
"52 136 LINE SMOOTH",
"52 127 OFFCURVE",
"38 101 OFFCURVE",
"38 96 QCURVE SMOOTH",
"38 88 OFFCURVE",
"53 79 OFFCURVE",
"69 73 QCURVE SMOOTH",
"90 64 LINE",
"154 32 LINE SMOOTH",
"175 22 OFFCURVE",
"208 0 OFFCURVE",
"214 0 QCURVE SMOOTH",
"220 0 OFFCURVE",
"229 8 OFFCURVE",
"243 25 OFFCURVE",
"250 32 QCURVE SMOOTH",
"266 48 LINE SMOOTH",
"274 56 OFFCURVE",
"282 56 QCURVE SMOOTH",
"290 56 OFFCURVE",
"298 48 QCURVE SMOOTH",
"314 32 LINE SMOOTH",
"321 25 OFFCURVE",
"335 8 OFFCURVE",
"344 0 OFFCURVE",
"350 0 QCURVE SMOOTH",
"356 0 OFFCURVE",
"365 8 OFFCURVE",
"379 25 OFFCURVE",
"386 32 QCURVE SMOOTH",
"414 60 LINE SMOOTH",
"421 67 OFFCURVE",
"438 81 OFFCURVE",
"446 90 OFFCURVE",
"446 96 QCURVE SMOOTH",
"446 102 OFFCURVE",
"438 111 OFFCURVE",
"421 125 OFFCURVE",
"414 132 QCURVE SMOOTH",
"408 138 LINE SMOOTH",
"400 146 OFFCURVE",
"400 160 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"284 144 LINE SMOOTH",
"284 136 OFFCURVE",
"275 128 OFFCURVE",
"268 128 QCURVE SMOOTH",
"260 128 OFFCURVE",
"242 136 QCURVE SMOOTH",
"184 165 LINE SMOOTH",
"168 172 OFFCURVE",
"168 184 QCURVE SMOOTH",
"168 376 LINE SMOOTH",
"168 388 OFFCURVE",
"184 395 QCURVE SMOOTH",
"242 424 LINE SMOOTH",
"260 432 OFFCURVE",
"268 432 QCURVE SMOOTH",
"275 432 OFFCURVE",
"284 424 OFFCURVE",
"284 416 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
15 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 10 values pushed */
67 1 3 5 107 1 9 8 2 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
107 1 9 8 1 76 67 1 6 1 75 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
15 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 9 8 1 8 9 1 128 0 4 0 1 0 4 1 105 0 7 7 20 77 0 3 3 17 77 0 8 8 5 97 6 1 5 5 14 77 2 1 0 0 18 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 9 8 1 8 9 1 128 0 4 0 1 0 4 1 105 0 7 7 20 77 0 6 6 14 77 0 3 3 17 77 0 8 8 5 97 0 5 5 14 77 2 1 0 0 18 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
0 6 5 3 5 6 3 128 0 9 8 1 8 9 1 128 0 5 0 8 9 5 8 105 0 4 0 1 0 4 1 105 0 7 7 16 77 0 3 3 17 77 2 1 0 0 18 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 20 values pushed */
104 102 93 91 82 80 75 74 71 69 61 59 53 51 37 37 46 10 7 25 
CALL[ ]\011/* CallFunction */";
};
width = 458;
}
);
note = d;
unicode = 0064;
},
{
glyphname = e;
lastChange = "2019-07-10 02:37:29 +0000";
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"54 144 LINE SMOOTH",
"54 131 OFFCURVE",
"44 121 QCURVE SMOOTH",
"42 119 OFFCURVE",
"24 106 OFFCURVE",
"24 96 QCURVE SMOOTH",
"24 88 OFFCURVE",
"39 79 OFFCURVE",
"55 73 QCURVE SMOOTH",
"76 64 LINE",
"144 30 LINE SMOOTH",
"155 24 OFFCURVE",
"167 16 QCURVE SMOOTH",
"171 14 OFFCURVE",
"194 0 OFFCURVE",
"200 0 QCURVE SMOOTH",
"206 0 OFFCURVE",
"217 10 OFFCURVE",
"231 27 OFFCURVE",
"236 32 QCURVE SMOOTH",
"304 100 LINE SMOOTH",
"309 105 OFFCURVE",
"325 118 OFFCURVE",
"336 130 OFFCURVE",
"336 136 QCURVE SMOOTH",
"336 142 OFFCURVE",
"327 152 OFFCURVE",
"320 152 QCURVE SMOOTH",
"311 152 OFFCURVE",
"298 134 OFFCURVE",
"296 132 QCURVE SMOOTH",
"292 128 LINE SMOOTH",
"287 123 OFFCURVE",
"278 116 OFFCURVE",
"272 116 QCURVE SMOOTH",
"268 116 OFFCURVE",
"256 121 OFFCURVE",
"244 128 QCURVE SMOOTH",
"184 158 LINE SMOOTH",
"175 162 OFFCURVE",
"170 168 OFFCURVE",
"170 176 QCURVE SMOOTH",
"170 185 LINE SMOOTH",
"170 194 OFFCURVE",
"175 203 OFFCURVE",
"184 212 QCURVE SMOOTH",
"320 348 LINE",
"323 352 OFFCURVE",
"336 362 QCURVE SMOOTH",
"342 367 OFFCURVE",
"352 379 OFFCURVE",
"352 384 QCURVE SMOOTH",
"352 390 OFFCURVE",
"344 399 OFFCURVE",
"327 413 OFFCURVE",
"320 420 QCURVE SMOOTH",
"212 528 LINE SMOOTH",
"205 535 OFFCURVE",
"191 552 OFFCURVE",
"182 560 OFFCURVE",
"176 560 QCURVE SMOOTH",
"170 560 OFFCURVE",
"161 552 OFFCURVE",
"147 535 OFFCURVE",
"140 528 QCURVE SMOOTH",
"68 456 LINE SMOOTH",
"63 451 OFFCURVE",
"49 440 OFFCURVE",
"40 430 OFFCURVE",
"40 424 QCURVE SMOOTH",
"40 418 OFFCURVE",
"54 396 OFFCURVE",
"54 384 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"170 366 LINE SMOOTH",
"170 369 OFFCURVE",
"175 374 OFFCURVE",
"178 374 QCURVE SMOOTH",
"181 374 OFFCURVE",
"188 367 QCURVE SMOOTH",
"234 321 LINE SMOOTH",
"240 315 OFFCURVE",
"240 311 QCURVE SMOOTH",
"240 307 OFFCURVE",
"234 301 QCURVE SMOOTH",
"188 255 LINE SMOOTH",
"181 248 OFFCURVE",
"178 248 QCURVE SMOOTH",
"175 248 OFFCURVE",
"170 253 OFFCURVE",
"170 256 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 43 values pushed */
89 30 2 2 0 1 76 0 2 0 1 0 2 1 128 0 1 3 0 1 3 126 0 0 0 17 77 0 3 3 18 3 78 57 55 44 43 38 36 42 4 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 352;
}
);
note = e;
unicode = 0065;
},
{
glyphname = f;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"142 -132 LINE SMOOTH",
"149 -125 OFFCURVE",
"166 -111 OFFCURVE",
"174 -102 OFFCURVE",
"174 -96 QCURVE SMOOTH",
"174 442 LINE SMOOTH",
"174 450 OFFCURVE",
"182 450 QCURVE SMOOTH",
"192 450 LINE SMOOTH",
"200 450 OFFCURVE",
"216 448 OFFCURVE",
"226 448 QCURVE SMOOTH",
"233 448 OFFCURVE",
"245 459 OFFCURVE",
"258 476 OFFCURVE",
"262 480 QCURVE SMOOTH",
"290 508 LINE SMOOTH",
"295 513 OFFCURVE",
"311 526 OFFCURVE",
"322 538 OFFCURVE",
"322 544 QCURVE SMOOTH",
"322 550 OFFCURVE",
"313 560 OFFCURVE",
"306 560 QCURVE SMOOTH",
"299 560 OFFCURVE",
"284 558 OFFCURVE",
"276 558 QCURVE SMOOTH",
"182 558 LINE SMOOTH",
"174 558 OFFCURVE",
"174 566 QCURVE SMOOTH",
"174 606 LINE SMOOTH",
"174 609 OFFCURVE",
"179 614 OFFCURVE",
"182 614 QCURVE SMOOTH",
"186 614 OFFCURVE",
"198 608 QCURVE SMOOTH",
"230 592 LINE SMOOTH",
"235 590 OFFCURVE",
"255 576 OFFCURVE",
"260 576 QCURVE SMOOTH",
"265 576 OFFCURVE",
"275 584 OFFCURVE",
"289 601 OFFCURVE",
"296 608 QCURVE SMOOTH",
"324 636 LINE SMOOTH",
"331 643 OFFCURVE",
"348 657 OFFCURVE",
"356 666 OFFCURVE",
"356 672 QCURVE SMOOTH",
"356 680 OFFCURVE",
"340 691 OFFCURVE",
"325 696 QCURVE SMOOTH",
"304 705 LINE",
"242 736 LINE",
"200 759 LINE SMOOTH",
"194 763 OFFCURVE",
"185 768 OFFCURVE",
"180 768 QCURVE SMOOTH",
"174 768 OFFCURVE",
"165 760 OFFCURVE",
"151 743 OFFCURVE",
"144 736 QCURVE SMOOTH",
"76 668 LINE SMOOTH",
"69 661 OFFCURVE",
"52 647 OFFCURVE",
"44 638 OFFCURVE",
"44 632 QCURVE SMOOTH",
"44 626 OFFCURVE",
"58 604 OFFCURVE",
"58 592 QCURVE SMOOTH",
"58 536 LINE SMOOTH",
"58 530 OFFCURVE",
"54 524 OFFCURVE",
"50 520 QCURVE SMOOTH",
"30 500 LINE SMOOTH",
"25 495 OFFCURVE",
"9 482 OFFCURVE",
"-2 470 OFFCURVE",
"-2 464 QCURVE SMOOTH",
"-2 458 OFFCURVE",
"7 448 OFFCURVE",
"14 448 QCURVE SMOOTH",
"21 448 OFFCURVE",
"36 450 OFFCURVE",
"44 450 QCURVE SMOOTH",
"50 450 LINE SMOOTH",
"58 450 OFFCURVE",
"58 442 QCURVE SMOOTH",
"58 -172 LINE SMOOTH",
"58 -181 OFFCURVE",
"69 -192 OFFCURVE",
"78 -192 QCURVE SMOOTH",
"84 -192 OFFCURVE",
"93 -184 OFFCURVE",
"107 -167 OFFCURVE",
"114 -160 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
65 1 5 4 90 89 7 3 0 1 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
0 4 3 5 3 4 5 128 0 3 3 20 77 8 7 2 3 1 1 5 97 6 1 5 5 17 77 0 0 0 15 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 4 3 5 3 4 5 128 0 3 3 16 77 8 7 2 3 1 1 5 97 6 1 5 5 17 77 0 0 0 15 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
87 85 84 82 72 70 68 67 56 54 38 36 33 37 34 9 7 25 
CALL[ ]\011/* CallFunction */";
};
width = 232;
}
);
note = f;
unicode = 0066;
},
{
glyphname = g;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"376 -40 LINE SMOOTH",
"383 -33 OFFCURVE",
"400 -19 OFFCURVE",
"408 -10 OFFCURVE",
"408 -4 QCURVE SMOOTH",
"408 3 OFFCURVE",
"406 20 OFFCURVE",
"406 32 QCURVE SMOOTH",
"406 400 LINE SMOOTH",
"406 414 OFFCURVE",
"414 422 QCURVE SMOOTH",
"420 428 LINE SMOOTH",
"427 435 OFFCURVE",
"444 449 OFFCURVE",
"452 458 OFFCURVE",
"452 464 QCURVE SMOOTH",
"452 470 OFFCURVE",
"444 479 OFFCURVE",
"427 493 OFFCURVE",
"420 500 QCURVE SMOOTH",
"392 528 LINE SMOOTH",
"385 535 OFFCURVE",
"371 552 OFFCURVE",
"362 560 OFFCURVE",
"356 560 QCURVE SMOOTH",
"350 560 OFFCURVE",
"341 552 OFFCURVE",
"327 535 OFFCURVE",
"320 528 QCURVE SMOOTH",
"304 512 LINE SMOOTH",
"296 504 OFFCURVE",
"288 504 QCURVE SMOOTH",
"280 504 OFFCURVE",
"272 512 QCURVE SMOOTH",
"256 528 LINE SMOOTH",
"249 535 OFFCURVE",
"235 552 OFFCURVE",
"226 560 OFFCURVE",
"220 560 QCURVE SMOOTH",
"214 560 OFFCURVE",
"181 538 OFFCURVE",
"160 528 QCURVE SMOOTH",
"96 496 LINE",
"75 487 LINE SMOOTH",
"59 481 OFFCURVE",
"44 472 OFFCURVE",
"44 464 QCURVE SMOOTH",
"44 459 OFFCURVE",
"58 433 OFFCURVE",
"58 424 QCURVE SMOOTH",
"58 136 LINE SMOOTH",
"58 127 OFFCURVE",
"44 101 OFFCURVE",
"44 96 QCURVE SMOOTH",
"44 88 OFFCURVE",
"59 79 OFFCURVE",
"75 73 QCURVE SMOOTH",
"96 64 LINE",
"160 32 LINE SMOOTH",
"181 22 OFFCURVE",
"214 0 OFFCURVE",
"220 0 QCURVE SMOOTH",
"226 0 OFFCURVE",
"235 8 OFFCURVE",
"249 25 OFFCURVE",
"256 32 QCURVE SMOOTH",
"272 48 LINE SMOOTH",
"273 49 OFFCURVE",
"279 55 OFFCURVE",
"282 55 QCURVE SMOOTH",
"290 55 OFFCURVE",
"290 46 QCURVE SMOOTH",
"290 -62 LINE SMOOTH",
"290 -71 OFFCURVE",
"283 -71 QCURVE SMOOTH",
"280 -71 OFFCURVE",
"266 -64 QCURVE SMOOTH",
"170 -16 LINE SMOOTH",
"163 -13 OFFCURVE",
"145 0 OFFCURVE",
"140 0 QCURVE SMOOTH",
"135 0 OFFCURVE",
"125 -8 OFFCURVE",
"111 -25 OFFCURVE",
"104 -32 QCURVE SMOOTH",
"76 -60 LINE SMOOTH",
"69 -67 OFFCURVE",
"52 -81 OFFCURVE",
"44 -90 OFFCURVE",
"44 -96 QCURVE SMOOTH",
"44 -104 OFFCURVE",
"60 -115 OFFCURVE",
"75 -120 QCURVE SMOOTH",
"96 -129 LINE",
"158 -160 LINE",
"200 -183 LINE SMOOTH",
"206 -187 OFFCURVE",
"215 -192 OFFCURVE",
"220 -192 QCURVE SMOOTH",
"226 -192 OFFCURVE",
"235 -184 OFFCURVE",
"249 -167 OFFCURVE",
"256 -160 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"191 165 LINE SMOOTH",
"175 172 OFFCURVE",
"175 184 QCURVE SMOOTH",
"175 376 LINE SMOOTH",
"175 388 OFFCURVE",
"191 395 QCURVE SMOOTH",
"249 424 LINE SMOOTH",
"267 432 OFFCURVE",
"275 432 QCURVE SMOOTH",
"282 432 OFFCURVE",
"291 424 OFFCURVE",
"291 416 QCURVE SMOOTH",
"291 144 LINE SMOOTH",
"291 136 OFFCURVE",
"282 128 OFFCURVE",
"275 128 QCURVE SMOOTH",
"267 128 OFFCURVE",
"249 136 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 83 values pushed */
108 1 8 9 1 76 0 6 5 9 5 6 9 128 0 9 8 5 9 8 126 0 1 4 2 4 1 2 128 0 2 0 4 2 0 126 0 8 0 3 4 8 3 106 7 1 5 5 17 77 0 4 4 18 77 0 0 0 15 0 78 112 110 105 103 78 76 71 69 64 62 41 39 33 31 28 26 22 20 34 10 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 464;
}
);
note = g;
unicode = 0067;
},
{
glyphname = h;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"242 -144 LINE SMOOTH",
"238 -148 OFFCURVE",
"219 -161 OFFCURVE",
"210 -170 OFFCURVE",
"210 -176 QCURVE SMOOTH",
"210 -182 OFFCURVE",
"219 -192 OFFCURVE",
"226 -192 QCURVE SMOOTH",
"234 -192 OFFCURVE",
"254 -182 OFFCURVE",
"258 -180 QCURVE SMOOTH",
"313 -153 OFFCURVE",
"406 -38 OFFCURVE",
"406 44 QCURVE SMOOTH",
"406 424 LINE SMOOTH",
"406 433 OFFCURVE",
"420 459 OFFCURVE",
"420 464 QCURVE SMOOTH",
"420 472 OFFCURVE",
"405 481 OFFCURVE",
"389 487 QCURVE SMOOTH",
"368 496 LINE",
"304 528 LINE SMOOTH",
"283 538 OFFCURVE",
"250 560 OFFCURVE",
"244 560 QCURVE SMOOTH",
"238 560 OFFCURVE",
"229 552 OFFCURVE",
"215 535 OFFCURVE",
"208 528 QCURVE SMOOTH",
"192 512 LINE SMOOTH",
"191 511 OFFCURVE",
"185 505 OFFCURVE",
"182 505 QCURVE SMOOTH",
"174 505 OFFCURVE",
"174 514 QCURVE SMOOTH",
"174 640 LINE SMOOTH",
"174 666 OFFCURVE",
"193 715 QCURVE SMOOTH",
"204 743 OFFCURVE",
"204 752 QCURVE SMOOTH",
"204 759 OFFCURVE",
"195 768 OFFCURVE",
"188 768 QCURVE SMOOTH",
"182 768 OFFCURVE",
"166 758 OFFCURVE",
"143 738 OFFCURVE",
"139 735 QCURVE SMOOTH",
"114 712 OFFCURVE",
"108 712 QCURVE SMOOTH",
"97 712 OFFCURVE",
"74 721 QCURVE SMOOTH",
"67 723 OFFCURVE",
"47 728 OFFCURVE",
"44 728 QCURVE SMOOTH",
"36 728 OFFCURVE",
"28 718 OFFCURVE",
"28 712 QCURVE SMOOTH",
"28 703 OFFCURVE",
"39 679 QCURVE SMOOTH",
"58 639 OFFCURVE",
"58 612 QCURVE SMOOTH",
"58 144 LINE SMOOTH",
"58 131 OFFCURVE",
"48 121 QCURVE SMOOTH",
"46 119 OFFCURVE",
"28 106 OFFCURVE",
"28 96 QCURVE SMOOTH",
"28 90 OFFCURVE",
"36 81 OFFCURVE",
"53 67 OFFCURVE",
"60 60 QCURVE SMOOTH",
"88 32 LINE SMOOTH",
"95 25 OFFCURVE",
"109 8 OFFCURVE",
"118 0 OFFCURVE",
"124 0 QCURVE SMOOTH",
"130 0 OFFCURVE",
"139 8 OFFCURVE",
"153 25 OFFCURVE",
"160 32 QCURVE SMOOTH",
"188 60 LINE SMOOTH",
"195 67 OFFCURVE",
"212 81 OFFCURVE",
"220 90 OFFCURVE",
"220 96 QCURVE SMOOTH",
"220 102 OFFCURVE",
"212 111 OFFCURVE",
"195 125 OFFCURVE",
"188 132 QCURVE SMOOTH",
"182 138 LINE SMOOTH",
"174 146 OFFCURVE",
"174 160 QCURVE SMOOTH",
"174 416 LINE SMOOTH",
"174 424 OFFCURVE",
"183 432 OFFCURVE",
"190 432 QCURVE SMOOTH",
"198 432 OFFCURVE",
"216 424 QCURVE SMOOTH",
"274 395 LINE SMOOTH",
"290 388 OFFCURVE",
"290 376 QCURVE SMOOTH",
"290 32 LINE SMOOTH",
"290 -36 OFFCURVE",
"283 -104 OFFCURVE",
"257 -129 OFFCURVE",
"254 -132 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
15 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
PUSHB[ ]\011/* 6 values pushed */
48 1 6 2 1 76 
ELSE[ ]\011/* Else */
PUSHB[ ]\011/* 5 values pushed */
48 1 3 1 75 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
15 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
0 5 6 0 6 5 0 128 3 1 2 2 14 77 0 6 6 17 77 0 0 0 4 97 0 4 4 20 77 0 1 1 18 77 0 7 7 15 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 5 6 0 6 5 0 128 0 2 2 14 77 0 3 3 14 77 0 6 6 17 77 0 0 0 4 97 0 4 4 20 77 0 1 1 18 77 0 7 7 15 7 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
0 2 4 3 4 2 3 128 0 3 6 4 3 6 126 0 5 6 0 6 5 0 128 0 6 6 17 77 0 0 0 4 97 0 4 4 16 77 0 1 1 18 77 0 7 7 15 7 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
99 97 81 79 73 71 63 61 56 55 52 50 30 28 40 8 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 464;
}
);
note = h;
unicode = 0068;
},
{
glyphname = i;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"80 600 LINE SMOOTH",
"85 595 OFFCURVE",
"94 582 OFFCURVE",
"102 576 OFFCURVE",
"108 576 QCURVE SMOOTH",
"114 576 OFFCURVE",
"122 582 OFFCURVE",
"131 595 OFFCURVE",
"136 600 QCURVE SMOOTH",
"180 644 LINE SMOOTH",
"185 649 OFFCURVE",
"198 658 OFFCURVE",
"204 666 OFFCURVE",
"204 672 QCURVE SMOOTH",
"204 678 OFFCURVE",
"198 686 OFFCURVE",
"185 695 OFFCURVE",
"180 700 QCURVE SMOOTH",
"136 744 LINE SMOOTH",
"131 749 OFFCURVE",
"122 762 OFFCURVE",
"114 768 OFFCURVE",
"108 768 QCURVE SMOOTH",
"102 768 OFFCURVE",
"94 762 OFFCURVE",
"85 749 OFFCURVE",
"80 744 QCURVE SMOOTH",
"36 700 LINE SMOOTH",
"31 695 OFFCURVE",
"18 686 OFFCURVE",
"12 678 OFFCURVE",
"12 672 QCURVE SMOOTH",
"12 666 OFFCURVE",
"18 658 OFFCURVE",
"31 649 OFFCURVE",
"36 644 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"58 144 LINE SMOOTH",
"58 137 OFFCURVE",
"56 128 OFFCURVE",
"52 124 QCURVE SMOOTH",
"47 119 OFFCURVE",
"34 110 OFFCURVE",
"28 102 OFFCURVE",
"28 96 QCURVE SMOOTH",
"28 90 OFFCURVE",
"34 82 OFFCURVE",
"47 73 OFFCURVE",
"52 68 QCURVE SMOOTH",
"96 24 LINE SMOOTH",
"101 19 OFFCURVE",
"110 6 OFFCURVE",
"118 0 OFFCURVE",
"124 0 QCURVE SMOOTH",
"130 0 OFFCURVE",
"138 6 OFFCURVE",
"147 19 OFFCURVE",
"152 24 QCURVE SMOOTH",
"196 68 LINE SMOOTH",
"201 73 OFFCURVE",
"214 82 OFFCURVE",
"220 90 OFFCURVE",
"220 96 QCURVE SMOOTH",
"220 102 OFFCURVE",
"214 110 OFFCURVE",
"201 119 OFFCURVE",
"196 124 QCURVE SMOOTH",
"185 135 OFFCURVE",
"174 157 OFFCURVE",
"174 173 QCURVE SMOOTH",
"174 416 LINE SMOOTH",
"174 423 OFFCURVE",
"176 432 OFFCURVE",
"180 436 QCURVE SMOOTH",
"185 441 OFFCURVE",
"198 450 OFFCURVE",
"204 458 OFFCURVE",
"204 464 QCURVE SMOOTH",
"204 470 OFFCURVE",
"198 478 OFFCURVE",
"185 487 OFFCURVE",
"180 492 QCURVE SMOOTH",
"136 536 LINE SMOOTH",
"131 541 OFFCURVE",
"122 554 OFFCURVE",
"114 560 OFFCURVE",
"108 560 QCURVE SMOOTH",
"102 560 OFFCURVE",
"94 554 OFFCURVE",
"85 541 OFFCURVE",
"80 536 QCURVE SMOOTH",
"36 492 LINE SMOOTH",
"31 487 OFFCURVE",
"18 478 OFFCURVE",
"12 470 OFFCURVE",
"12 464 QCURVE SMOOTH",
"12 458 OFFCURVE",
"18 450 OFFCURVE",
"31 441 OFFCURVE",
"36 436 QCURVE SMOOTH",
"47 425 OFFCURVE",
"58 404 OFFCURVE",
"58 388 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 1 1 0 97 0 0 0 20 77 0 2 2 17 77 0 3 3 18 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
0 1 1 0 97 0 0 0 16 77 0 2 2 17 77 0 3 3 18 3 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
85 83 52 50 31 29 43 4 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 232;
}
);
note = i;
unicode = 0069;
},
{
glyphname = j;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"12 666 OFFCURVE",
"20 657 OFFCURVE",
"37 643 OFFCURVE",
"44 636 QCURVE SMOOTH",
"72 608 LINE SMOOTH",
"79 601 OFFCURVE",
"93 584 OFFCURVE",
"102 576 OFFCURVE",
"108 576 QCURVE SMOOTH",
"114 576 OFFCURVE",
"123 584 OFFCURVE",
"137 601 OFFCURVE",
"144 608 QCURVE SMOOTH",
"172 636 LINE SMOOTH",
"179 643 OFFCURVE",
"196 657 OFFCURVE",
"204 666 OFFCURVE",
"204 672 QCURVE SMOOTH",
"204 678 OFFCURVE",
"196 687 OFFCURVE",
"179 701 OFFCURVE",
"172 708 QCURVE SMOOTH",
"144 736 LINE SMOOTH",
"137 743 OFFCURVE",
"123 760 OFFCURVE",
"114 768 OFFCURVE",
"108 768 QCURVE SMOOTH",
"102 768 OFFCURVE",
"93 760 OFFCURVE",
"79 743 OFFCURVE",
"72 736 QCURVE SMOOTH",
"44 708 LINE SMOOTH",
"37 701 OFFCURVE",
"20 687 OFFCURVE",
"12 678 OFFCURVE",
"12 672 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"10 -144 LINE SMOOTH",
"6 -148 OFFCURVE",
"-13 -161 OFFCURVE",
"-22 -170 OFFCURVE",
"-22 -176 QCURVE SMOOTH",
"-22 -182 OFFCURVE",
"-13 -192 OFFCURVE",
"-6 -192 QCURVE SMOOTH",
"2 -192 OFFCURVE",
"22 -182 OFFCURVE",
"26 -180 QCURVE SMOOTH",
"81 -153 OFFCURVE",
"174 -38 OFFCURVE",
"174 44 QCURVE SMOOTH",
"174 416 LINE SMOOTH",
"174 429 OFFCURVE",
"184 439 QCURVE SMOOTH",
"186 441 OFFCURVE",
"204 454 OFFCURVE",
"204 464 QCURVE SMOOTH",
"204 470 OFFCURVE",
"196 479 OFFCURVE",
"179 493 OFFCURVE",
"172 500 QCURVE SMOOTH",
"144 528 LINE SMOOTH",
"137 535 OFFCURVE",
"123 552 OFFCURVE",
"114 560 OFFCURVE",
"108 560 QCURVE SMOOTH",
"102 560 OFFCURVE",
"93 552 OFFCURVE",
"79 535 OFFCURVE",
"72 528 QCURVE SMOOTH",
"44 500 LINE SMOOTH",
"37 493 OFFCURVE",
"20 479 OFFCURVE",
"12 470 OFFCURVE",
"12 464 QCURVE SMOOTH",
"12 458 OFFCURVE",
"20 449 OFFCURVE",
"37 435 OFFCURVE",
"44 428 QCURVE SMOOTH",
"50 422 LINE SMOOTH",
"58 414 OFFCURVE",
"58 400 QCURVE SMOOTH",
"58 32 LINE SMOOTH",
"58 -36 OFFCURVE",
"51 -104 OFFCURVE",
"25 -129 OFFCURVE",
"22 -132 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 1 1 0 97 0 0 0 20 77 0 2 2 17 77 0 3 3 15 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
0 1 1 0 97 0 0 0 16 77 0 2 2 17 77 0 3 3 15 3 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
78 76 57 55 27 25 39 4 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 232;
}
);
note = j;
unicode = 006A;
},
{
glyphname = k;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"362 0 OFFCURVE",
"371 8 OFFCURVE",
"385 25 OFFCURVE",
"392 32 QCURVE SMOOTH",
"420 60 LINE SMOOTH",
"427 67 OFFCURVE",
"444 81 OFFCURVE",
"452 90 OFFCURVE",
"452 96 QCURVE SMOOTH",
"452 102 OFFCURVE",
"444 111 OFFCURVE",
"427 125 OFFCURVE",
"420 132 QCURVE SMOOTH",
"414 138 LINE SMOOTH",
"406 146 OFFCURVE",
"406 160 QCURVE SMOOTH",
"406 240 LINE SMOOTH",
"406 253 OFFCURVE",
"416 263 QCURVE SMOOTH",
"418 265 OFFCURVE",
"436 278 OFFCURVE",
"436 288 QCURVE SMOOTH",
"436 294 OFFCURVE",
"428 303 OFFCURVE",
"411 317 OFFCURVE",
"404 324 QCURVE SMOOTH",
"376 352 LINE SMOOTH",
"374 354 OFFCURVE",
"359 372 QCURVE",
"374 390 OFFCURVE",
"376 392 QCURVE SMOOTH",
"404 420 LINE SMOOTH",
"411 427 OFFCURVE",
"426 439 OFFCURVE",
"436 450 OFFCURVE",
"436 456 QCURVE SMOOTH",
"436 464 OFFCURVE",
"421 473 OFFCURVE",
"405 479 QCURVE SMOOTH",
"384 488 LINE",
"304 528 LINE SMOOTH",
"283 538 OFFCURVE",
"250 560 OFFCURVE",
"244 560 QCURVE SMOOTH",
"238 560 OFFCURVE",
"229 552 OFFCURVE",
"215 535 OFFCURVE",
"208 528 QCURVE SMOOTH",
"192 512 LINE SMOOTH",
"191 511 OFFCURVE",
"185 505 OFFCURVE",
"182 505 QCURVE SMOOTH",
"174 505 OFFCURVE",
"174 514 QCURVE SMOOTH",
"174 640 LINE SMOOTH",
"174 666 OFFCURVE",
"193 715 QCURVE SMOOTH",
"204 743 OFFCURVE",
"204 752 QCURVE SMOOTH",
"204 759 OFFCURVE",
"195 768 OFFCURVE",
"188 768 QCURVE SMOOTH",
"182 768 OFFCURVE",
"166 758 OFFCURVE",
"143 738 OFFCURVE",
"139 735 QCURVE SMOOTH",
"114 712 OFFCURVE",
"108 712 QCURVE SMOOTH",
"97 712 OFFCURVE",
"74 721 QCURVE SMOOTH",
"67 723 OFFCURVE",
"47 728 OFFCURVE",
"44 728 QCURVE SMOOTH",
"36 728 OFFCURVE",
"28 718 OFFCURVE",
"28 712 QCURVE SMOOTH",
"28 703 OFFCURVE",
"39 679 QCURVE SMOOTH",
"58 639 OFFCURVE",
"58 612 QCURVE SMOOTH",
"58 144 LINE SMOOTH",
"58 131 OFFCURVE",
"48 121 QCURVE SMOOTH",
"46 119 OFFCURVE",
"28 106 OFFCURVE",
"28 96 QCURVE SMOOTH",
"28 90 OFFCURVE",
"36 81 OFFCURVE",
"53 67 OFFCURVE",
"60 60 QCURVE SMOOTH",
"88 32 LINE SMOOTH",
"95 25 OFFCURVE",
"109 8 OFFCURVE",
"118 0 OFFCURVE",
"124 0 QCURVE SMOOTH",
"130 0 OFFCURVE",
"139 8 OFFCURVE",
"153 25 OFFCURVE",
"160 32 QCURVE SMOOTH",
"188 60 LINE SMOOTH",
"195 67 OFFCURVE",
"212 81 OFFCURVE",
"220 90 OFFCURVE",
"220 96 QCURVE SMOOTH",
"220 102 OFFCURVE",
"212 111 OFFCURVE",
"195 125 OFFCURVE",
"188 132 QCURVE SMOOTH",
"182 138 LINE SMOOTH",
"174 146 OFFCURVE",
"174 160 QCURVE SMOOTH",
"174 416 LINE SMOOTH",
"174 424 OFFCURVE",
"183 432 OFFCURVE",
"190 432 QCURVE SMOOTH",
"198 432 OFFCURVE",
"216 424 QCURVE SMOOTH",
"280 392 LINE SMOOTH",
"308 377 OFFCURVE",
"319 369 QCURVE",
"311 359 OFFCURVE",
"304 352 QCURVE SMOOTH",
"276 324 LINE SMOOTH",
"269 317 OFFCURVE",
"252 303 OFFCURVE",
"244 294 OFFCURVE",
"244 288 QCURVE SMOOTH",
"244 282 OFFCURVE",
"252 273 OFFCURVE",
"269 259 OFFCURVE",
"276 252 QCURVE SMOOTH",
"282 246 LINE SMOOTH",
"290 238 OFFCURVE",
"290 224 QCURVE SMOOTH",
"290 144 LINE SMOOTH",
"290 131 OFFCURVE",
"280 121 QCURVE SMOOTH",
"278 119 OFFCURVE",
"260 106 OFFCURVE",
"260 96 QCURVE SMOOTH",
"260 90 OFFCURVE",
"268 81 OFFCURVE",
"285 67 OFFCURVE",
"292 60 QCURVE SMOOTH",
"320 32 LINE SMOOTH",
"327 25 OFFCURVE",
"341 8 OFFCURVE",
"350 0 OFFCURVE",
"356 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
15 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
72 1 6 2 119 28 2 1 0 2 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 12 values pushed */
119 28 2 1 0 1 76 72 1 3 1 75 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
15 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 5 6 0 6 5 0 128 3 1 2 2 14 77 0 6 6 17 77 0 0 0 4 97 0 4 4 20 77 8 7 2 1 1 18 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
0 5 6 0 6 5 0 128 0 2 2 14 77 0 3 3 14 77 0 6 6 17 77 0 0 0 4 97 0 4 4 20 77 8 7 2 1 1 18 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 46 values pushed */
0 2 4 3 4 2 3 128 0 3 6 4 3 6 126 0 5 6 0 6 5 0 128 0 6 6 17 77 0 0 0 4 97 0 4 4 16 77 8 7 2 1 1 18 1 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 23 values pushed */
0 0 0 148 0 147 105 103 97 95 87 85 80 79 76 74 54 52 34 32 9 7 22 
CALL[ ]\011/* CallFunction */";
};
width = 464;
}
);
note = k;
unicode = 006B;
},
{
glyphname = l;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"188 60 LINE SMOOTH",
"195 67 OFFCURVE",
"212 81 OFFCURVE",
"220 90 OFFCURVE",
"220 96 QCURVE SMOOTH",
"220 102 OFFCURVE",
"212 111 OFFCURVE",
"195 125 OFFCURVE",
"188 132 QCURVE SMOOTH",
"182 138 LINE SMOOTH",
"174 146 OFFCURVE",
"174 160 QCURVE SMOOTH",
"174 640 LINE SMOOTH",
"174 666 OFFCURVE",
"193 715 QCURVE SMOOTH",
"204 743 OFFCURVE",
"204 752 QCURVE SMOOTH",
"204 759 OFFCURVE",
"195 768 OFFCURVE",
"188 768 QCURVE SMOOTH",
"182 768 OFFCURVE",
"166 758 OFFCURVE",
"143 738 OFFCURVE",
"139 735 QCURVE SMOOTH",
"114 712 OFFCURVE",
"108 712 QCURVE SMOOTH",
"97 712 OFFCURVE",
"74 721 QCURVE SMOOTH",
"67 723 OFFCURVE",
"47 728 OFFCURVE",
"44 728 QCURVE SMOOTH",
"36 728 OFFCURVE",
"28 718 OFFCURVE",
"28 712 QCURVE SMOOTH",
"28 703 OFFCURVE",
"39 679 QCURVE SMOOTH",
"58 639 OFFCURVE",
"58 612 QCURVE SMOOTH",
"58 144 LINE SMOOTH",
"58 131 OFFCURVE",
"48 121 QCURVE SMOOTH",
"46 119 OFFCURVE",
"28 106 OFFCURVE",
"28 96 QCURVE SMOOTH",
"28 90 OFFCURVE",
"36 81 OFFCURVE",
"53 67 OFFCURVE",
"60 60 QCURVE SMOOTH",
"88 32 LINE SMOOTH",
"95 25 OFFCURVE",
"109 8 OFFCURVE",
"118 0 OFFCURVE",
"124 0 QCURVE SMOOTH",
"130 0 OFFCURVE",
"139 8 OFFCURVE",
"153 25 OFFCURVE",
"160 32 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
15 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
PUSHB[ ]\011/* 6 values pushed */
22 1 0 1 1 76 
ELSE[ ]\011/* Else */
PUSHB[ ]\011/* 5 values pushed */
22 1 2 1 75 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
15 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
0 3 3 20 77 2 1 1 1 14 77 0 0 0 18 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
19 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 3 3 20 77 0 1 1 14 77 0 2 2 14 77 0 0 0 18 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 26 values pushed */
0 1 3 2 3 1 2 128 0 2 0 3 2 0 126 0 3 3 16 77 0 0 0 18 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
37 35 30 29 26 24 34 4 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 232;
}
);
note = l;
unicode = 006C;
},
{
glyphname = m;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"652 60 LINE SMOOTH",
"659 67 OFFCURVE",
"676 81 OFFCURVE",
"684 90 OFFCURVE",
"684 96 QCURVE SMOOTH",
"684 102 OFFCURVE",
"676 111 OFFCURVE",
"659 125 OFFCURVE",
"652 132 QCURVE SMOOTH",
"646 138 LINE SMOOTH",
"638 146 OFFCURVE",
"638 160 QCURVE SMOOTH",
"638 424 LINE SMOOTH",
"638 433 OFFCURVE",
"652 459 OFFCURVE",
"652 464 QCURVE SMOOTH",
"652 472 OFFCURVE",
"637 481 OFFCURVE",
"621 487 QCURVE SMOOTH",
"600 496 LINE",
"536 528 LINE SMOOTH",
"515 538 OFFCURVE",
"482 560 OFFCURVE",
"476 560 QCURVE SMOOTH",
"470 560 OFFCURVE",
"461 552 OFFCURVE",
"447 535 OFFCURVE",
"440 528 QCURVE SMOOTH",
"406 494 LINE SMOOTH",
"400 488 OFFCURVE",
"392 486 QCURVE",
"386 489 OFFCURVE",
"374 493 OFFCURVE",
"368 496 QCURVE SMOOTH",
"304 528 LINE SMOOTH",
"283 538 OFFCURVE",
"250 560 OFFCURVE",
"244 560 QCURVE SMOOTH",
"238 560 OFFCURVE",
"229 552 OFFCURVE",
"215 535 OFFCURVE",
"208 528 QCURVE SMOOTH",
"192 512 LINE SMOOTH",
"184 504 OFFCURVE",
"176 504 QCURVE SMOOTH",
"168 504 OFFCURVE",
"160 512 QCURVE SMOOTH",
"144 528 LINE SMOOTH",
"137 535 OFFCURVE",
"123 552 OFFCURVE",
"114 560 OFFCURVE",
"108 560 QCURVE SMOOTH",
"102 560 OFFCURVE",
"93 552 OFFCURVE",
"79 535 OFFCURVE",
"72 528 QCURVE SMOOTH",
"44 500 LINE SMOOTH",
"37 493 OFFCURVE",
"20 479 OFFCURVE",
"12 470 OFFCURVE",
"12 464 QCURVE SMOOTH",
"12 458 OFFCURVE",
"20 449 OFFCURVE",
"37 435 OFFCURVE",
"44 428 QCURVE SMOOTH",
"50 422 LINE SMOOTH",
"58 414 OFFCURVE",
"58 400 QCURVE SMOOTH",
"58 144 LINE SMOOTH",
"58 131 OFFCURVE",
"48 121 QCURVE SMOOTH",
"46 119 OFFCURVE",
"28 106 OFFCURVE",
"28 96 QCURVE SMOOTH",
"28 90 OFFCURVE",
"36 81 OFFCURVE",
"53 67 OFFCURVE",
"60 60 QCURVE SMOOTH",
"88 32 LINE SMOOTH",
"95 25 OFFCURVE",
"109 8 OFFCURVE",
"118 0 OFFCURVE",
"124 0 QCURVE SMOOTH",
"130 0 OFFCURVE",
"139 8 OFFCURVE",
"153 25 OFFCURVE",
"160 32 QCURVE SMOOTH",
"188 60 LINE SMOOTH",
"195 67 OFFCURVE",
"212 81 OFFCURVE",
"220 90 OFFCURVE",
"220 96 QCURVE SMOOTH",
"220 102 OFFCURVE",
"212 111 OFFCURVE",
"195 125 OFFCURVE",
"188 132 QCURVE SMOOTH",
"182 138 LINE SMOOTH",
"174 146 OFFCURVE",
"174 160 QCURVE SMOOTH",
"174 416 LINE SMOOTH",
"174 424 OFFCURVE",
"183 432 OFFCURVE",
"190 432 QCURVE SMOOTH",
"198 432 OFFCURVE",
"216 424 QCURVE SMOOTH",
"274 395 LINE SMOOTH",
"290 388 OFFCURVE",
"290 376 QCURVE SMOOTH",
"290 144 LINE SMOOTH",
"290 131 OFFCURVE",
"280 121 QCURVE SMOOTH",
"278 119 OFFCURVE",
"260 106 OFFCURVE",
"260 96 QCURVE SMOOTH",
"260 90 OFFCURVE",
"268 81 OFFCURVE",
"285 67 OFFCURVE",
"292 60 QCURVE SMOOTH",
"320 32 LINE SMOOTH",
"327 25 OFFCURVE",
"341 8 OFFCURVE",
"350 0 OFFCURVE",
"356 0 QCURVE SMOOTH",
"362 0 OFFCURVE",
"371 8 OFFCURVE",
"385 25 OFFCURVE",
"392 32 QCURVE SMOOTH",
"420 60 LINE SMOOTH",
"427 67 OFFCURVE",
"444 81 OFFCURVE",
"452 90 OFFCURVE",
"452 96 QCURVE SMOOTH",
"452 102 OFFCURVE",
"444 111 OFFCURVE",
"427 125 OFFCURVE",
"420 132 QCURVE SMOOTH",
"414 138 LINE SMOOTH",
"406 146 OFFCURVE",
"406 160 QCURVE SMOOTH",
"406 416 LINE SMOOTH",
"406 424 OFFCURVE",
"415 432 OFFCURVE",
"422 432 QCURVE SMOOTH",
"430 432 OFFCURVE",
"448 424 QCURVE SMOOTH",
"506 395 LINE SMOOTH",
"522 388 OFFCURVE",
"522 376 QCURVE SMOOTH",
"522 144 LINE SMOOTH",
"522 131 OFFCURVE",
"512 121 QCURVE SMOOTH",
"510 119 OFFCURVE",
"492 106 OFFCURVE",
"492 96 QCURVE SMOOTH",
"492 90 OFFCURVE",
"500 81 OFFCURVE",
"517 67 OFFCURVE",
"524 60 QCURVE SMOOTH",
"552 32 LINE SMOOTH",
"559 25 OFFCURVE",
"573 8 OFFCURVE",
"582 0 OFFCURVE",
"588 0 QCURVE SMOOTH",
"594 0 OFFCURVE",
"603 8 OFFCURVE",
"617 25 OFFCURVE",
"624 32 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 57 values pushed */
135 1 1 6 1 76 0 6 5 1 5 6 1 128 3 1 1 0 5 1 0 126 8 7 2 5 5 17 77 4 2 2 0 0 18 0 78 143 141 129 127 122 120 115 113 84 82 64 62 44 42 24 22 34 9 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 696;
}
);
note = m;
unicode = 006D;
},
{
glyphname = n;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"420 60 LINE SMOOTH",
"427 67 OFFCURVE",
"444 81 OFFCURVE",
"452 90 OFFCURVE",
"452 96 QCURVE SMOOTH",
"452 102 OFFCURVE",
"444 111 OFFCURVE",
"427 125 OFFCURVE",
"420 132 QCURVE SMOOTH",
"414 138 LINE SMOOTH",
"406 146 OFFCURVE",
"406 160 QCURVE SMOOTH",
"406 424 LINE SMOOTH",
"406 433 OFFCURVE",
"420 459 OFFCURVE",
"420 464 QCURVE SMOOTH",
"420 472 OFFCURVE",
"405 481 OFFCURVE",
"389 487 QCURVE SMOOTH",
"368 496 LINE",
"304 528 LINE SMOOTH",
"283 538 OFFCURVE",
"250 560 OFFCURVE",
"244 560 QCURVE SMOOTH",
"238 560 OFFCURVE",
"229 552 OFFCURVE",
"215 535 OFFCURVE",
"208 528 QCURVE SMOOTH",
"192 512 LINE SMOOTH",
"184 504 OFFCURVE",
"176 504 QCURVE SMOOTH",
"168 504 OFFCURVE",
"160 512 QCURVE SMOOTH",
"144 528 LINE SMOOTH",
"137 535 OFFCURVE",
"123 552 OFFCURVE",
"114 560 OFFCURVE",
"108 560 QCURVE SMOOTH",
"102 560 OFFCURVE",
"93 552 OFFCURVE",
"79 535 OFFCURVE",
"72 528 QCURVE SMOOTH",
"44 500 LINE SMOOTH",
"37 493 OFFCURVE",
"20 479 OFFCURVE",
"12 470 OFFCURVE",
"12 464 QCURVE SMOOTH",
"12 458 OFFCURVE",
"20 449 OFFCURVE",
"37 435 OFFCURVE",
"44 428 QCURVE SMOOTH",
"50 422 LINE SMOOTH",
"58 414 OFFCURVE",
"58 400 QCURVE SMOOTH",
"58 144 LINE SMOOTH",
"58 131 OFFCURVE",
"48 121 QCURVE SMOOTH",
"46 119 OFFCURVE",
"28 106 OFFCURVE",
"28 96 QCURVE SMOOTH",
"28 90 OFFCURVE",
"36 81 OFFCURVE",
"53 67 OFFCURVE",
"60 60 QCURVE SMOOTH",
"88 32 LINE SMOOTH",
"95 25 OFFCURVE",
"109 8 OFFCURVE",
"118 0 OFFCURVE",
"124 0 QCURVE SMOOTH",
"130 0 OFFCURVE",
"139 8 OFFCURVE",
"153 25 OFFCURVE",
"160 32 QCURVE SMOOTH",
"188 60 LINE SMOOTH",
"195 67 OFFCURVE",
"212 81 OFFCURVE",
"220 90 OFFCURVE",
"220 96 QCURVE SMOOTH",
"220 102 OFFCURVE",
"212 111 OFFCURVE",
"195 125 OFFCURVE",
"188 132 QCURVE SMOOTH",
"182 138 LINE SMOOTH",
"174 146 OFFCURVE",
"174 160 QCURVE SMOOTH",
"174 416 LINE SMOOTH",
"174 424 OFFCURVE",
"183 432 OFFCURVE",
"190 432 QCURVE SMOOTH",
"198 432 OFFCURVE",
"216 424 QCURVE SMOOTH",
"274 395 LINE SMOOTH",
"290 388 OFFCURVE",
"290 376 QCURVE SMOOTH",
"290 144 LINE SMOOTH",
"290 131 OFFCURVE",
"280 121 QCURVE SMOOTH",
"278 119 OFFCURVE",
"260 106 OFFCURVE",
"260 96 QCURVE SMOOTH",
"260 90 OFFCURVE",
"268 81 OFFCURVE",
"285 67 OFFCURVE",
"292 60 QCURVE SMOOTH",
"320 32 LINE SMOOTH",
"327 25 OFFCURVE",
"341 8 OFFCURVE",
"350 0 OFFCURVE",
"356 0 QCURVE SMOOTH",
"362 0 OFFCURVE",
"371 8 OFFCURVE",
"385 25 OFFCURVE",
"392 32 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 42 values pushed */
0 4 3 1 3 4 1 128 0 1 0 3 1 0 126 5 1 3 3 17 77 2 1 0 0 18 0 78 89 87 82 80 75 73 44 42 24 22 34 6 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 464;
}
);
note = n;
unicode = 006E;
},
{
glyphname = o;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"50 136 LINE SMOOTH",
"50 127 OFFCURVE",
"36 101 OFFCURVE",
"36 96 QCURVE SMOOTH",
"36 87 OFFCURVE",
"51 79 OFFCURVE",
"68 75 QCURVE SMOOTH",
"77 74 OFFCURVE",
"88 70 QCURVE SMOOTH",
"232 19 LINE SMOOTH",
"243 15 OFFCURVE",
"254 8 QCURVE SMOOTH",
"256 7 OFFCURVE",
"269 0 OFFCURVE",
"276 0 QCURVE SMOOTH",
"282 0 OFFCURVE",
"291 8 OFFCURVE",
"305 25 OFFCURVE",
"312 32 QCURVE SMOOTH",
"380 100 LINE SMOOTH",
"387 107 OFFCURVE",
"404 121 OFFCURVE",
"412 130 OFFCURVE",
"412 136 QCURVE SMOOTH",
"412 141 OFFCURVE",
"398 164 OFFCURVE",
"398 176 QCURVE SMOOTH",
"398 424 LINE SMOOTH",
"398 433 OFFCURVE",
"412 459 OFFCURVE",
"412 464 QCURVE SMOOTH",
"412 473 OFFCURVE",
"397 481 OFFCURVE",
"380 485 QCURVE SMOOTH",
"371 486 OFFCURVE",
"360 490 QCURVE SMOOTH",
"216 541 LINE SMOOTH",
"205 545 OFFCURVE",
"194 552 QCURVE SMOOTH",
"192 553 OFFCURVE",
"179 560 OFFCURVE",
"172 560 QCURVE SMOOTH",
"166 560 OFFCURVE",
"157 552 OFFCURVE",
"143 535 OFFCURVE",
"136 528 QCURVE SMOOTH",
"68 460 LINE SMOOTH",
"61 453 OFFCURVE",
"44 439 OFFCURVE",
"36 430 OFFCURVE",
"36 424 QCURVE SMOOTH",
"36 419 OFFCURVE",
"50 396 OFFCURVE",
"50 384 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"166 406 LINE SMOOTH",
"166 410 OFFCURVE",
"171 415 OFFCURVE",
"174 415 QCURVE SMOOTH",
"180 415 OFFCURVE",
"196 410 QCURVE SMOOTH",
"268 386 LINE SMOOTH",
"277 383 OFFCURVE",
"282 378 OFFCURVE",
"282 372 QCURVE SMOOTH",
"282 154 LINE SMOOTH",
"282 150 OFFCURVE",
"277 145 OFFCURVE",
"274 145 QCURVE SMOOTH",
"268 145 OFFCURVE",
"252 150 QCURVE SMOOTH",
"180 174 LINE SMOOTH",
"171 177 OFFCURVE",
"166 182 OFFCURVE",
"166 188 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 46 values pushed */
22 1 3 0 73 63 2 2 3 49 1 1 2 3 76 0 3 3 0 97 0 0 0 17 77 0 2 2 1 97 0 1 1 18 1 78 70 68 60 58 39 37 42 4 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 448;
}
);
note = o;
unicode = 006F;
},
{
glyphname = p;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"128 -160 LINE SMOOTH",
"135 -156 OFFCURVE",
"146 -153 OFFCURVE",
"150 -151 QCURVE",
"163 -147 OFFCURVE",
"176 -139 OFFCURVE",
"176 -132 QCURVE SMOOTH",
"176 -128 OFFCURVE",
"174 -105 OFFCURVE",
"174 -84 QCURVE SMOOTH",
"174 26 LINE SMOOTH",
"174 37 OFFCURVE",
"184 37 QCURVE SMOOTH",
"189 37 OFFCURVE",
"192 36 QCURVE SMOOTH",
"240 19 LINE SMOOTH",
"251 15 OFFCURVE",
"262 8 QCURVE SMOOTH",
"264 7 OFFCURVE",
"277 0 OFFCURVE",
"284 0 QCURVE SMOOTH",
"290 0 OFFCURVE",
"299 8 OFFCURVE",
"313 25 OFFCURVE",
"320 32 QCURVE SMOOTH",
"388 100 LINE SMOOTH",
"395 107 OFFCURVE",
"412 121 OFFCURVE",
"420 130 OFFCURVE",
"420 136 QCURVE SMOOTH",
"420 141 OFFCURVE",
"406 164 OFFCURVE",
"406 176 QCURVE SMOOTH",
"406 424 LINE SMOOTH",
"406 433 OFFCURVE",
"420 459 OFFCURVE",
"420 464 QCURVE SMOOTH",
"420 472 OFFCURVE",
"405 481 OFFCURVE",
"389 487 QCURVE SMOOTH",
"368 496 LINE",
"304 528 LINE SMOOTH",
"283 538 OFFCURVE",
"250 560 OFFCURVE",
"244 560 QCURVE SMOOTH",
"238 560 OFFCURVE",
"229 552 OFFCURVE",
"215 535 OFFCURVE",
"208 528 QCURVE SMOOTH",
"192 512 LINE SMOOTH",
"184 504 OFFCURVE",
"176 504 QCURVE SMOOTH",
"168 504 OFFCURVE",
"160 512 QCURVE SMOOTH",
"144 528 LINE SMOOTH",
"137 535 OFFCURVE",
"123 552 OFFCURVE",
"114 560 OFFCURVE",
"108 560 QCURVE SMOOTH",
"102 560 OFFCURVE",
"93 552 OFFCURVE",
"79 535 OFFCURVE",
"72 528 QCURVE SMOOTH",
"44 500 LINE SMOOTH",
"37 493 OFFCURVE",
"20 479 OFFCURVE",
"12 470 OFFCURVE",
"12 464 QCURVE SMOOTH",
"12 458 OFFCURVE",
"20 449 OFFCURVE",
"37 435 OFFCURVE",
"44 428 QCURVE SMOOTH",
"50 422 LINE SMOOTH",
"58 414 OFFCURVE",
"58 400 QCURVE SMOOTH",
"58 -128 LINE SMOOTH",
"58 -149 OFFCURVE",
"56 -172 OFFCURVE",
"56 -176 QCURVE SMOOTH",
"56 -182 OFFCURVE",
"65 -192 OFFCURVE",
"72 -192 QCURVE SMOOTH",
"79 -192 OFFCURVE",
"100 -174 OFFCURVE",
"104 -172 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"276 145 OFFCURVE",
"260 150 QCURVE SMOOTH",
"188 174 LINE SMOOTH",
"179 177 OFFCURVE",
"174 182 OFFCURVE",
"174 188 QCURVE SMOOTH",
"174 416 LINE SMOOTH",
"174 424 OFFCURVE",
"183 432 OFFCURVE",
"190 432 QCURVE SMOOTH",
"198 432 OFFCURVE",
"216 424 QCURVE SMOOTH",
"274 395 LINE SMOOTH",
"290 388 OFFCURVE",
"290 376 QCURVE SMOOTH",
"290 154 LINE SMOOTH",
"290 150 OFFCURVE",
"285 145 OFFCURVE",
"282 145 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 67 values pushed */
97 1 7 6 1 76 0 6 2 7 2 6 7 128 0 2 0 5 4 2 5 105 3 1 1 1 17 77 8 1 7 7 4 97 0 4 4 18 77 0 0 0 15 0 78 85 85 85 103 85 102 94 92 72 71 64 62 40 38 33 31 26 24 33 9 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 464;
}
);
note = p;
unicode = 0070;
},
{
glyphname = q;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"360 -160 LINE SMOOTH",
"367 -156 OFFCURVE",
"378 -153 OFFCURVE",
"382 -151 QCURVE",
"395 -147 OFFCURVE",
"408 -139 OFFCURVE",
"408 -132 QCURVE SMOOTH",
"408 -128 OFFCURVE",
"406 -105 OFFCURVE",
"406 -84 QCURVE SMOOTH",
"406 400 LINE SMOOTH",
"406 414 OFFCURVE",
"414 422 QCURVE SMOOTH",
"420 428 LINE SMOOTH",
"427 435 OFFCURVE",
"444 449 OFFCURVE",
"452 458 OFFCURVE",
"452 464 QCURVE SMOOTH",
"452 470 OFFCURVE",
"444 479 OFFCURVE",
"427 493 OFFCURVE",
"420 500 QCURVE SMOOTH",
"392 528 LINE SMOOTH",
"385 535 OFFCURVE",
"371 552 OFFCURVE",
"362 560 OFFCURVE",
"356 560 QCURVE SMOOTH",
"350 560 OFFCURVE",
"341 552 OFFCURVE",
"327 535 OFFCURVE",
"320 528 QCURVE SMOOTH",
"304 512 LINE SMOOTH",
"296 504 OFFCURVE",
"288 504 QCURVE SMOOTH",
"280 504 OFFCURVE",
"272 512 QCURVE SMOOTH",
"256 528 LINE SMOOTH",
"249 535 OFFCURVE",
"235 552 OFFCURVE",
"226 560 OFFCURVE",
"220 560 QCURVE SMOOTH",
"214 560 OFFCURVE",
"181 538 OFFCURVE",
"160 528 QCURVE SMOOTH",
"96 496 LINE",
"75 487 LINE SMOOTH",
"59 481 OFFCURVE",
"44 472 OFFCURVE",
"44 464 QCURVE SMOOTH",
"44 459 OFFCURVE",
"58 433 OFFCURVE",
"58 424 QCURVE SMOOTH",
"58 136 LINE SMOOTH",
"58 127 OFFCURVE",
"44 101 OFFCURVE",
"44 96 QCURVE SMOOTH",
"44 88 OFFCURVE",
"59 79 OFFCURVE",
"75 73 QCURVE SMOOTH",
"96 64 LINE",
"160 32 LINE SMOOTH",
"181 22 OFFCURVE",
"214 0 OFFCURVE",
"220 0 QCURVE SMOOTH",
"226 0 OFFCURVE",
"235 8 OFFCURVE",
"249 25 OFFCURVE",
"256 32 QCURVE SMOOTH",
"272 48 LINE SMOOTH",
"273 49 OFFCURVE",
"279 55 OFFCURVE",
"282 55 QCURVE SMOOTH",
"290 55 OFFCURVE",
"290 46 QCURVE SMOOTH",
"290 -128 LINE SMOOTH",
"290 -149 OFFCURVE",
"288 -172 OFFCURVE",
"288 -176 QCURVE SMOOTH",
"288 -182 OFFCURVE",
"297 -192 OFFCURVE",
"304 -192 QCURVE SMOOTH",
"311 -192 OFFCURVE",
"332 -174 OFFCURVE",
"336 -172 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"191 165 LINE SMOOTH",
"175 172 OFFCURVE",
"175 184 QCURVE SMOOTH",
"175 376 LINE SMOOTH",
"175 388 OFFCURVE",
"191 395 QCURVE SMOOTH",
"249 424 LINE SMOOTH",
"267 432 OFFCURVE",
"275 432 QCURVE SMOOTH",
"282 432 OFFCURVE",
"291 424 OFFCURVE",
"291 416 QCURVE SMOOTH",
"291 144 LINE SMOOTH",
"291 136 OFFCURVE",
"282 128 OFFCURVE",
"275 128 QCURVE SMOOTH",
"267 128 OFFCURVE",
"249 136 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 62 values pushed */
89 1 6 7 1 76 0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 0 6 0 1 2 6 1 106 5 1 3 3 17 77 0 2 2 18 77 0 0 0 15 0 78 93 91 86 84 57 55 50 48 43 41 38 39 33 8 7 25 
CALL[ ]\011/* CallFunction */";
};
width = 464;
}
);
note = q;
unicode = 0071;
},
{
glyphname = r;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"188 60 LINE SMOOTH",
"195 67 OFFCURVE",
"212 81 OFFCURVE",
"220 90 OFFCURVE",
"220 96 QCURVE SMOOTH",
"220 102 OFFCURVE",
"212 111 OFFCURVE",
"195 125 OFFCURVE",
"188 132 QCURVE SMOOTH",
"182 138 LINE SMOOTH",
"174 146 OFFCURVE",
"174 160 QCURVE SMOOTH",
"174 396 LINE SMOOTH",
"174 402 OFFCURVE",
"183 412 OFFCURVE",
"190 412 QCURVE SMOOTH",
"198 412 OFFCURVE",
"204 404 QCURVE SMOOTH",
"211 397 OFFCURVE",
"221 385 QCURVE SMOOTH",
"223 383 OFFCURVE",
"229 376 OFFCURVE",
"239 368 OFFCURVE",
"244 368 QCURVE SMOOTH",
"250 368 OFFCURVE",
"259 376 OFFCURVE",
"273 393 OFFCURVE",
"280 400 QCURVE SMOOTH",
"308 428 LINE SMOOTH",
"315 435 OFFCURVE",
"332 449 OFFCURVE",
"340 458 OFFCURVE",
"340 464 QCURVE SMOOTH",
"340 470 OFFCURVE",
"332 479 OFFCURVE",
"315 493 OFFCURVE",
"308 500 QCURVE SMOOTH",
"280 528 LINE SMOOTH",
"273 535 OFFCURVE",
"259 552 OFFCURVE",
"250 560 OFFCURVE",
"244 560 QCURVE SMOOTH",
"238 560 OFFCURVE",
"229 552 OFFCURVE",
"215 535 OFFCURVE",
"208 528 QCURVE SMOOTH",
"192 512 LINE SMOOTH",
"184 504 OFFCURVE",
"176 504 QCURVE SMOOTH",
"168 504 OFFCURVE",
"160 512 QCURVE SMOOTH",
"144 528 LINE SMOOTH",
"137 535 OFFCURVE",
"123 552 OFFCURVE",
"114 560 OFFCURVE",
"108 560 QCURVE SMOOTH",
"102 560 OFFCURVE",
"93 552 OFFCURVE",
"79 535 OFFCURVE",
"72 528 QCURVE SMOOTH",
"44 500 LINE SMOOTH",
"37 493 OFFCURVE",
"20 479 OFFCURVE",
"12 470 OFFCURVE",
"12 464 QCURVE SMOOTH",
"12 458 OFFCURVE",
"20 449 OFFCURVE",
"37 435 OFFCURVE",
"44 428 QCURVE SMOOTH",
"50 422 LINE SMOOTH",
"58 414 OFFCURVE",
"58 400 QCURVE SMOOTH",
"58 144 LINE SMOOTH",
"58 131 OFFCURVE",
"48 121 QCURVE SMOOTH",
"46 119 OFFCURVE",
"28 106 OFFCURVE",
"28 96 QCURVE SMOOTH",
"28 90 OFFCURVE",
"36 81 OFFCURVE",
"53 67 OFFCURVE",
"60 60 QCURVE SMOOTH",
"88 32 LINE SMOOTH",
"95 25 OFFCURVE",
"109 8 OFFCURVE",
"118 0 OFFCURVE",
"124 0 QCURVE SMOOTH",
"130 0 OFFCURVE",
"139 8 OFFCURVE",
"153 25 OFFCURVE",
"160 32 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 46 values pushed */
0 2 1 5 1 2 5 128 0 5 4 1 5 4 126 0 4 4 1 97 3 1 1 1 17 77 0 0 0 18 0 78 75 73 67 65 49 47 42 40 35 33 34 6 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 352;
}
);
note = r;
unicode = 0072;
},
{
glyphname = s;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"280 1 OFFCURVE",
"289 9 OFFCURVE",
"303 26 OFFCURVE",
"310 33 QCURVE SMOOTH",
"378 101 LINE SMOOTH",
"385 108 OFFCURVE",
"402 122 OFFCURVE",
"410 131 OFFCURVE",
"410 137 QCURVE SMOOTH",
"410 143 OFFCURVE",
"396 165 OFFCURVE",
"396 177 QCURVE SMOOTH",
"396 292 LINE SMOOTH",
"396 310 OFFCURVE",
"386 332 OFFCURVE",
"374 344 QCURVE SMOOTH",
"336 382 OFFCURVE",
"336 384 QCURVE",
"361 410 OFFCURVE",
"386 433 QCURVE SMOOTH",
"398 444 OFFCURVE",
"410 458 OFFCURVE",
"410 464 QCURVE SMOOTH",
"410 472 OFFCURVE",
"396 479 OFFCURVE",
"380 483 QCURVE",
"370 484 OFFCURVE",
"358 489 QCURVE SMOOTH",
"230 536 LINE SMOOTH",
"203 545 OFFCURVE",
"176 560 OFFCURVE",
"170 560 QCURVE SMOOTH",
"164 560 OFFCURVE",
"155 552 OFFCURVE",
"141 535 OFFCURVE",
"134 528 QCURVE SMOOTH",
"66 460 LINE SMOOTH",
"59 453 OFFCURVE",
"42 439 OFFCURVE",
"34 430 OFFCURVE",
"34 424 QCURVE SMOOTH",
"34 418 OFFCURVE",
"48 396 OFFCURVE",
"48 384 QCURVE SMOOTH",
"48 256 LINE SMOOTH",
"48 241 OFFCURVE",
"56 221 OFFCURVE",
"75 203 OFFCURVE",
"78 200 QCURVE SMOOTH",
"104 174 OFFCURVE",
"104 172 QCURVE",
"81 148 OFFCURVE",
"58 127 QCURVE SMOOTH",
"44 114 OFFCURVE",
"34 103 OFFCURVE",
"34 97 QCURVE SMOOTH",
"34 89 OFFCURVE",
"48 82 OFFCURVE",
"64 78 QCURVE",
"74 77 OFFCURVE",
"86 72 QCURVE SMOOTH",
"214 25 LINE SMOOTH",
"241 16 OFFCURVE",
"268 1 OFFCURVE",
"274 1 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"190 288 OFFCURVE",
"187 291 QCURVE SMOOTH",
"175 303 OFFCURVE",
"164 321 OFFCURVE",
"164 336 QCURVE SMOOTH",
"164 406 LINE SMOOTH",
"164 409 OFFCURVE",
"169 414 OFFCURVE",
"172 414 QCURVE SMOOTH",
"183 414 OFFCURVE",
"188 412 QCURVE SMOOTH",
"275 383 LINE SMOOTH",
"283 380 OFFCURVE",
"283 376 QCURVE SMOOTH",
"283 373 OFFCURVE",
"278 368 QCURVE SMOOTH",
"201 291 LINE SMOOTH",
"198 288 OFFCURVE",
"194 288 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"151 184 LINE SMOOTH",
"144 186 OFFCURVE",
"144 190 QCURVE SMOOTH",
"144 194 OFFCURVE",
"150 200 QCURVE SMOOTH",
"227 277 LINE SMOOTH",
"230 280 OFFCURVE",
"234 280 QCURVE SMOOTH",
"238 280 OFFCURVE",
"241 277 QCURVE SMOOTH",
"261 257 LINE SMOOTH",
"270 248 OFFCURVE",
"280 230 OFFCURVE",
"280 216 QCURVE SMOOTH",
"280 155 LINE SMOOTH",
"280 152 OFFCURVE",
"275 147 OFFCURVE",
"272 147 QCURVE SMOOTH",
"261 147 OFFCURVE",
"256 149 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 33 values pushed */
95 85 74 46 13 5 1 0 1 76 0 0 0 17 77 2 1 1 1 18 1 78 0 0 0 64 0 63 33 31 3 7 22 
CALL[ ]\011/* CallFunction */";
};
width = 444;
}
);
note = s;
unicode = 0073;
},
{
glyphname = t;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"308 100 LINE SMOOTH",
"313 105 OFFCURVE",
"329 118 OFFCURVE",
"340 130 OFFCURVE",
"340 136 QCURVE SMOOTH",
"340 142 OFFCURVE",
"331 152 OFFCURVE",
"324 152 QCURVE SMOOTH",
"315 152 OFFCURVE",
"302 134 OFFCURVE",
"300 132 QCURVE SMOOTH",
"296 128 LINE SMOOTH",
"291 123 OFFCURVE",
"282 116 OFFCURVE",
"276 116 QCURVE SMOOTH",
"272 116 OFFCURVE",
"260 121 OFFCURVE",
"248 128 QCURVE SMOOTH",
"188 158 LINE SMOOTH",
"179 162 OFFCURVE",
"174 168 OFFCURVE",
"174 176 QCURVE SMOOTH",
"174 402 LINE SMOOTH",
"174 408 OFFCURVE",
"183 418 OFFCURVE",
"190 418 QCURVE SMOOTH",
"237 418 LINE SMOOTH",
"245 418 OFFCURVE",
"261 416 OFFCURVE",
"271 416 QCURVE SMOOTH",
"278 416 OFFCURVE",
"290 427 OFFCURVE",
"303 444 OFFCURVE",
"307 448 QCURVE SMOOTH",
"335 476 LINE SMOOTH",
"340 481 OFFCURVE",
"356 494 OFFCURVE",
"367 506 OFFCURVE",
"367 512 QCURVE SMOOTH",
"367 518 OFFCURVE",
"358 528 OFFCURVE",
"351 528 QCURVE SMOOTH",
"344 528 OFFCURVE",
"329 526 OFFCURVE",
"321 526 QCURVE SMOOTH",
"191 526 LINE SMOOTH",
"185 526 OFFCURVE",
"176 536 OFFCURVE",
"176 542 QCURVE SMOOTH",
"175 580 LINE SMOOTH",
"175 598 OFFCURVE",
"168 612 OFFCURVE",
"158 612 QCURVE SMOOTH",
"149 612 OFFCURVE",
"136 598 OFFCURVE",
"122 580 QCURVE",
"10 468 LINE",
"7 464 OFFCURVE",
"-11 450 OFFCURVE",
"-22 437 OFFCURVE",
"-22 432 QCURVE SMOOTH",
"-22 426 OFFCURVE",
"-13 416 OFFCURVE",
"-6 416 QCURVE SMOOTH",
"1 416 OFFCURVE",
"16 418 OFFCURVE",
"24 418 QCURVE SMOOTH",
"42 418 LINE SMOOTH",
"49 418 OFFCURVE",
"58 408 OFFCURVE",
"58 402 QCURVE SMOOTH",
"58 144 LINE SMOOTH",
"58 131 OFFCURVE",
"48 121 QCURVE SMOOTH",
"46 119 OFFCURVE",
"28 106 OFFCURVE",
"28 96 QCURVE SMOOTH",
"28 88 OFFCURVE",
"43 79 OFFCURVE",
"59 73 QCURVE SMOOTH",
"80 64 LINE",
"148 30 LINE SMOOTH",
"159 24 OFFCURVE",
"171 16 QCURVE SMOOTH",
"175 14 OFFCURVE",
"198 0 OFFCURVE",
"204 0 QCURVE SMOOTH",
"210 0 OFFCURVE",
"221 10 OFFCURVE",
"235 27 OFFCURVE",
"240 32 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 71 values pushed */
41 1 4 3 68 19 2 9 1 2 76 0 3 4 3 133 0 9 1 8 1 9 8 128 0 8 0 1 8 0 126 5 1 4 7 6 2 3 1 9 4 1 105 0 0 0 18 0 78 82 81 76 74 64 62 61 59 49 47 45 43 38 36 27 25 23 21 34 10 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 356;
}
);
note = t;
unicode = 0074;
},
{
glyphname = u;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"44 500 LINE SMOOTH",
"37 493 OFFCURVE",
"20 479 OFFCURVE",
"12 470 OFFCURVE",
"12 464 QCURVE SMOOTH",
"12 458 OFFCURVE",
"20 449 OFFCURVE",
"37 435 OFFCURVE",
"44 428 QCURVE SMOOTH",
"50 422 LINE SMOOTH",
"58 414 OFFCURVE",
"58 400 QCURVE SMOOTH",
"58 136 LINE SMOOTH",
"58 127 OFFCURVE",
"44 101 OFFCURVE",
"44 96 QCURVE SMOOTH",
"44 88 OFFCURVE",
"59 79 OFFCURVE",
"75 73 QCURVE SMOOTH",
"96 64 LINE",
"160 32 LINE SMOOTH",
"181 22 OFFCURVE",
"214 0 OFFCURVE",
"220 0 QCURVE SMOOTH",
"226 0 OFFCURVE",
"235 8 OFFCURVE",
"249 25 OFFCURVE",
"256 32 QCURVE SMOOTH",
"272 48 LINE SMOOTH",
"280 56 OFFCURVE",
"288 56 QCURVE SMOOTH",
"296 56 OFFCURVE",
"304 48 QCURVE SMOOTH",
"320 32 LINE SMOOTH",
"327 25 OFFCURVE",
"341 8 OFFCURVE",
"350 0 OFFCURVE",
"356 0 QCURVE SMOOTH",
"362 0 OFFCURVE",
"371 8 OFFCURVE",
"385 25 OFFCURVE",
"392 32 QCURVE SMOOTH",
"420 60 LINE SMOOTH",
"427 67 OFFCURVE",
"444 81 OFFCURVE",
"452 90 OFFCURVE",
"452 96 QCURVE SMOOTH",
"452 102 OFFCURVE",
"444 111 OFFCURVE",
"427 125 OFFCURVE",
"420 132 QCURVE SMOOTH",
"414 138 LINE SMOOTH",
"406 146 OFFCURVE",
"406 160 QCURVE SMOOTH",
"406 416 LINE SMOOTH",
"406 429 OFFCURVE",
"416 439 QCURVE SMOOTH",
"418 441 OFFCURVE",
"436 454 OFFCURVE",
"436 464 QCURVE SMOOTH",
"436 470 OFFCURVE",
"428 479 OFFCURVE",
"411 493 OFFCURVE",
"404 500 QCURVE SMOOTH",
"376 528 LINE SMOOTH",
"369 535 OFFCURVE",
"355 552 OFFCURVE",
"346 560 OFFCURVE",
"340 560 QCURVE SMOOTH",
"334 560 OFFCURVE",
"325 552 OFFCURVE",
"311 535 OFFCURVE",
"304 528 QCURVE SMOOTH",
"276 500 LINE SMOOTH",
"269 493 OFFCURVE",
"252 479 OFFCURVE",
"244 470 OFFCURVE",
"244 464 QCURVE SMOOTH",
"244 458 OFFCURVE",
"252 449 OFFCURVE",
"269 435 OFFCURVE",
"276 428 QCURVE SMOOTH",
"282 422 LINE SMOOTH",
"290 414 OFFCURVE",
"290 400 QCURVE SMOOTH",
"290 144 LINE SMOOTH",
"290 136 OFFCURVE",
"281 128 OFFCURVE",
"274 128 QCURVE SMOOTH",
"266 128 OFFCURVE",
"248 136 QCURVE SMOOTH",
"190 165 LINE SMOOTH",
"174 172 OFFCURVE",
"174 184 QCURVE SMOOTH",
"174 416 LINE SMOOTH",
"174 429 OFFCURVE",
"184 439 QCURVE SMOOTH",
"186 441 OFFCURVE",
"204 454 OFFCURVE",
"204 464 QCURVE SMOOTH",
"204 470 OFFCURVE",
"196 479 OFFCURVE",
"179 493 OFFCURVE",
"172 500 QCURVE SMOOTH",
"144 528 LINE SMOOTH",
"137 535 OFFCURVE",
"123 552 OFFCURVE",
"114 560 OFFCURVE",
"108 560 QCURVE SMOOTH",
"102 560 OFFCURVE",
"93 552 OFFCURVE",
"79 535 OFFCURVE",
"72 528 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 42 values pushed */
0 1 0 4 0 1 4 128 0 4 3 0 4 3 126 2 1 0 0 17 77 5 1 3 3 18 3 78 89 87 82 80 75 73 44 42 24 22 34 6 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 464;
}
);
note = u;
unicode = 0075;
},
{
glyphname = v;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"189 0 LINE SMOOTH",
"196 0 OFFCURVE",
"216 10 OFFCURVE",
"220 12 QCURVE SMOOTH",
"276 40 OFFCURVE",
"372 152 OFFCURVE",
"374 233 QCURVE SMOOTH",
"374 416 LINE SMOOTH",
"374 429 OFFCURVE",
"384 439 QCURVE SMOOTH",
"386 441 OFFCURVE",
"404 454 OFFCURVE",
"404 464 QCURVE SMOOTH",
"404 470 OFFCURVE",
"396 479 OFFCURVE",
"379 493 OFFCURVE",
"372 500 QCURVE SMOOTH",
"344 528 LINE SMOOTH",
"337 535 OFFCURVE",
"323 552 OFFCURVE",
"314 560 OFFCURVE",
"308 560 QCURVE SMOOTH",
"302 560 OFFCURVE",
"293 552 OFFCURVE",
"279 535 OFFCURVE",
"272 528 QCURVE SMOOTH",
"244 500 LINE SMOOTH",
"237 493 OFFCURVE",
"220 479 OFFCURVE",
"212 470 OFFCURVE",
"212 464 QCURVE SMOOTH",
"212 458 OFFCURVE",
"220 449 OFFCURVE",
"237 435 OFFCURVE",
"244 428 QCURVE SMOOTH",
"250 422 LINE SMOOTH",
"258 414 OFFCURVE",
"258 400 QCURVE SMOOTH",
"258 224 LINE SMOOTH",
"258 161 OFFCURVE",
"254 133 QCURVE",
"249 128 OFFCURVE",
"242 128 QCURVE SMOOTH",
"234 128 OFFCURVE",
"216 136 QCURVE SMOOTH",
"158 165 LINE SMOOTH",
"142 172 OFFCURVE",
"142 184 QCURVE SMOOTH",
"142 336 LINE SMOOTH",
"142 404 OFFCURVE",
"149 472 OFFCURVE",
"175 497 OFFCURVE",
"178 500 QCURVE SMOOTH",
"190 512 LINE SMOOTH",
"194 516 OFFCURVE",
"213 529 OFFCURVE",
"222 538 OFFCURVE",
"222 544 QCURVE SMOOTH",
"222 550 OFFCURVE",
"213 560 OFFCURVE",
"206 560 QCURVE SMOOTH",
"198 560 OFFCURVE",
"178 550 OFFCURVE",
"174 548 QCURVE SMOOTH",
"119 521 OFFCURVE",
"26 406 OFFCURVE",
"26 324 QCURVE SMOOTH",
"26 136 LINE SMOOTH",
"26 127 OFFCURVE",
"12 101 OFFCURVE",
"12 96 QCURVE SMOOTH",
"12 88 OFFCURVE",
"27 79 OFFCURVE",
"43 73 QCURVE SMOOTH",
"64 64 LINE",
"128 32 LINE SMOOTH",
"150 21 OFFCURVE",
"177 3 OFFCURVE",
"182 1 QCURVE SMOOTH",
"184 0 LINE",
"184 0 OFFCURVE",
"183 1 QCURVE",
"184 0 OFFCURVE",
"188 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 36 values pushed */
0 1 0 3 0 1 3 128 2 1 0 0 17 77 4 1 3 3 18 3 78 0 0 0 83 0 81 62 60 41 39 23 21 5 7 22 
CALL[ ]\011/* CallFunction */";
};
width = 416;
}
);
note = v;
unicode = 0076;
},
{
glyphname = w;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"652 60 LINE SMOOTH",
"659 67 OFFCURVE",
"676 81 OFFCURVE",
"684 90 OFFCURVE",
"684 96 QCURVE SMOOTH",
"684 102 OFFCURVE",
"676 111 OFFCURVE",
"659 125 OFFCURVE",
"652 132 QCURVE SMOOTH",
"646 138 LINE SMOOTH",
"638 146 OFFCURVE",
"638 160 QCURVE SMOOTH",
"638 416 LINE SMOOTH",
"638 429 OFFCURVE",
"648 439 QCURVE SMOOTH",
"650 441 OFFCURVE",
"668 454 OFFCURVE",
"668 464 QCURVE SMOOTH",
"668 470 OFFCURVE",
"660 479 OFFCURVE",
"643 493 OFFCURVE",
"636 500 QCURVE SMOOTH",
"608 528 LINE SMOOTH",
"601 535 OFFCURVE",
"587 552 OFFCURVE",
"578 560 OFFCURVE",
"572 560 QCURVE SMOOTH",
"566 560 OFFCURVE",
"557 552 OFFCURVE",
"543 535 OFFCURVE",
"536 528 QCURVE SMOOTH",
"508 500 LINE SMOOTH",
"501 493 OFFCURVE",
"484 479 OFFCURVE",
"476 470 OFFCURVE",
"476 464 QCURVE SMOOTH",
"476 458 OFFCURVE",
"484 449 OFFCURVE",
"501 435 OFFCURVE",
"508 428 QCURVE SMOOTH",
"514 422 LINE SMOOTH",
"522 414 OFFCURVE",
"522 400 QCURVE SMOOTH",
"522 144 LINE SMOOTH",
"522 136 OFFCURVE",
"513 128 OFFCURVE",
"506 128 QCURVE SMOOTH",
"498 128 OFFCURVE",
"480 136 QCURVE SMOOTH",
"422 165 LINE SMOOTH",
"406 172 OFFCURVE",
"406 184 QCURVE SMOOTH",
"406 416 LINE SMOOTH",
"406 429 OFFCURVE",
"416 439 QCURVE SMOOTH",
"418 441 OFFCURVE",
"436 454 OFFCURVE",
"436 464 QCURVE SMOOTH",
"436 470 OFFCURVE",
"428 479 OFFCURVE",
"411 493 OFFCURVE",
"404 500 QCURVE SMOOTH",
"376 528 LINE SMOOTH",
"369 535 OFFCURVE",
"355 552 OFFCURVE",
"346 560 OFFCURVE",
"340 560 QCURVE SMOOTH",
"334 560 OFFCURVE",
"325 552 OFFCURVE",
"311 535 OFFCURVE",
"304 528 QCURVE SMOOTH",
"276 500 LINE SMOOTH",
"269 493 OFFCURVE",
"252 479 OFFCURVE",
"244 470 OFFCURVE",
"244 464 QCURVE SMOOTH",
"244 458 OFFCURVE",
"252 449 OFFCURVE",
"269 435 OFFCURVE",
"276 428 QCURVE SMOOTH",
"282 422 LINE SMOOTH",
"290 414 OFFCURVE",
"290 400 QCURVE SMOOTH",
"290 144 LINE SMOOTH",
"290 136 OFFCURVE",
"281 128 OFFCURVE",
"274 128 QCURVE SMOOTH",
"266 128 OFFCURVE",
"248 136 QCURVE SMOOTH",
"190 165 LINE SMOOTH",
"174 172 OFFCURVE",
"174 184 QCURVE SMOOTH",
"174 416 LINE SMOOTH",
"174 429 OFFCURVE",
"184 439 QCURVE SMOOTH",
"186 441 OFFCURVE",
"204 454 OFFCURVE",
"204 464 QCURVE SMOOTH",
"204 470 OFFCURVE",
"196 479 OFFCURVE",
"179 493 OFFCURVE",
"172 500 QCURVE SMOOTH",
"144 528 LINE SMOOTH",
"137 535 OFFCURVE",
"123 552 OFFCURVE",
"114 560 OFFCURVE",
"108 560 QCURVE SMOOTH",
"102 560 OFFCURVE",
"93 552 OFFCURVE",
"79 535 OFFCURVE",
"72 528 QCURVE SMOOTH",
"44 500 LINE SMOOTH",
"37 493 OFFCURVE",
"20 479 OFFCURVE",
"12 470 OFFCURVE",
"12 464 QCURVE SMOOTH",
"12 458 OFFCURVE",
"20 449 OFFCURVE",
"37 435 OFFCURVE",
"44 428 QCURVE SMOOTH",
"50 422 LINE SMOOTH",
"58 414 OFFCURVE",
"58 400 QCURVE SMOOTH",
"58 136 LINE SMOOTH",
"58 127 OFFCURVE",
"44 101 OFFCURVE",
"44 96 QCURVE SMOOTH",
"44 88 OFFCURVE",
"59 79 OFFCURVE",
"75 73 QCURVE SMOOTH",
"96 64 LINE",
"160 32 LINE SMOOTH",
"181 22 OFFCURVE",
"214 0 OFFCURVE",
"220 0 QCURVE SMOOTH",
"226 0 OFFCURVE",
"235 8 OFFCURVE",
"249 25 OFFCURVE",
"256 32 QCURVE SMOOTH",
"299 75 LINE",
"316 69 OFFCURVE",
"328 64 QCURVE SMOOTH",
"392 32 LINE SMOOTH",
"415 21 OFFCURVE",
"447 0 OFFCURVE",
"452 0 QCURVE SMOOTH",
"458 0 OFFCURVE",
"467 8 OFFCURVE",
"481 25 OFFCURVE",
"488 32 QCURVE SMOOTH",
"504 48 LINE SMOOTH",
"512 56 OFFCURVE",
"520 56 QCURVE SMOOTH",
"528 56 OFFCURVE",
"536 48 QCURVE SMOOTH",
"552 32 LINE SMOOTH",
"559 25 OFFCURVE",
"573 8 OFFCURVE",
"582 0 OFFCURVE",
"588 0 QCURVE SMOOTH",
"594 0 OFFCURVE",
"603 8 OFFCURVE",
"617 25 OFFCURVE",
"624 32 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 54 values pushed */
23 1 1 5 1 76 7 1 5 4 1 4 5 1 128 0 1 0 4 1 0 126 8 6 2 4 4 17 77 3 2 2 0 0 18 0 78 137 135 117 115 97 95 77 75 57 55 41 37 37 34 9 7 26 
CALL[ ]\011/* CallFunction */";
};
width = 696;
}
);
note = w;
unicode = 0077;
},
{
glyphname = x;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"362 0 OFFCURVE",
"371 8 OFFCURVE",
"385 25 OFFCURVE",
"392 32 QCURVE SMOOTH",
"420 60 LINE SMOOTH",
"427 67 OFFCURVE",
"444 81 OFFCURVE",
"452 90 OFFCURVE",
"452 96 QCURVE SMOOTH",
"452 100 OFFCURVE",
"444 110 OFFCURVE",
"426 128 OFFCURVE",
"420 134 QCURVE SMOOTH",
"412 142 LINE SMOOTH",
"389 165 OFFCURVE",
"334 246 OFFCURVE",
"292 315 QCURVE",
"405 428 LINE SMOOTH",
"412 435 OFFCURVE",
"429 449 OFFCURVE",
"437 458 OFFCURVE",
"437 464 QCURVE SMOOTH",
"437 470 OFFCURVE",
"429 479 OFFCURVE",
"412 493 OFFCURVE",
"405 500 QCURVE SMOOTH",
"377 528 LINE SMOOTH",
"370 535 OFFCURVE",
"356 552 OFFCURVE",
"347 560 OFFCURVE",
"341 560 QCURVE SMOOTH",
"335 560 OFFCURVE",
"325 552 OFFCURVE",
"311 535 OFFCURVE",
"304 528 QCURVE SMOOTH",
"277 500 LINE SMOOTH",
"270 493 OFFCURVE",
"253 479 OFFCURVE",
"245 470 OFFCURVE",
"245 464 QCURVE SMOOTH",
"245 458 OFFCURVE",
"253 449 OFFCURVE",
"270 435 OFFCURVE",
"277 428 QCURVE SMOOTH",
"305 400 LINE SMOOTH",
"312 393 OFFCURVE",
"322 380 OFFCURVE",
"326 376 QCURVE",
"281 331 LINE",
"239 402 OFFCURVE",
"176 496 OFFCURVE",
"152 520 QCURVE SMOOTH",
"144 528 LINE SMOOTH",
"137 535 OFFCURVE",
"123 552 OFFCURVE",
"114 560 OFFCURVE",
"108 560 QCURVE SMOOTH",
"102 560 OFFCURVE",
"93 552 OFFCURVE",
"79 535 OFFCURVE",
"72 528 QCURVE SMOOTH",
"44 500 LINE SMOOTH",
"37 493 OFFCURVE",
"20 479 OFFCURVE",
"12 470 OFFCURVE",
"12 464 QCURVE SMOOTH",
"12 460 OFFCURVE",
"20 450 OFFCURVE",
"38 432 OFFCURVE",
"44 426 QCURVE SMOOTH",
"52 418 LINE SMOOTH",
"75 395 OFFCURVE",
"131 313 OFFCURVE",
"174 245 QCURVE",
"61 132 LINE SMOOTH",
"54 125 OFFCURVE",
"37 111 OFFCURVE",
"29 102 OFFCURVE",
"29 96 QCURVE SMOOTH",
"29 90 OFFCURVE",
"37 81 OFFCURVE",
"54 67 OFFCURVE",
"61 60 QCURVE SMOOTH",
"89 32 LINE SMOOTH",
"96 25 OFFCURVE",
"110 8 OFFCURVE",
"119 0 OFFCURVE",
"125 0 QCURVE SMOOTH",
"131 0 OFFCURVE",
"140 8 OFFCURVE",
"154 25 OFFCURVE",
"161 32 QCURVE SMOOTH",
"189 60 LINE SMOOTH",
"196 67 OFFCURVE",
"213 81 OFFCURVE",
"221 90 OFFCURVE",
"221 96 QCURVE SMOOTH",
"221 102 OFFCURVE",
"213 111 OFFCURVE",
"196 125 OFFCURVE",
"189 132 QCURVE SMOOTH",
"161 160 LINE SMOOTH",
"154 167 OFFCURVE",
"144 180 OFFCURVE",
"140 184 QCURVE",
"184 228 LINE",
"231 151 OFFCURVE",
"289 63 OFFCURVE",
"312 40 QCURVE SMOOTH",
"320 32 LINE SMOOTH",
"327 25 OFFCURVE",
"341 8 OFFCURVE",
"350 0 OFFCURVE",
"356 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 40 values pushed */
96 65 64 39 8 7 6 0 1 1 76 2 1 1 1 17 77 4 3 2 0 0 18 0 78 0 0 0 113 0 112 83 81 57 55 26 24 5 7 22 
CALL[ ]\011/* CallFunction */";
};
width = 450;
}
);
note = x;
unicode = 0078;
},
{
glyphname = y;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"58 136 LINE SMOOTH",
"58 127 OFFCURVE",
"44 101 OFFCURVE",
"44 96 QCURVE SMOOTH",
"44 88 OFFCURVE",
"59 79 OFFCURVE",
"75 73 QCURVE SMOOTH",
"96 64 LINE",
"160 32 LINE SMOOTH",
"181 22 OFFCURVE",
"214 0 OFFCURVE",
"220 0 QCURVE SMOOTH",
"226 0 OFFCURVE",
"235 8 OFFCURVE",
"249 25 OFFCURVE",
"256 32 QCURVE SMOOTH",
"272 48 LINE SMOOTH",
"280 56 OFFCURVE",
"284 56 QCURVE SMOOTH",
"290 56 OFFCURVE",
"290 45 QCURVE SMOOTH",
"290 -172 LINE SMOOTH",
"290 -181 OFFCURVE",
"301 -192 OFFCURVE",
"310 -192 QCURVE SMOOTH",
"316 -192 OFFCURVE",
"325 -184 OFFCURVE",
"339 -167 OFFCURVE",
"346 -160 QCURVE SMOOTH",
"374 -132 LINE SMOOTH",
"381 -125 OFFCURVE",
"398 -111 OFFCURVE",
"406 -102 OFFCURVE",
"406 -96 QCURVE SMOOTH",
"406 416 LINE SMOOTH",
"406 429 OFFCURVE",
"416 439 QCURVE SMOOTH",
"418 441 OFFCURVE",
"436 454 OFFCURVE",
"436 464 QCURVE SMOOTH",
"436 470 OFFCURVE",
"428 479 OFFCURVE",
"411 493 OFFCURVE",
"404 500 QCURVE SMOOTH",
"376 528 LINE SMOOTH",
"369 535 OFFCURVE",
"355 552 OFFCURVE",
"346 560 OFFCURVE",
"340 560 QCURVE SMOOTH",
"334 560 OFFCURVE",
"325 552 OFFCURVE",
"311 535 OFFCURVE",
"304 528 QCURVE SMOOTH",
"276 500 LINE SMOOTH",
"269 493 OFFCURVE",
"252 479 OFFCURVE",
"244 470 OFFCURVE",
"244 464 QCURVE SMOOTH",
"244 458 OFFCURVE",
"252 449 OFFCURVE",
"269 435 OFFCURVE",
"276 428 QCURVE SMOOTH",
"282 422 LINE SMOOTH",
"290 414 OFFCURVE",
"290 400 QCURVE SMOOTH",
"290 144 LINE SMOOTH",
"290 136 OFFCURVE",
"281 128 OFFCURVE",
"274 128 QCURVE SMOOTH",
"266 128 OFFCURVE",
"248 136 QCURVE SMOOTH",
"190 165 LINE SMOOTH",
"174 172 OFFCURVE",
"174 184 QCURVE SMOOTH",
"174 416 LINE SMOOTH",
"174 429 OFFCURVE",
"184 439 QCURVE SMOOTH",
"186 441 OFFCURVE",
"204 454 OFFCURVE",
"204 464 QCURVE SMOOTH",
"204 470 OFFCURVE",
"196 479 OFFCURVE",
"179 493 OFFCURVE",
"172 500 QCURVE SMOOTH",
"144 528 LINE SMOOTH",
"137 535 OFFCURVE",
"123 552 OFFCURVE",
"114 560 OFFCURVE",
"108 560 QCURVE SMOOTH",
"102 560 OFFCURVE",
"93 552 OFFCURVE",
"79 535 OFFCURVE",
"72 528 QCURVE SMOOTH",
"44 500 LINE SMOOTH",
"37 493 OFFCURVE",
"20 479 OFFCURVE",
"12 470 OFFCURVE",
"12 464 QCURVE SMOOTH",
"12 458 OFFCURVE",
"20 449 OFFCURVE",
"37 435 OFFCURVE",
"44 428 QCURVE SMOOTH",
"50 422 LINE SMOOTH",
"58 414 OFFCURVE",
"58 400 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 52 values pushed */
70 1 3 5 1 76 0 1 0 4 0 1 4 128 0 4 5 0 4 5 126 2 1 0 0 17 77 0 5 5 18 77 0 3 3 15 3 78 93 91 86 84 80 78 56 54 36 34 46 6 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 464;
}
);
note = y;
unicode = 0079;
},
{
glyphname = z;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"319 508 LINE SMOOTH",
"324 513 OFFCURVE",
"340 526 OFFCURVE",
"351 538 OFFCURVE",
"351 544 QCURVE SMOOTH",
"351 550 OFFCURVE",
"342 560 OFFCURVE",
"335 560 QCURVE SMOOTH",
"328 560 OFFCURVE",
"313 558 OFFCURVE",
"305 558 QCURVE SMOOTH",
"92 558 LINE SMOOTH",
"84 558 OFFCURVE",
"68 560 OFFCURVE",
"58 560 QCURVE SMOOTH",
"51 560 OFFCURVE",
"39 549 OFFCURVE",
"26 532 OFFCURVE",
"22 528 QCURVE SMOOTH",
"-6 500 LINE SMOOTH",
"-11 495 OFFCURVE",
"-27 482 OFFCURVE",
"-38 470 OFFCURVE",
"-38 464 QCURVE SMOOTH",
"-38 458 OFFCURVE",
"-29 448 OFFCURVE",
"-22 448 QCURVE SMOOTH",
"-15 448 OFFCURVE",
"0 450 OFFCURVE",
"8 450 QCURVE SMOOTH",
"221 450 LINE SMOOTH",
"229 450 OFFCURVE",
"245 448 OFFCURVE",
"255 448 QCURVE SMOOTH",
"262 448 OFFCURVE",
"274 459 OFFCURVE",
"287 476 OFFCURVE",
"291 480 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"319 284 LINE SMOOTH",
"324 289 OFFCURVE",
"340 302 OFFCURVE",
"351 314 OFFCURVE",
"351 320 QCURVE SMOOTH",
"351 326 OFFCURVE",
"342 336 OFFCURVE",
"335 336 QCURVE SMOOTH",
"328 336 OFFCURVE",
"313 334 OFFCURVE",
"305 334 QCURVE SMOOTH",
"92 334 LINE SMOOTH",
"84 334 OFFCURVE",
"68 336 OFFCURVE",
"58 336 QCURVE SMOOTH",
"51 336 OFFCURVE",
"39 325 OFFCURVE",
"26 308 OFFCURVE",
"22 304 QCURVE SMOOTH",
"-6 276 LINE SMOOTH",
"-11 271 OFFCURVE",
"-27 258 OFFCURVE",
"-38 246 OFFCURVE",
"-38 240 QCURVE SMOOTH",
"-38 234 OFFCURVE",
"-29 224 OFFCURVE",
"-22 224 QCURVE SMOOTH",
"-15 224 OFFCURVE",
"0 226 OFFCURVE",
"8 226 QCURVE SMOOTH",
"221 226 LINE SMOOTH",
"229 226 OFFCURVE",
"245 224 OFFCURVE",
"255 224 QCURVE SMOOTH",
"262 224 OFFCURVE",
"274 235 OFFCURVE",
"287 252 OFFCURVE",
"291 256 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"319 60 LINE SMOOTH",
"324 65 OFFCURVE",
"340 78 OFFCURVE",
"351 90 OFFCURVE",
"351 96 QCURVE SMOOTH",
"351 102 OFFCURVE",
"342 112 OFFCURVE",
"335 112 QCURVE SMOOTH",
"328 112 OFFCURVE",
"313 110 OFFCURVE",
"305 110 QCURVE SMOOTH",
"92 110 LINE SMOOTH",
"84 110 OFFCURVE",
"68 112 OFFCURVE",
"58 112 QCURVE SMOOTH",
"51 112 OFFCURVE",
"39 101 OFFCURVE",
"26 84 OFFCURVE",
"22 80 QCURVE SMOOTH",
"-6 52 LINE SMOOTH",
"-11 47 OFFCURVE",
"-27 34 OFFCURVE",
"-38 22 OFFCURVE",
"-38 16 QCURVE SMOOTH",
"-38 10 OFFCURVE",
"-29 0 OFFCURVE",
"-22 0 QCURVE SMOOTH",
"-15 0 OFFCURVE",
"0 2 OFFCURVE",
"8 2 QCURVE SMOOTH",
"221 2 LINE SMOOTH",
"229 2 OFFCURVE",
"245 0 OFFCURVE",
"255 0 QCURVE SMOOTH",
"262 0 OFFCURVE",
"274 11 OFFCURVE",
"287 28 OFFCURVE",
"291 32 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 71 values pushed */
11 10 2 9 8 7 2 6 15 9 6 105 2 1 2 0 0 3 97 5 4 2 3 3 17 77 17 16 2 15 15 12 97 14 13 2 12 12 18 12 78 106 104 102 100 99 97 87 85 83 81 80 78 68 66 64 62 61 59 34 33 42 34 33 42 34 33 34 18 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 356;
}
);
note = z;
unicode = 007A;
},
{
glyphname = endash;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"236 366 LINE SMOOTH",
"228 366 OFFCURVE",
"212 368 OFFCURVE",
"202 368 QCURVE SMOOTH",
"195 368 OFFCURVE",
"183 357 OFFCURVE",
"170 340 OFFCURVE",
"166 336 QCURVE SMOOTH",
"90 260 LINE SMOOTH",
"85 255 OFFCURVE",
"69 242 OFFCURVE",
"58 230 OFFCURVE",
"58 224 QCURVE SMOOTH",
"58 218 OFFCURVE",
"67 208 OFFCURVE",
"74 208 QCURVE SMOOTH",
"83 208 OFFCURVE",
"96 226 OFFCURVE",
"98 228 QCURVE SMOOTH",
"112 242 LINE SMOOTH",
"121 251 OFFCURVE",
"137 258 OFFCURVE",
"152 258 QCURVE SMOOTH",
"870 258 LINE SMOOTH",
"878 258 OFFCURVE",
"894 256 OFFCURVE",
"904 256 QCURVE SMOOTH",
"911 256 OFFCURVE",
"923 267 OFFCURVE",
"936 284 OFFCURVE",
"940 288 QCURVE SMOOTH",
"1016 364 LINE SMOOTH",
"1021 369 OFFCURVE",
"1037 382 OFFCURVE",
"1048 394 OFFCURVE",
"1048 400 QCURVE SMOOTH",
"1048 406 OFFCURVE",
"1039 416 OFFCURVE",
"1032 416 QCURVE SMOOTH",
"1023 416 OFFCURVE",
"1010 398 OFFCURVE",
"1008 396 QCURVE SMOOTH",
"994 382 LINE SMOOTH",
"985 373 OFFCURVE",
"969 366 OFFCURVE",
"954 366 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 45 values pushed */
0 0 4 0 133 0 3 1 3 134 6 5 2 4 1 1 4 89 6 5 2 4 4 1 97 2 1 1 4 1 81 0 0 0 45 0 43 43 21 49 43 21 7 7 27 
CALL[ ]\011/* CallFunction */";
};
width = 1106;
}
);
note = endash;
unicode = 2013;
},
{
glyphname = emdash;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"236 366 LINE SMOOTH",
"228 366 OFFCURVE",
"212 368 OFFCURVE",
"202 368 QCURVE SMOOTH",
"195 368 OFFCURVE",
"183 357 OFFCURVE",
"170 340 OFFCURVE",
"166 336 QCURVE SMOOTH",
"90 260 LINE SMOOTH",
"85 255 OFFCURVE",
"69 242 OFFCURVE",
"58 230 OFFCURVE",
"58 224 QCURVE SMOOTH",
"58 218 OFFCURVE",
"67 208 OFFCURVE",
"74 208 QCURVE SMOOTH",
"83 208 OFFCURVE",
"96 226 OFFCURVE",
"98 228 QCURVE SMOOTH",
"112 242 LINE SMOOTH",
"121 251 OFFCURVE",
"137 258 OFFCURVE",
"152 258 QCURVE SMOOTH",
"870 258 LINE SMOOTH",
"878 258 OFFCURVE",
"894 256 OFFCURVE",
"904 256 QCURVE SMOOTH",
"911 256 OFFCURVE",
"923 267 OFFCURVE",
"936 284 OFFCURVE",
"940 288 QCURVE SMOOTH",
"1016 364 LINE SMOOTH",
"1021 369 OFFCURVE",
"1037 382 OFFCURVE",
"1048 394 OFFCURVE",
"1048 400 QCURVE SMOOTH",
"1048 406 OFFCURVE",
"1039 416 OFFCURVE",
"1032 416 QCURVE SMOOTH",
"1023 416 OFFCURVE",
"1010 398 OFFCURVE",
"1008 396 QCURVE SMOOTH",
"994 382 LINE SMOOTH",
"985 373 OFFCURVE",
"969 366 OFFCURVE",
"954 366 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 45 values pushed */
0 0 4 0 133 0 3 1 3 134 6 5 2 4 1 1 4 89 6 5 2 4 4 1 97 2 1 1 4 1 81 0 0 0 45 0 43 43 21 49 43 21 7 7 27 
CALL[ ]\011/* CallFunction */";
};
width = 1106;
}
);
note = emdash;
unicode = 2014;
},
{
glyphname = Ydieresis;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"236 366 LINE SMOOTH",
"228 366 OFFCURVE",
"212 368 OFFCURVE",
"202 368 QCURVE SMOOTH",
"195 368 OFFCURVE",
"183 357 OFFCURVE",
"170 340 OFFCURVE",
"166 336 QCURVE SMOOTH",
"98 268 LINE SMOOTH",
"93 263 OFFCURVE",
"77 250 OFFCURVE",
"66 238 OFFCURVE",
"66 232 QCURVE SMOOTH",
"66 226 OFFCURVE",
"75 216 OFFCURVE",
"82 216 QCURVE SMOOTH",
"91 216 OFFCURVE",
"104 234 OFFCURVE",
"106 236 QCURVE SMOOTH",
"112 242 LINE SMOOTH",
"121 251 OFFCURVE",
"137 258 OFFCURVE",
"152 258 QCURVE SMOOTH",
"438 258 LINE SMOOTH",
"446 258 OFFCURVE",
"462 256 OFFCURVE",
"472 256 QCURVE SMOOTH",
"479 256 OFFCURVE",
"491 267 OFFCURVE",
"504 284 OFFCURVE",
"508 288 QCURVE SMOOTH",
"584 364 LINE SMOOTH",
"589 369 OFFCURVE",
"605 382 OFFCURVE",
"616 394 OFFCURVE",
"616 400 QCURVE SMOOTH",
"616 406 OFFCURVE",
"607 416 OFFCURVE",
"600 416 QCURVE SMOOTH",
"591 416 OFFCURVE",
"578 398 OFFCURVE",
"576 396 QCURVE SMOOTH",
"562 382 LINE SMOOTH",
"553 373 OFFCURVE",
"537 366 OFFCURVE",
"522 366 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 45 values pushed */
0 0 4 0 133 0 3 1 3 134 6 5 2 4 1 1 4 89 6 5 2 4 4 1 97 2 1 1 4 1 81 0 0 0 45 0 43 43 21 49 43 21 7 7 27 
CALL[ ]\011/* CallFunction */";
};
width = 674;
}
);
note = Ydieresis;
unicode = 0178;
},
{
glyphname = working001;
layers = (
{
layerId = "EAEBD88B-362D-401C-A399-B15130C77D90";
paths = (
{
closed = 1;
nodes = (
"-161 1031 LINE",
"-161 1170 LINE",
"7 1114 LINE SMOOTH",
"12 1112 OFFCURVE",
"31 1103 OFFCURVE",
"39 1103 QCURVE SMOOTH",
"45 1103 OFFCURVE",
"54 1111 OFFCURVE",
"68 1128 OFFCURVE",
"75 1135 QCURVE SMOOTH",
"103 1163 LINE SMOOTH",
"110 1170 OFFCURVE",
"127 1184 OFFCURVE",
"135 1193 OFFCURVE",
"135 1199 QCURVE SMOOTH",
"135 1206 OFFCURVE",
"124 1214 OFFCURVE",
"107 1219 OFFCURVE",
"103 1220 QCURVE SMOOTH",
"-89 1284 LINE SMOOTH",
"-94 1286 OFFCURVE",
"-113 1295 OFFCURVE",
"-121 1295 QCURVE SMOOTH",
"-127 1295 OFFCURVE",
"-136 1287 OFFCURVE",
"-150 1270 OFFCURVE",
"-157 1263 QCURVE SMOOTH",
"-277 1143 LINE",
"-277 1031 LINE"
);
},
{
closed = 1;
nodes = (
"1120 1068 LINE SMOOTH",
"1125 1073 OFFCURVE",
"1138 1082 OFFCURVE",
"1144 1090 OFFCURVE",
"1144 1096 QCURVE SMOOTH",
"1144 1103 OFFCURVE",
"1135 1112 OFFCURVE",
"1128 1112 QCURVE SMOOTH",
"1122 1112 OFFCURVE",
"1114 1106 OFFCURVE",
"1105 1093 OFFCURVE",
"1100 1088 QCURVE SMOOTH",
"1095 1083 OFFCURVE",
"1088 1083 QCURVE SMOOTH",
"1079 1083 OFFCURVE",
"1072 1096 QCURVE SMOOTH",
"1036 1168 LINE SMOOTH",
"1025 1192 OFFCURVE",
"1008 1192 QCURVE SMOOTH",
"1002 1192 OFFCURVE",
"994 1186 OFFCURVE",
"985 1173 OFFCURVE",
"980 1168 QCURVE SMOOTH",
"896 1084 LINE SMOOTH",
"891 1079 OFFCURVE",
"878 1070 OFFCURVE",
"872 1062 OFFCURVE",
"872 1056 QCURVE SMOOTH",
"872 1049 OFFCURVE",
"881 1040 OFFCURVE",
"888 1040 QCURVE SMOOTH",
"894 1040 OFFCURVE",
"902 1046 OFFCURVE",
"911 1059 OFFCURVE",
"916 1064 QCURVE SMOOTH",
"921 1069 OFFCURVE",
"928 1069 QCURVE SMOOTH",
"938 1069 OFFCURVE",
"944 1056 QCURVE SMOOTH",
"980 984 LINE SMOOTH",
"991 960 OFFCURVE",
"1008 960 QCURVE SMOOTH",
"1014 960 OFFCURVE",
"1022 966 OFFCURVE",
"1031 979 OFFCURVE",
"1036 984 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"710 544 OFFCURVE",
"719 552 OFFCURVE",
"733 569 OFFCURVE",
"740 576 QCURVE SMOOTH",
"816 652 LINE SMOOTH",
"821 657 OFFCURVE",
"832 665 OFFCURVE",
"840 674 OFFCURVE",
"840 680 QCURVE SMOOTH",
"840 687 OFFCURVE",
"831 696 OFFCURVE",
"824 696 QCURVE SMOOTH",
"819 696 OFFCURVE",
"811 690 OFFCURVE",
"801 677 OFFCURVE",
"796 672 QCURVE SMOOTH",
"792 668 OFFCURVE",
"783 661 OFFCURVE",
"778 661 QCURVE SMOOTH",
"770 661 OFFCURVE",
"760 667 QCURVE SMOOTH",
"696 699 LINE SMOOTH",
"685 704 OFFCURVE",
"674 713 OFFCURVE",
"674 720 QCURVE SMOOTH",
"674 1088 LINE SMOOTH",
"674 1094 OFFCURVE",
"665 1104 OFFCURVE",
"658 1104 QCURVE SMOOTH",
"652 1104 OFFCURVE",
"636 1094 OFFCURVE",
"628 1090 QCURVE SMOOTH",
"588 1070 LINE SMOOTH",
"584 1068 OFFCURVE",
"569 1064 OFFCURVE",
"558 1056 OFFCURVE",
"558 1048 QCURVE SMOOTH",
"558 684 LINE SMOOTH",
"558 675 OFFCURVE",
"552 669 QCURVE SMOOTH",
"546 663 OFFCURVE",
"535 654 OFFCURVE",
"528 646 OFFCURVE",
"528 640 QCURVE SMOOTH",
"528 633 OFFCURVE",
"538 624 OFFCURVE",
"556 619 OFFCURVE",
"560 617 QCURVE SMOOTH",
"674 560 LINE SMOOTH",
"678 558 OFFCURVE",
"697 544 OFFCURVE",
"704 544 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"980 716 LINE SMOOTH",
"991 692 OFFCURVE",
"1008 692 QCURVE SMOOTH",
"1014 692 OFFCURVE",
"1022 698 OFFCURVE",
"1031 711 OFFCURVE",
"1036 716 QCURVE SMOOTH",
"1080 760 LINE SMOOTH",
"1085 765 OFFCURVE",
"1098 774 OFFCURVE",
"1104 782 OFFCURVE",
"1104 788 QCURVE SMOOTH",
"1104 795 OFFCURVE",
"1083 810 OFFCURVE",
"1080 816 QCURVE SMOOTH",
"1036 904 LINE SMOOTH",
"1025 928 OFFCURVE",
"1008 928 QCURVE SMOOTH",
"1002 928 OFFCURVE",
"994 922 OFFCURVE",
"985 909 OFFCURVE",
"980 904 QCURVE SMOOTH",
"936 860 LINE SMOOTH",
"931 855 OFFCURVE",
"918 846 OFFCURVE",
"912 838 OFFCURVE",
"912 832 QCURVE SMOOTH",
"912 825 OFFCURVE",
"933 810 OFFCURVE",
"936 804 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-682 320 OFFCURVE",
"-673 328 OFFCURVE",
"-659 345 OFFCURVE",
"-652 352 QCURVE SMOOTH",
"-576 428 LINE SMOOTH",
"-571 433 OFFCURVE",
"-560 441 OFFCURVE",
"-552 450 OFFCURVE",
"-552 456 QCURVE SMOOTH",
"-552 463 OFFCURVE",
"-561 472 OFFCURVE",
"-568 472 QCURVE SMOOTH",
"-573 472 OFFCURVE",
"-581 466 OFFCURVE",
"-591 453 OFFCURVE",
"-596 448 QCURVE SMOOTH",
"-600 444 OFFCURVE",
"-611 435 OFFCURVE",
"-616 435 QCURVE SMOOTH",
"-625 435 OFFCURVE",
"-638 438 QCURVE SMOOTH",
"-973 505 LINE",
"-999 512 OFFCURVE",
"-1008 512 QCURVE SMOOTH",
"-1014 512 OFFCURVE",
"-1023 504 OFFCURVE",
"-1037 487 OFFCURVE",
"-1044 480 QCURVE SMOOTH",
"-1120 404 LINE SMOOTH",
"-1125 399 OFFCURVE",
"-1136 391 OFFCURVE",
"-1144 382 OFFCURVE",
"-1144 376 QCURVE SMOOTH",
"-1144 369 OFFCURVE",
"-1135 360 OFFCURVE",
"-1128 360 QCURVE SMOOTH",
"-1123 360 OFFCURVE",
"-1115 366 OFFCURVE",
"-1105 379 OFFCURVE",
"-1100 384 QCURVE SMOOTH",
"-1096 388 OFFCURVE",
"-1085 397 OFFCURVE",
"-1080 397 QCURVE SMOOTH",
"-1071 397 OFFCURVE",
"-1058 394 QCURVE SMOOTH",
"-718 326 LINE SMOOTH",
"-715 325 OFFCURVE",
"-697 320 OFFCURVE",
"-688 320 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-32 428 LINE SMOOTH",
"-27 433 OFFCURVE",
"-16 441 OFFCURVE",
"-8 450 OFFCURVE",
"-8 456 QCURVE SMOOTH",
"-8 463 OFFCURVE",
"-17 472 OFFCURVE",
"-24 472 QCURVE SMOOTH",
"-29 472 OFFCURVE",
"-37 466 OFFCURVE",
"-47 453 OFFCURVE",
"-52 448 QCURVE SMOOTH",
"-64 436 OFFCURVE",
"-72 436 QCURVE SMOOTH",
"-81 436 OFFCURVE",
"-92 439 QCURVE SMOOTH",
"-352 504 LINE SMOOTH",
"-357 505 OFFCURVE",
"-376 512 OFFCURVE",
"-384 512 QCURVE SMOOTH",
"-390 512 OFFCURVE",
"-399 504 OFFCURVE",
"-413 487 OFFCURVE",
"-420 480 QCURVE SMOOTH",
"-496 404 LINE SMOOTH",
"-501 399 OFFCURVE",
"-512 391 OFFCURVE",
"-520 382 OFFCURVE",
"-520 376 QCURVE SMOOTH",
"-520 369 OFFCURVE",
"-511 360 OFFCURVE",
"-504 360 QCURVE SMOOTH",
"-499 360 OFFCURVE",
"-491 366 OFFCURVE",
"-481 379 OFFCURVE",
"-476 384 QCURVE SMOOTH",
"-464 396 OFFCURVE",
"-456 396 QCURVE SMOOTH",
"-447 396 OFFCURVE",
"-436 393 QCURVE SMOOTH",
"-176 328 LINE SMOOTH",
"-171 327 OFFCURVE",
"-152 320 OFFCURVE",
"-144 320 QCURVE SMOOTH",
"-138 320 OFFCURVE",
"-129 328 OFFCURVE",
"-115 345 OFFCURVE",
"-108 352 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"326 320 OFFCURVE",
"335 328 OFFCURVE",
"349 345 OFFCURVE",
"356 352 QCURVE SMOOTH",
"432 428 LINE SMOOTH",
"437 433 OFFCURVE",
"448 441 OFFCURVE",
"456 450 OFFCURVE",
"456 456 QCURVE SMOOTH",
"456 463 OFFCURVE",
"447 472 OFFCURVE",
"440 472 QCURVE SMOOTH",
"435 472 OFFCURVE",
"427 466 OFFCURVE",
"417 453 OFFCURVE",
"412 448 QCURVE SMOOTH",
"400 436 OFFCURVE",
"392 436 QCURVE SMOOTH",
"386 436 OFFCURVE",
"375 440 QCURVE SMOOTH",
"192 501 LINE SMOOTH",
"187 503 OFFCURVE",
"168 512 OFFCURVE",
"160 512 QCURVE SMOOTH",
"154 512 OFFCURVE",
"145 504 OFFCURVE",
"131 487 OFFCURVE",
"124 480 QCURVE SMOOTH",
"48 404 LINE SMOOTH",
"43 399 OFFCURVE",
"32 391 OFFCURVE",
"24 382 OFFCURVE",
"24 376 QCURVE SMOOTH",
"24 369 OFFCURVE",
"33 360 OFFCURVE",
"40 360 QCURVE SMOOTH",
"45 360 OFFCURVE",
"53 366 OFFCURVE",
"63 379 OFFCURVE",
"68 384 QCURVE SMOOTH",
"80 396 OFFCURVE",
"88 396 QCURVE SMOOTH",
"94 396 OFFCURVE",
"105 392 QCURVE SMOOTH",
"288 331 LINE SMOOTH",
"293 329 OFFCURVE",
"312 320 OFFCURVE",
"320 320 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"816 428 LINE SMOOTH",
"821 433 OFFCURVE",
"832 441 OFFCURVE",
"840 450 OFFCURVE",
"840 456 QCURVE SMOOTH",
"840 463 OFFCURVE",
"831 472 OFFCURVE",
"824 472 QCURVE SMOOTH",
"819 472 OFFCURVE",
"811 466 OFFCURVE",
"801 453 OFFCURVE",
"796 448 QCURVE SMOOTH",
"792 444 OFFCURVE",
"783 437 OFFCURVE",
"778 437 QCURVE SMOOTH",
"770 437 OFFCURVE",
"760 443 QCURVE SMOOTH",
"656 495 LINE SMOOTH",
"652 497 OFFCURVE",
"631 512 OFFCURVE",
"624 512 QCURVE SMOOTH",
"618 512 OFFCURVE",
"609 504 OFFCURVE",
"595 487 OFFCURVE",
"588 480 QCURVE SMOOTH",
"512 404 LINE SMOOTH",
"507 399 OFFCURVE",
"496 391 OFFCURVE",
"488 382 OFFCURVE",
"488 376 QCURVE SMOOTH",
"488 369 OFFCURVE",
"497 360 OFFCURVE",
"504 360 QCURVE SMOOTH",
"509 360 OFFCURVE",
"517 366 OFFCURVE",
"527 379 OFFCURVE",
"532 384 QCURVE SMOOTH",
"536 388 OFFCURVE",
"545 395 OFFCURVE",
"550 395 QCURVE SMOOTH",
"558 395 OFFCURVE",
"568 389 QCURVE SMOOTH",
"674 336 LINE SMOOTH",
"678 334 OFFCURVE",
"697 320 OFFCURVE",
"704 320 QCURVE SMOOTH",
"710 320 OFFCURVE",
"719 328 OFFCURVE",
"733 345 OFFCURVE",
"740 352 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1120 428 LINE SMOOTH",
"1125 433 OFFCURVE",
"1138 442 OFFCURVE",
"1144 450 OFFCURVE",
"1144 456 QCURVE SMOOTH",
"1144 463 OFFCURVE",
"1135 472 OFFCURVE",
"1128 472 QCURVE SMOOTH",
"1122 472 OFFCURVE",
"1114 466 OFFCURVE",
"1105 453 OFFCURVE",
"1100 448 QCURVE SMOOTH",
"1095 443 OFFCURVE",
"1088 443 QCURVE SMOOTH",
"1081 443 OFFCURVE",
"1076 448 QCURVE SMOOTH",
"1036 488 LINE SMOOTH",
"1031 493 OFFCURVE",
"1022 506 OFFCURVE",
"1014 512 OFFCURVE",
"1008 512 QCURVE SMOOTH",
"1002 512 OFFCURVE",
"994 506 OFFCURVE",
"985 493 OFFCURVE",
"980 488 QCURVE SMOOTH",
"896 404 LINE SMOOTH",
"891 399 OFFCURVE",
"878 390 OFFCURVE",
"872 382 OFFCURVE",
"872 376 QCURVE SMOOTH",
"872 369 OFFCURVE",
"881 360 OFFCURVE",
"888 360 QCURVE SMOOTH",
"894 360 OFFCURVE",
"902 366 OFFCURVE",
"911 379 OFFCURVE",
"916 384 QCURVE SMOOTH",
"921 389 OFFCURVE",
"928 389 QCURVE SMOOTH",
"935 389 OFFCURVE",
"940 384 QCURVE SMOOTH",
"980 344 LINE SMOOTH",
"985 339 OFFCURVE",
"994 326 OFFCURVE",
"1002 320 OFFCURVE",
"1008 320 QCURVE SMOOTH",
"1014 320 OFFCURVE",
"1022 326 OFFCURVE",
"1031 339 OFFCURVE",
"1036 344 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1820 -296 OFFCURVE",
"1828 -290 OFFCURVE",
"1837 -277 OFFCURVE",
"1842 -272 QCURVE SMOOTH",
"1966 -148 LINE SMOOTH",
"1978 -136 OFFCURVE",
"1988 -114 OFFCURVE",
"1988 -96 QCURVE SMOOTH",
"1988 292 LINE SMOOTH",
"1988 301 OFFCURVE",
"1977 312 OFFCURVE",
"1968 312 QCURVE SMOOTH",
"1962 312 OFFCURVE",
"1954 306 OFFCURVE",
"1945 293 OFFCURVE",
"1940 288 QCURVE SMOOTH",
"1894 242 LINE SMOOTH",
"1882 230 OFFCURVE",
"1872 208 OFFCURVE",
"1872 190 QCURVE SMOOTH",
"1872 -176 LINE SMOOTH",
"1872 -193 OFFCURVE",
"1860 -214 OFFCURVE",
"1846 -228 QCURVE SMOOTH",
"1822 -252 LINE SMOOTH",
"1817 -257 OFFCURVE",
"1804 -266 OFFCURVE",
"1798 -274 OFFCURVE",
"1798 -280 QCURVE SMOOTH",
"1798 -287 OFFCURVE",
"1807 -296 OFFCURVE",
"1814 -296 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-682 96 OFFCURVE",
"-673 104 OFFCURVE",
"-659 121 OFFCURVE",
"-652 128 QCURVE SMOOTH",
"-624 156 LINE SMOOTH",
"-617 163 OFFCURVE",
"-600 177 OFFCURVE",
"-592 186 OFFCURVE",
"-592 192 QCURVE SMOOTH",
"-592 200 OFFCURVE",
"-607 208 OFFCURVE",
"-623 211 QCURVE SMOOTH",
"-973 281 LINE",
"-999 288 OFFCURVE",
"-1008 288 QCURVE SMOOTH",
"-1014 288 OFFCURVE",
"-1023 280 OFFCURVE",
"-1037 263 OFFCURVE",
"-1044 256 QCURVE SMOOTH",
"-1072 228 LINE SMOOTH",
"-1079 221 OFFCURVE",
"-1096 207 OFFCURVE",
"-1104 198 OFFCURVE",
"-1104 192 QCURVE SMOOTH",
"-1104 184 OFFCURVE",
"-1089 176 OFFCURVE",
"-1073 173 QCURVE SMOOTH",
"-718 102 LINE SMOOTH",
"-715 101 OFFCURVE",
"-697 96 OFFCURVE",
"-688 96 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-138 96 OFFCURVE",
"-129 104 OFFCURVE",
"-115 121 OFFCURVE",
"-108 128 QCURVE SMOOTH",
"-80 156 LINE SMOOTH",
"-73 163 OFFCURVE",
"-56 177 OFFCURVE",
"-48 186 OFFCURVE",
"-48 192 QCURVE SMOOTH",
"-48 199 OFFCURVE",
"-59 208 OFFCURVE",
"-77 211 OFFCURVE",
"-80 212 QCURVE SMOOTH",
"-352 280 LINE SMOOTH",
"-357 281 OFFCURVE",
"-376 288 OFFCURVE",
"-384 288 QCURVE SMOOTH",
"-390 288 OFFCURVE",
"-399 280 OFFCURVE",
"-413 263 OFFCURVE",
"-420 256 QCURVE SMOOTH",
"-448 228 LINE SMOOTH",
"-455 221 OFFCURVE",
"-472 207 OFFCURVE",
"-480 198 OFFCURVE",
"-480 192 QCURVE SMOOTH",
"-480 185 OFFCURVE",
"-469 176 OFFCURVE",
"-451 173 OFFCURVE",
"-448 172 QCURVE SMOOTH",
"-176 104 LINE SMOOTH",
"-171 103 OFFCURVE",
"-152 96 OFFCURVE",
"-144 96 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"326 96 OFFCURVE",
"334 102 OFFCURVE",
"343 115 OFFCURVE",
"348 120 QCURVE SMOOTH",
"392 164 LINE SMOOTH",
"397 169 OFFCURVE",
"410 178 OFFCURVE",
"416 186 OFFCURVE",
"416 192 QCURVE SMOOTH",
"416 199 OFFCURVE",
"405 207 OFFCURVE",
"388 212 OFFCURVE",
"384 213 QCURVE SMOOTH",
"192 277 LINE SMOOTH",
"187 279 OFFCURVE",
"168 288 OFFCURVE",
"160 288 QCURVE SMOOTH",
"154 288 OFFCURVE",
"146 282 OFFCURVE",
"137 269 OFFCURVE",
"132 264 QCURVE SMOOTH",
"88 220 LINE SMOOTH",
"83 215 OFFCURVE",
"70 206 OFFCURVE",
"64 198 OFFCURVE",
"64 192 QCURVE SMOOTH",
"64 185 OFFCURVE",
"75 177 OFFCURVE",
"92 172 OFFCURVE",
"96 171 QCURVE SMOOTH",
"288 107 LINE SMOOTH",
"293 105 OFFCURVE",
"312 96 OFFCURVE",
"320 96 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"710 96 OFFCURVE",
"718 102 OFFCURVE",
"727 115 OFFCURVE",
"732 120 QCURVE SMOOTH",
"776 164 LINE SMOOTH",
"781 169 OFFCURVE",
"794 178 OFFCURVE",
"800 186 OFFCURVE",
"800 192 QCURVE SMOOTH",
"800 199 OFFCURVE",
"790 208 OFFCURVE",
"772 213 OFFCURVE",
"768 215 QCURVE SMOOTH",
"656 271 LINE SMOOTH",
"652 273 OFFCURVE",
"631 288 OFFCURVE",
"624 288 QCURVE SMOOTH",
"618 288 OFFCURVE",
"610 282 OFFCURVE",
"601 269 OFFCURVE",
"596 264 QCURVE SMOOTH",
"552 220 LINE SMOOTH",
"547 215 OFFCURVE",
"536 207 OFFCURVE",
"528 198 OFFCURVE",
"528 192 QCURVE SMOOTH",
"528 185 OFFCURVE",
"538 176 OFFCURVE",
"556 171 OFFCURVE",
"560 169 QCURVE SMOOTH",
"674 112 LINE SMOOTH",
"678 110 OFFCURVE",
"697 96 OFFCURVE",
"704 96 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"980 120 LINE SMOOTH",
"985 115 OFFCURVE",
"994 102 OFFCURVE",
"1002 96 OFFCURVE",
"1008 96 QCURVE SMOOTH",
"1014 96 OFFCURVE",
"1022 102 OFFCURVE",
"1031 115 OFFCURVE",
"1036 120 QCURVE SMOOTH",
"1080 164 LINE SMOOTH",
"1085 169 OFFCURVE",
"1098 178 OFFCURVE",
"1104 186 OFFCURVE",
"1104 192 QCURVE SMOOTH",
"1104 198 OFFCURVE",
"1098 206 OFFCURVE",
"1085 215 OFFCURVE",
"1080 220 QCURVE SMOOTH",
"1036 264 LINE SMOOTH",
"1031 269 OFFCURVE",
"1022 282 OFFCURVE",
"1014 288 OFFCURVE",
"1008 288 QCURVE SMOOTH",
"1002 288 OFFCURVE",
"994 282 OFFCURVE",
"985 269 OFFCURVE",
"980 264 QCURVE SMOOTH",
"936 220 LINE SMOOTH",
"931 215 OFFCURVE",
"918 206 OFFCURVE",
"912 198 OFFCURVE",
"912 192 QCURVE SMOOTH",
"912 186 OFFCURVE",
"918 178 OFFCURVE",
"931 169 OFFCURVE",
"936 164 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1216 -96 OFFCURVE",
"1232 -86 OFFCURVE",
"1240 -82 QCURVE SMOOTH",
"1280 -62 LINE SMOOTH",
"1282 -61 OFFCURVE",
"1297 -56 OFFCURVE",
"1310 -48 OFFCURVE",
"1310 -40 QCURVE SMOOTH",
"1310 272 LINE SMOOTH",
"1310 278 OFFCURVE",
"1301 288 OFFCURVE",
"1294 288 QCURVE SMOOTH",
"1288 288 OFFCURVE",
"1272 278 OFFCURVE",
"1264 274 QCURVE SMOOTH",
"1224 254 LINE SMOOTH",
"1220 252 OFFCURVE",
"1205 248 OFFCURVE",
"1194 240 OFFCURVE",
"1194 232 QCURVE SMOOTH",
"1194 -80 LINE SMOOTH",
"1194 -86 OFFCURVE",
"1203 -96 OFFCURVE",
"1210 -96 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1380 -280 OFFCURVE",
"1389 -272 OFFCURVE",
"1403 -255 OFFCURVE",
"1410 -248 QCURVE SMOOTH",
"1438 -220 LINE SMOOTH",
"1445 -213 OFFCURVE",
"1462 -199 OFFCURVE",
"1470 -190 OFFCURVE",
"1470 -184 QCURVE SMOOTH",
"1470 268 LINE SMOOTH",
"1470 277 OFFCURVE",
"1459 288 OFFCURVE",
"1450 288 QCURVE SMOOTH",
"1444 288 OFFCURVE",
"1435 280 OFFCURVE",
"1421 263 OFFCURVE",
"1414 256 QCURVE SMOOTH",
"1386 228 LINE SMOOTH",
"1379 221 OFFCURVE",
"1362 207 OFFCURVE",
"1354 198 OFFCURVE",
"1354 192 QCURVE SMOOTH",
"1354 -260 LINE SMOOTH",
"1354 -269 OFFCURVE",
"1365 -280 OFFCURVE",
"1374 -280 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1434 -426 OFFCURVE",
"1442 -420 OFFCURVE",
"1452 -407 OFFCURVE",
"1457 -402 QCURVE SMOOTH",
"1677 -182 LINE SMOOTH",
"1689 -170 OFFCURVE",
"1699 -148 OFFCURVE",
"1699 -130 QCURVE SMOOTH",
"1699 251 LINE SMOOTH",
"1699 260 OFFCURVE",
"1688 271 OFFCURVE",
"1679 271 QCURVE SMOOTH",
"1673 271 OFFCURVE",
"1665 265 OFFCURVE",
"1656 252 OFFCURVE",
"1651 247 QCURVE SMOOTH",
"1605 201 LINE SMOOTH",
"1593 189 OFFCURVE",
"1583 167 OFFCURVE",
"1583 149 QCURVE SMOOTH",
"1583 -210 LINE SMOOTH",
"1583 -227 OFFCURVE",
"1571 -248 OFFCURVE",
"1557 -262 QCURVE SMOOTH",
"1437 -382 LINE SMOOTH",
"1432 -387 OFFCURVE",
"1421 -395 OFFCURVE",
"1413 -404 OFFCURVE",
"1413 -410 QCURVE SMOOTH",
"1413 -417 OFFCURVE",
"1422 -426 OFFCURVE",
"1429 -426 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"958 -336 LINE SMOOTH",
"958 -343 OFFCURVE",
"956 -352 OFFCURVE",
"952 -356 QCURVE SMOOTH",
"947 -361 OFFCURVE",
"934 -370 OFFCURVE",
"928 -378 OFFCURVE",
"928 -384 QCURVE SMOOTH",
"928 -390 OFFCURVE",
"934 -398 OFFCURVE",
"947 -407 OFFCURVE",
"952 -412 QCURVE SMOOTH",
"996 -456 LINE SMOOTH",
"1001 -461 OFFCURVE",
"1010 -474 OFFCURVE",
"1018 -480 OFFCURVE",
"1024 -480 QCURVE SMOOTH",
"1030 -480 OFFCURVE",
"1038 -474 OFFCURVE",
"1047 -461 OFFCURVE",
"1052 -456 QCURVE SMOOTH",
"1096 -412 LINE SMOOTH",
"1101 -407 OFFCURVE",
"1114 -398 OFFCURVE",
"1120 -390 OFFCURVE",
"1120 -384 QCURVE SMOOTH",
"1120 -378 OFFCURVE",
"1114 -370 OFFCURVE",
"1101 -361 OFFCURVE",
"1096 -356 QCURVE SMOOTH",
"1085 -345 OFFCURVE",
"1074 -324 OFFCURVE",
"1074 -308 QCURVE SMOOTH",
"1074 -64 LINE SMOOTH",
"1074 -57 OFFCURVE",
"1076 -48 OFFCURVE",
"1080 -44 QCURVE SMOOTH",
"1085 -39 OFFCURVE",
"1098 -30 OFFCURVE",
"1104 -22 OFFCURVE",
"1104 -16 QCURVE SMOOTH",
"1104 -10 OFFCURVE",
"1098 -2 OFFCURVE",
"1085 7 OFFCURVE",
"1080 12 QCURVE SMOOTH",
"1036 56 LINE SMOOTH",
"1031 61 OFFCURVE",
"1022 74 OFFCURVE",
"1014 80 OFFCURVE",
"1008 80 QCURVE SMOOTH",
"1002 80 OFFCURVE",
"994 74 OFFCURVE",
"985 61 OFFCURVE",
"980 56 QCURVE SMOOTH",
"936 12 LINE SMOOTH",
"931 7 OFFCURVE",
"918 -2 OFFCURVE",
"912 -10 OFFCURVE",
"912 -16 QCURVE SMOOTH",
"912 -22 OFFCURVE",
"918 -30 OFFCURVE",
"931 -39 OFFCURVE",
"936 -44 QCURVE SMOOTH",
"947 -55 OFFCURVE",
"958 -76 OFFCURVE",
"958 -92 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-40 -752 LINE SMOOTH",
"-22 -752 OFFCURVE",
"0 -742 OFFCURVE",
"12 -730 QCURVE SMOOTH",
"96 -646 LINE SMOOTH",
"101 -641 OFFCURVE",
"112 -633 OFFCURVE",
"120 -624 OFFCURVE",
"120 -618 QCURVE SMOOTH",
"120 -611 OFFCURVE",
"111 -602 OFFCURVE",
"104 -602 QCURVE SMOOTH",
"99 -602 OFFCURVE",
"91 -608 OFFCURVE",
"81 -621 OFFCURVE",
"76 -626 QCURVE SMOOTH",
"64 -638 OFFCURVE",
"53 -644 OFFCURVE",
"44 -644 QCURVE SMOOTH",
"-52 -644 LINE SMOOTH",
"-71 -644 OFFCURVE",
"-95 -637 OFFCURVE",
"-107 -625 QCURVE SMOOTH",
"-208 -524 LINE SMOOTH",
"-222 -510 OFFCURVE",
"-234 -489 OFFCURVE",
"-234 -472 QCURVE SMOOTH",
"-234 -200 LINE SMOOTH",
"-234 -183 OFFCURVE",
"-222 -162 OFFCURVE",
"-208 -148 QCURVE SMOOTH",
"-88 -28 LINE SMOOTH",
"-83 -23 OFFCURVE",
"-70 -14 OFFCURVE",
"-64 -6 OFFCURVE",
"-64 0 QCURVE SMOOTH",
"-64 7 OFFCURVE",
"-73 16 OFFCURVE",
"-80 16 QCURVE SMOOTH",
"-86 16 OFFCURVE",
"-94 10 OFFCURVE",
"-103 -3 OFFCURVE",
"-108 -8 QCURVE SMOOTH",
"-328 -228 LINE SMOOTH",
"-340 -240 OFFCURVE",
"-350 -262 OFFCURVE",
"-350 -280 QCURVE SMOOTH",
"-350 -552 LINE SMOOTH",
"-350 -570 OFFCURVE",
"-340 -592 OFFCURVE",
"-328 -604 QCURVE SMOOTH",
"-201 -731 LINE SMOOTH",
"-189 -743 OFFCURVE",
"-166 -752 OFFCURVE",
"-148 -752 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-916 -24 LINE",
"-1032 -24 LINE",
"-1032 -423 LINE SMOOTH",
"-1032 -497 OFFCURVE",
"-1050 -590 OFFCURVE",
"-1086 -652 OFFCURVE",
"-1118 -684 QCURVE SMOOTH",
"-1123 -689 OFFCURVE",
"-1136 -698 OFFCURVE",
"-1142 -706 OFFCURVE",
"-1142 -712 QCURVE SMOOTH",
"-1142 -719 OFFCURVE",
"-1133 -728 OFFCURVE",
"-1126 -728 QCURVE SMOOTH",
"-1121 -728 OFFCURVE",
"-1113 -722 OFFCURVE",
"-1103 -709 OFFCURVE",
"-1098 -704 QCURVE SMOOTH",
"-1036 -642 OFFCURVE",
"-960 -542 OFFCURVE",
"-916 -421 OFFCURVE",
"-916 -344 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-742 -24 LINE",
"-858 -24 LINE",
"-858 -304 LINE SMOOTH",
"-858 -391 OFFCURVE",
"-872 -476 OFFCURVE",
"-888 -492 QCURVE SMOOTH",
"-893 -497 OFFCURVE",
"-906 -506 OFFCURVE",
"-912 -514 OFFCURVE",
"-912 -520 QCURVE SMOOTH",
"-912 -527 OFFCURVE",
"-903 -536 OFFCURVE",
"-896 -536 QCURVE SMOOTH",
"-891 -536 OFFCURVE",
"-883 -530 OFFCURVE",
"-873 -517 OFFCURVE",
"-868 -512 QCURVE SMOOTH",
"-798 -442 OFFCURVE",
"-742 -318 OFFCURVE",
"-742 -224 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-48 -194 LINE",
"-28 -214 LINE",
"92 -94 LINE",
"72 -74 LINE"
);
},
{
closed = 1;
nodes = (
"704 -294 LINE SMOOTH",
"722 -294 OFFCURVE",
"744 -284 OFFCURVE",
"756 -272 QCURVE SMOOTH",
"808 -220 LINE SMOOTH",
"815 -213 OFFCURVE",
"820 -205 OFFCURVE",
"820 -200 QCURVE SMOOTH",
"820 -193 OFFCURVE",
"811 -186 OFFCURVE",
"804 -186 QCURVE SMOOTH",
"340 -186 LINE SMOOTH",
"322 -186 OFFCURVE",
"300 -196 OFFCURVE",
"288 -208 QCURVE SMOOTH",
"236 -260 LINE SMOOTH",
"229 -267 OFFCURVE",
"224 -275 OFFCURVE",
"224 -280 QCURVE SMOOTH",
"224 -287 OFFCURVE",
"233 -294 OFFCURVE",
"240 -294 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"249 -528 OFFCURVE",
"257 -522 OFFCURVE",
"267 -509 OFFCURVE",
"272 -504 QCURVE SMOOTH",
"284 -492 OFFCURVE",
"295 -486 OFFCURVE",
"304 -486 QCURVE SMOOTH",
"700 -486 LINE SMOOTH",
"718 -486 OFFCURVE",
"740 -476 OFFCURVE",
"752 -464 QCURVE SMOOTH",
"836 -380 LINE SMOOTH",
"841 -375 OFFCURVE",
"852 -367 OFFCURVE",
"860 -358 OFFCURVE",
"860 -352 QCURVE SMOOTH",
"860 -345 OFFCURVE",
"851 -336 OFFCURVE",
"844 -336 QCURVE SMOOTH",
"839 -336 OFFCURVE",
"831 -342 OFFCURVE",
"821 -355 OFFCURVE",
"816 -360 QCURVE SMOOTH",
"804 -372 OFFCURVE",
"793 -378 OFFCURVE",
"784 -378 QCURVE SMOOTH",
"388 -378 LINE SMOOTH",
"370 -378 OFFCURVE",
"348 -388 OFFCURVE",
"336 -400 QCURVE SMOOTH",
"252 -484 LINE SMOOTH",
"247 -489 OFFCURVE",
"236 -497 OFFCURVE",
"228 -506 OFFCURVE",
"228 -512 QCURVE SMOOTH",
"228 -519 OFFCURVE",
"237 -528 OFFCURVE",
"244 -528 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"472 -1044 LINE",
"512 -1044 LINE",
"712 -844 LINE SMOOTH",
"717 -839 OFFCURVE",
"728 -831 OFFCURVE",
"736 -822 OFFCURVE",
"736 -817 QCURVE SMOOTH",
"736 -816 LINE SMOOTH",
"736 -809 OFFCURVE",
"727 -800 OFFCURVE",
"720 -800 QCURVE SMOOTH",
"714 -800 OFFCURVE",
"706 -806 OFFCURVE",
"697 -819 OFFCURVE",
"693 -823 QCURVE SMOOTH",
"692 -824 LINE SMOOTH",
"680 -836 OFFCURVE",
"669 -842 OFFCURVE",
"660 -842 QCURVE SMOOTH",
"264 -842 LINE SMOOTH",
"246 -842 OFFCURVE",
"224 -852 OFFCURVE",
"212 -864 QCURVE SMOOTH",
"128 -948 LINE SMOOTH",
"123 -953 OFFCURVE",
"112 -961 OFFCURVE",
"104 -970 OFFCURVE",
"104 -976 QCURVE SMOOTH",
"104 -983 OFFCURVE",
"113 -992 OFFCURVE",
"120 -992 QCURVE SMOOTH",
"125 -992 OFFCURVE",
"133 -986 OFFCURVE",
"143 -973 OFFCURVE",
"148 -968 QCURVE SMOOTH",
"160 -956 OFFCURVE",
"171 -950 OFFCURVE",
"180 -950 QCURVE SMOOTH",
"566 -950 LINE"
);
},
{
closed = 1;
nodes = (
"-928 -1008 LINE",
"-1044 -1008 LINE",
"-1044 -1152 LINE SMOOTH",
"-1044 -1225 OFFCURVE",
"-1062 -1317 OFFCURVE",
"-1098 -1380 OFFCURVE",
"-1130 -1412 QCURVE SMOOTH",
"-1135 -1417 OFFCURVE",
"-1148 -1426 OFFCURVE",
"-1154 -1434 OFFCURVE",
"-1154 -1440 QCURVE SMOOTH",
"-1154 -1447 OFFCURVE",
"-1145 -1456 OFFCURVE",
"-1138 -1456 QCURVE SMOOTH",
"-1133 -1456 OFFCURVE",
"-1125 -1450 OFFCURVE",
"-1115 -1437 OFFCURVE",
"-1110 -1432 QCURVE SMOOTH",
"-1073 -1396 LINE SMOOTH",
"-1009 -1333 OFFCURVE",
"-955 -1262 OFFCURVE",
"-928 -1161 OFFCURVE",
"-928 -1072 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-1086 -1280 LINE",
"-1194 -1348 LINE",
"-1258 -1412 LINE SMOOTH",
"-1263 -1417 OFFCURVE",
"-1276 -1426 OFFCURVE",
"-1282 -1434 OFFCURVE",
"-1282 -1440 QCURVE SMOOTH",
"-1282 -1447 OFFCURVE",
"-1273 -1456 OFFCURVE",
"-1266 -1456 QCURVE SMOOTH",
"-1261 -1456 OFFCURVE",
"-1253 -1450 OFFCURVE",
"-1243 -1437 OFFCURVE",
"-1238 -1432 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHW[ ]\011/* 38 values pushed */
27 1 2 8 6 89 1 5 4 101 1 11 13 630 606 2 48 61 849 618 2 58 70 643 1 73 58 851 850 2 60 73 987 1 84 83 8 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
14 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 255 values pushed */
0 0 6 0 133 0 8 6 9 6 8 9 128 0 9 1 6 9 1 126 0 1 7 6 1 7 126 0 7 4 6 7 4 126 0 4 5 6 4 5 126 0 5 2 6 5 2 126 87 1 2 3 6 2 3 126 0 11 13 14 13 11 14 128 0 10 14 12 14 10 12 128 88 1 12 17 14 12 17 126 44 38 31 26 4 19 17 43 17 19 43 128 0 43 18 17 43 18 126 37 30 25 3 18 15 17 18 15 126 34 27 22 3 15 40 17 15 40 126 0 40 16 17 40 16 126 41 35 28 23 4 16 20 17 16 20 126 0 45 20 47 20 45 47 128 0 61 47 48 47 61 48 128 0 63 48 65 48 63 65 128 0 65 70 48 65 70 126 72 1 70 58 48 70 58 126 96 1 58 73 48 58 73 126 97 1 60 73 46 73 60 46 128 0 76 46 75 46 76 75 128 98 1 62 75 64 75 62 64 128 0 64 77 75 64 77 126 100 1 78 77 71 77 78 71 128 0 71 67 77 71 67 126 0 67 66 77 67 66 126 0 69 66 68 66 69 68 128 0 82 68 81 68 82 81 
NPUSHB[ ]\011/* 126 values pushed */
128 0 80 79 85 79 80 85 128 0 85 83 79 85 83 126 0 83 84 79 83 112 86 1 84 84 132 0 6 0 3 13 6 3 105 0 13 0 14 10 13 14 105 42 36 29 24 4 17 39 33 90 32 21 89 6 20 45 17 20 105 59 57 55 53 51 49 6 47 56 95 54 94 52 93 50 92 8 48 63 47 48 105 0 73 74 91 2 46 76 73 46 105 0 75 0 77 78 75 77 103 0 66 99 1 68 82 66 68 103 0 81 79 79 81 87 0 81 81 79 95 0 79 81 79 79 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 255 values pushed */
0 0 6 0 133 0 8 6 9 6 8 9 128 0 9 1 6 9 1 126 0 1 7 6 1 7 126 0 7 4 6 7 4 126 0 4 5 6 4 5 126 0 5 2 6 5 2 126 87 1 2 3 6 2 3 126 0 11 13 14 13 11 14 128 0 10 14 12 14 10 12 128 88 1 12 17 14 12 17 126 44 38 31 26 4 19 17 43 17 19 43 128 0 43 18 17 43 18 126 37 30 25 3 18 15 17 18 15 126 34 27 22 3 15 40 17 15 40 126 0 40 16 17 40 16 126 41 35 28 23 4 16 20 17 16 20 126 0 45 20 47 20 45 47 128 0 61 47 48 47 61 48 128 0 63 48 65 48 63 65 128 0 65 70 48 65 70 126 72 1 70 58 48 70 58 126 96 1 58 73 48 58 73 126 97 1 60 73 46 73 60 46 128 0 76 46 75 46 76 75 128 98 1 62 75 64 75 62 64 128 0 64 77 75 64 77 126 100 1 78 77 71 77 78 71 128 0 71 67 77 71 67 126 0 67 66 77 67 66 126 0 69 66 68 66 69 68 128 0 82 68 81 68 82 81 
NPUSHB[ ]\011/* 127 values pushed */
128 0 80 79 85 79 80 85 128 0 85 83 79 85 83 126 0 83 84 79 83 84 126 86 1 84 84 132 0 6 0 3 13 6 3 105 0 13 0 14 10 13 14 105 42 36 29 24 4 17 39 33 90 32 21 89 6 20 45 17 20 105 59 57 55 53 51 49 6 47 56 95 54 94 52 93 50 92 8 48 63 47 48 105 0 73 74 91 2 46 76 73 46 105 0 75 0 77 78 75 77 103 0 66 99 1 68 82 66 68 103 0 81 79 79 81 87 0 81 81 79 95 0 79 81 79 79 
EIF[ ]\011/* EndIf */
NPUSHW[ ]\011/* 231 values pushed */
874 874 751 751 653 653 627 627 603 603 533 533 499 499 465 465 434 434 402 402 254 254 157 157 75 75 0 0 979 977 973 972 961 959 950 949 941 939 933 930 921 919 914 912 874 911 874 910 905 902 893 891 886 883 873 871 862 860 846 845 835 833 826 825 814 812 751 805 751 803 794 792 787 784 767 765 734 732 701 699 653 684 653 683 673 671 627 652 627 651 640 638 603 626 603 625 615 613 598 596 580 578 533 566 533 565 550 548 499 532 499 531 516 514 465 498 465 497 482 480 434 464 434 463 450 448 402 433 402 432 422 420 394 392 388 386 381 379 369 367 363 361 356 354 344 342 337 335 331 329 319 317 312 310 306 304 254 301 254 300 290 288 284 282 278 276 266 264 260 258 246 244 239 238 234 232 222 220 215 214 210 208 157 205 157 204 194 192 186 185 182 180 170 168 162 161 154 152 139 137 75 126 75 125 115 113 108 106 98 96 67 65 60 59 56 54 44 42 37 36 33 31 0 28 0 28 47 37 101 6 24 
CALL[ ]\011/* CallFunction */";
};
width = 500;
}
);
note = working001;
}
);
instances = (
{
customParameters = (
{
name = postscriptFullName;
value = "Isotherma-Alpha";
},
{
name = postscriptFontName;
value = "Isotherma-Alpha";
}
);
instanceInterpolations = {
"EAEBD88B-362D-401C-A399-B15130C77D90" = 1;
};
name = Beta;
weightClass = Normal;
}
);
kerning = {
"EAEBD88B-362D-401C-A399-B15130C77D90" = {
L = {
T = -96;
};
P = {
o = -156;
};
c = {
l = -24;
};
e = {
n = 10;
r = 10;
};
r = {
a = -64;
g = -24;
};
};
};
manufacturer = "Open Gate Type Label";
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 0;
}
